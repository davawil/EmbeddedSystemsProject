
Lab4_integrate.elf:     file format elf32-littlenios2
Lab4_integrate.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x000118f4 memsz 0x000118f4 flags r-x
    LOAD off    0x00012914 vaddr 0x10111914 paddr 0x10113400 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014eec vaddr 0x10114eec paddr 0x10114eec align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011344  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000038c  10111588  10111588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10111914  10113400  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  10114eec  10114eec  00014eec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10115054  10115054  00014400  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014400  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001048  00000000  00000000  00014428  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029512  00000000  00000000  00015470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a514  00000000  00000000  0003e982  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cc9b  00000000  00000000  00048e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026a0  00000000  00000000  00055b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c1b  00000000  00000000  000581d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000185c1  00000000  00000000  0005bdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000743b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019d0  00000000  00000000  00074410  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000793d6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000793d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000793e5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000793e6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000793e7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000793f2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000793fd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00079408  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000054  00000000  00000000  00079412  2**0
                  CONTENTS, READONLY
 26 .jdi          00006d88  00000000  00000000  00079466  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00285183  00000000  00000000  000801ee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10111588 l    d  .rodata	00000000 .rodata
10111914 l    d  .rwdata	00000000 .rwdata
10114eec l    d  .bss	00000000 .bss
10115054 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/David/EmbeddedSystems_mini_project/EmbeddedSystemsProject_Integrate/sw/nios/Lab4_integrate_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
10100450 l     F .text	00000040 CameraControllerISR
10100490 l     F .text	00000040 LCDControllerISR
00000000 l    df *ABS*	00000000 i2c.c
10100750 l     F .text	00000034 i2c_usleep
10100784 l     F .text	00000044 wait_end_of_transfer
101007c8 l     F .text	00000070 set_data_control
10100838 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10101fcc l     F .text	00000008 __fp_unlock
10101fe0 l     F .text	0000019c __sinit.part.1
1010217c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10111914 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
10103cec l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1011165e l     O .rodata	00000010 zeroes.4404
10106318 l     F .text	000000bc __sbprintf
1011166e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
101065dc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10112160 l     O .rwdata	00000020 lc_ctype_charset
10112140 l     O .rwdata	00000020 lc_message_charset
10112180 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1011169c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10109ff4 l     F .text	000000fc __sprint_r.part.0
101117d0 l     O .rodata	00000010 blanks.4348
101117c0 l     O .rodata	00000010 zeroes.4349
1010b580 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010ed60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010ee6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010ee98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1010f224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010f304 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010f3f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010f5c4 l     F .text	0000003c alt_get_errno
1010f600 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010f818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
101133f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1010fa94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010fbc8 l     F .text	00000034 alt_dev_reg
10112360 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010fea0 l     F .text	0000020c altera_avalon_jtag_uart_irq
101100ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
101109b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10110e5c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10114f20 g     O .bss	00000004 alt_instruction_exception_handler
10109768 g     F .text	00000074 _mprec_log10
10109854 g     F .text	0000008c __any_on
101083cc g     F .text	00000054 _isatty_r
101116a8 g     O .rodata	00000028 __mprec_tinytens
1010f500 g     F .text	0000007c alt_main
10103c18 g     F .text	000000c0 _puts_r
10114f54 g     O .bss	00000100 alt_irq
101084fc g     F .text	00000060 _lseek_r
10113400 g       *ABS*	00000000 __flash_rwdata_start
10107e64 g     F .text	000000ac __sflags
1010d88c g     F .text	00000088 .hidden __eqdf2
10115054 g       *ABS*	00000000 __alt_heap_start
10103bdc g     F .text	0000003c printf
1010ba60 g     F .text	0000009c _wcrtomb_r
10104008 g     F .text	0000005c __sseek
1010231c g     F .text	00000010 __sinit
1010b908 g     F .text	00000140 __swbuf_r
10108420 g     F .text	0000007c _setlocale_r
10102184 g     F .text	00000068 __sfmoreglue
1010f5a0 g     F .text	00000024 __malloc_unlock
10108788 g     F .text	0000015c memmove
10102304 g     F .text	00000018 _cleanup
101088e4 g     F .text	000000a8 _Balloc
1010d914 g     F .text	000000dc .hidden __gtdf2
10111140 g     F .text	00000024 altera_nios2_gen2_irq_init
101009ac g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10114eec g     O .bss	00000004 currentFrame
10100020 g       *ABS*	00000000 __flash_exceptions_start
10102d78 g     F .text	0000005c _fstat_r
10114ef4 g     O .bss	00000004 errno
10103f84 g     F .text	00000008 __seofread
10114f18 g     O .bss	00000004 alt_argv
1011b3c0 g       *ABS*	00000000 _gp
1010fa64 g     F .text	00000030 usleep
101121e0 g     O .rwdata	00000180 alt_fd_list
10110b50 g     F .text	00000090 alt_find_dev
10108640 g     F .text	00000148 memcpy
10101fd4 g     F .text	0000000c _cleanup_r
1010eb78 g     F .text	000000dc .hidden __floatsidf
10100c20 g     F .text	00000194 i2c_write_array
10110f20 g     F .text	0000007c alt_io_redirect
1010d9f0 g     F .text	000000f4 .hidden __ltdf2
10111588 g       *ABS*	00000000 __DTOR_END__
10103cd8 g     F .text	00000014 puts
10110dc0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10109ea4 g     F .text	00000074 __fpclassifyd
101096c4 g     F .text	000000a4 __ratio
1010b564 g     F .text	0000001c __vfiprintf_internal
101102a4 g     F .text	0000021c altera_avalon_jtag_uart_read
10103bac g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10101b64 g     F .text	00000064 .hidden __udivsi3
1010f260 g     F .text	000000a4 isatty
101116f8 g     O .rodata	000000c8 __mprec_tens
1010849c g     F .text	0000000c __locale_charset
10111164 g     F .text	00000090 alt_icache_flush
10114f00 g     O .bss	00000004 __malloc_top_pad
101133d0 g     O .rwdata	00000004 __mb_cur_max
101084cc g     F .text	0000000c _localeconv_r
10108cf0 g     F .text	0000003c __i2b
10107f10 g     F .text	000004bc __sfvwrite_r
10103edc g     F .text	00000054 _sbrk_r
101098e0 g     F .text	00000060 _read_r
101133e8 g     O .rwdata	00000004 alt_max_fd
10101c20 g     F .text	000000f0 _fclose_r
10101f9c g     F .text	00000030 fflush
10114efc g     O .bss	00000004 __malloc_max_sbrked_mem
101010ec g     F .text	00000980 LCD_init
1010c6f8 g     F .text	000008ac .hidden __adddf3
1010946c g     F .text	0000010c __b2d
1010c1c0 g     F .text	00000538 .hidden __umoddi3
1010f42c g     F .text	000000d4 lseek
101133c0 g     O .rwdata	00000004 _global_impure_ptr
10109940 g     F .text	00000564 _realloc_r
10115054 g       *ABS*	00000000 __bss_end
1010f134 g     F .text	000000f0 alt_iic_isr_register
10111038 g     F .text	00000108 alt_tick
1010bc48 g     F .text	00000578 .hidden __udivdi3
1010b864 g     F .text	00000024 _fputwc_r
101116d0 g     O .rodata	00000028 __mprec_bigtens
10108ad4 g     F .text	00000104 __s2b
1010ec54 g     F .text	000000a8 .hidden __floatunsidf
101091ac g     F .text	00000060 __mcmp
1010233c g     F .text	00000018 __fp_lock_all
1010f0e8 g     F .text	0000004c alt_ic_irq_enabled
10110f9c g     F .text	0000009c alt_alarm_stop
10114f10 g     O .bss	00000004 alt_irq_active
10102918 g     F .text	00000444 _fseeko_r
101000fc g     F .exceptions	000000d4 alt_irq_handler
101121b8 g     O .rwdata	00000028 alt_dev_null
10110968 g     F .text	00000048 alt_dcache_flush_all
10108bd8 g     F .text	00000068 __hi0bits
10114ef0 g     O .bss	00000004 iter
101004d0 g     F .text	00000160 load_image
1010eaf8 g     F .text	00000080 .hidden __fixdfsi
10113400 g       *ABS*	00000000 __ram_rwdata_end
101133e0 g     O .rwdata	00000008 alt_dev_list
1010fad0 g     F .text	000000f8 write
10111914 g       *ABS*	00000000 __ram_rodata_end
1010eed4 g     F .text	000000b0 fstat
101024a0 g     F .text	00000024 fprintf
10100f5c g     F .text	0000003c sleep_ms
1010089c g     F .text	0000002c i2c_inst
1010d9f0 g     F .text	000000f4 .hidden __ledf2
10108f24 g     F .text	00000140 __pow5mult
1010a108 g     F .text	0000145c ___vfiprintf_internal_r
10114f0c g     O .bss	00000004 __nlocale_changed
10101bc8 g     F .text	00000058 .hidden __umodsi3
10115054 g       *ABS*	00000000 end
10102d5c g     F .text	0000001c fseeko
101028fc g     F .text	0000001c fseek
1010fde0 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10111588 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010ecfc g     F .text	00000064 .hidden __clzsi2
101104c0 g     F .text	00000224 altera_avalon_jtag_uart_write
1010232c g     F .text	00000004 __sfp_lock_acquire
1010855c g     F .text	000000e4 memchr
10104104 g     F .text	000021f8 ___vfprintf_internal_r
101025e8 g     F .text	00000310 _free_r
101084a8 g     F .text	00000010 __locale_mb_cur_max
101113d4 g     F .text	00000180 __call_exitprocs
10114f08 g     O .bss	00000004 __mlocale_changed
101133c8 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10114f24 g     O .bss	00000004 _alt_tick_rate
10109064 g     F .text	00000148 __lshift
10114f28 g     O .bss	00000004 _alt_nticks
1010f854 g     F .text	000000fc read
1010fc34 g     F .text	00000048 alt_sys_init
10103b4c g     F .text	00000060 _open_r
1010092c g     F .text	00000080 i2c_configure
101112bc g     F .text	00000118 __register_exitproc
10108d2c g     F .text	000001f8 __multiply
1011014c g     F .text	00000068 altera_avalon_jtag_uart_close
10111914 g       *ABS*	00000000 __ram_rwdata_start
10111588 g       *ABS*	00000000 __ram_rodata_start
10114f2c g     O .bss	00000028 __malloc_current_mallinfo
10109578 g     F .text	0000014c __d2b
1010fc7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10110ce8 g     F .text	000000a4 alt_get_fd
10110810 g     F .text	00000158 alt_busy_sleep
10100f98 g     F .text	00000030 lcd_clear_irq
10106588 g     F .text	00000054 _close_r
10111240 g     F .text	0000007c memcmp
1010fd3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10115054 g       *ABS*	00000000 __alt_stack_base
1010fd8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102f5c g     F .text	000000cc _fwrite_r
10106434 g     F .text	00000154 __swsetup_r
1010cfa4 g     F .text	000008e8 .hidden __divdf3
101021ec g     F .text	00000118 __sfp
101097dc g     F .text	00000078 __copybits
10111d38 g     O .rwdata	00000408 __malloc_av_
10102338 g     F .text	00000004 __sinit_lock_release
1010dae4 g     F .text	00000718 .hidden __muldf3
10103f30 g     F .text	00000054 __sread
10110be0 g     F .text	00000108 alt_find_file
101109ec g     F .text	000000a4 alt_dev_llist_insert
10100290 g     F .text	00000088 trdb_d5m_write
1010f57c g     F .text	00000024 __malloc_lock
10102478 g     F .text	00000028 _fprintf_r
1010f9b4 g     F .text	000000b0 sbrk
10101f40 g     F .text	0000005c _fflush_r
1010b63c g     F .text	000000c4 _calloc_r
10100fc8 g     F .text	00000030 lcd_camera_ready
10102460 g     F .text	00000018 fopen
10114eec g       *ABS*	00000000 __bss_start
10103a24 g     F .text	00000128 memset
10100630 g     F .text	00000120 main
10114f1c g     O .bss	00000004 alt_envp
10114ef8 g     O .bss	00000004 __malloc_max_total_mem
1010fcdc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10100ad8 g     F .text	00000148 i2c_read
1010ba48 g     F .text	00000018 __swbuf
10104064 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10101d10 g     F .text	00000014 fclose
101067dc g     F .text	00001688 _dtoa_r
10103218 g     F .text	0000080c _malloc_r
1010bbbc g     F .text	00000030 __ascii_wctomb
101133ec g     O .rwdata	00000004 alt_errno
10102dd4 g     F .text	000000c4 _fwalk
10101a6c g     F .text	00000084 .hidden __divsi3
101024c4 g     F .text	00000124 _malloc_trim_r
101010bc g     F .text	00000030 init_launch_lcd
10111588 g       *ABS*	00000000 __CTOR_END__
10109f18 g     F .text	000000dc strcmp
10111588 g       *ABS*	00000000 __flash_rodata_start
10111588 g       *ABS*	00000000 __DTOR_LIST__
1010d88c g     F .text	00000088 .hidden __nedf2
1010fbfc g     F .text	00000038 alt_irq_init
1010f950 g     F .text	00000064 alt_release_fd
101117e0 g     O .rodata	00000100 .hidden __clz_tab
10114f04 g     O .bss	00000004 _PathLocale
1010108c g     F .text	00000030 start_lcd
101111f4 g     F .text	00000014 atexit
101063d4 g     F .text	00000060 _write_r
101084d8 g     F .text	00000018 setlocale
101133c4 g     O .rwdata	00000004 _impure_ptr
10114f14 g     O .bss	00000004 alt_argc
10101d24 g     F .text	0000021c __sflush_r
10110af0 g     F .text	00000060 _do_dtors
101084c4 g     F .text	00000008 __locale_cjk_lang
101028f8 g     F .text	00000004 _fseek_r
101008c8 g     F .text	00000064 i2c_init
10103d08 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
10109408 g     F .text	00000064 __ulp
10102354 g     F .text	00000018 __fp_unlock_all
101133d8 g     O .rwdata	00000008 alt_fs_list
10100020 g       *ABS*	00000000 __ram_exceptions_start
101084f0 g     F .text	0000000c localeconv
1010ef84 g     F .text	00000050 alt_ic_isr_register
10103028 g     F .text	00000034 fwrite
10113400 g       *ABS*	00000000 _edata
1010104c g     F .text	00000040 init_front_back_buffer_addr
10115054 g       *ABS*	00000000 _end
1010b700 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
101101b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10100318 g     F .text	000000a0 trdb_d5m_read
1010f05c g     F .text	0000008c alt_ic_irq_disable
10103f8c g     F .text	0000007c __swrite
101133cc g     O .rwdata	00000004 __malloc_trim_threshold
101084b8 g     F .text	0000000c __locale_msgcharset
10111208 g     F .text	00000038 exit
10102e98 g     F .text	000000c4 _fwalk_reent
1010920c g     F .text	000001fc __mdiff
10101af0 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10102330 g     F .text	00000004 __sfp_lock_release
101003b8 g     F .text	00000098 init_TRDB_D5M
1010236c g     F .text	000000f4 _fopen_r
10111554 g     F .text	00000034 _exit
101106e4 g     F .text	0000012c alt_alarm_start
10100ff8 g     F .text	00000054 set_frame_addr
1010305c g     F .text	000001bc __smakebuf_r
10100db4 g     F .text	000001a8 i2c_read_array
1010406c g     F .text	00000098 strlen
1010f6c4 g     F .text	00000154 open
1010d914 g     F .text	000000dc .hidden __gedf2
101133d4 g     O .rwdata	00000004 __wctomb
1010a0f0 g     F .text	00000018 __sprint_r
10110d8c g     F .text	00000034 alt_icache_flush_all
101133f0 g     O .rwdata	00000004 alt_priority_mask
1010efd4 g     F .text	00000088 alt_ic_irq_enable
101062fc g     F .text	0000001c __vfprintf_internal
1010bbec g     F .text	0000005c _wctomb_r
1010e1fc g     F .text	000008fc .hidden __subdf3
10108c40 g     F .text	000000b0 __lo0bits
101133f8 g     O .rwdata	00000008 alt_alarm_list
10110a90 g     F .text	00000060 _do_ctors
1010bafc g     F .text	000000c0 wcrtomb
1010ed9c g     F .text	000000d0 close
1010f36c g     F .text	00000084 alt_load
1010b888 g     F .text	00000080 fputwc
10102334 g     F .text	00000004 __sinit_lock_acquire
101089b4 g     F .text	00000120 __multadd
1010898c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	1093d504 	addi	r2,r2,20308
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	1093d504 	addi	r2,r2,20308
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a6d817 	ldw	r2,-25760(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a6d817 	ldw	r2,-25760(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6acf014 	ori	gp,gp,46016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	1093bb14 	ori	r2,r2,20204

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d41514 	ori	r3,r3,20564

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010f36c0 	call	1010f36c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010f5000 	call	1010f500 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <trdb_d5m_write>:
int currentFrame;
int iter;
/**
 * Taken from demo_i2c.c
 */
bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
10100290:	defff804 	addi	sp,sp,-32
10100294:	dfc00715 	stw	ra,28(sp)
10100298:	df000615 	stw	fp,24(sp)
1010029c:	df000604 	addi	fp,sp,24
101002a0:	e13ffd15 	stw	r4,-12(fp)
101002a4:	2807883a 	mov	r3,r5
101002a8:	3005883a 	mov	r2,r6
101002ac:	e0fffe05 	stb	r3,-8(fp)
101002b0:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
101002b4:	e0bfff0b 	ldhu	r2,-4(fp)
101002b8:	1004d23a 	srli	r2,r2,8
101002bc:	e0bffc05 	stb	r2,-16(fp)
101002c0:	e0bfff0b 	ldhu	r2,-4(fp)
101002c4:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
101002c8:	e0fffe03 	ldbu	r3,-8(fp)
101002cc:	e13ffc04 	addi	r4,fp,-16
101002d0:	00800084 	movi	r2,2
101002d4:	d8800015 	stw	r2,0(sp)
101002d8:	200f883a 	mov	r7,r4
101002dc:	180d883a 	mov	r6,r3
101002e0:	01402e84 	movi	r5,186
101002e4:	e13ffd17 	ldw	r4,-12(fp)
101002e8:	0100c200 	call	10100c20 <i2c_write_array>
101002ec:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
101002f0:	e0bffb17 	ldw	r2,-20(fp)
101002f4:	10000226 	beq	r2,zero,10100300 <trdb_d5m_write+0x70>
        return false;
101002f8:	0005883a 	mov	r2,zero
101002fc:	00000106 	br	10100304 <trdb_d5m_write+0x74>
    } else {
        return true;
10100300:	00800044 	movi	r2,1
    }
}
10100304:	e037883a 	mov	sp,fp
10100308:	dfc00117 	ldw	ra,4(sp)
1010030c:	df000017 	ldw	fp,0(sp)
10100310:	dec00204 	addi	sp,sp,8
10100314:	f800283a 	ret

10100318 <trdb_d5m_read>:

bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
10100318:	defff804 	addi	sp,sp,-32
1010031c:	dfc00715 	stw	ra,28(sp)
10100320:	df000615 	stw	fp,24(sp)
10100324:	df000604 	addi	fp,sp,24
10100328:	e13ffd15 	stw	r4,-12(fp)
1010032c:	2805883a 	mov	r2,r5
10100330:	e1bfff15 	stw	r6,-4(fp)
10100334:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
10100338:	e03ffc05 	stb	zero,-16(fp)
1010033c:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
10100340:	e0fffe03 	ldbu	r3,-8(fp)
10100344:	e13ffc04 	addi	r4,fp,-16
10100348:	00800084 	movi	r2,2
1010034c:	d8800015 	stw	r2,0(sp)
10100350:	200f883a 	mov	r7,r4
10100354:	180d883a 	mov	r6,r3
10100358:	01402e84 	movi	r5,186
1010035c:	e13ffd17 	ldw	r4,-12(fp)
10100360:	0100db40 	call	10100db4 <i2c_read_array>
10100364:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
10100368:	e0bffb17 	ldw	r2,-20(fp)
1010036c:	10000226 	beq	r2,zero,10100378 <trdb_d5m_read+0x60>
        return false;
10100370:	0005883a 	mov	r2,zero
10100374:	00000b06 	br	101003a4 <trdb_d5m_read+0x8c>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
10100378:	e0bffc03 	ldbu	r2,-16(fp)
1010037c:	10803fcc 	andi	r2,r2,255
10100380:	1004923a 	slli	r2,r2,8
10100384:	1007883a 	mov	r3,r2
10100388:	e0bffc43 	ldbu	r2,-15(fp)
1010038c:	10803fcc 	andi	r2,r2,255
10100390:	1885883a 	add	r2,r3,r2
10100394:	1007883a 	mov	r3,r2
10100398:	e0bfff17 	ldw	r2,-4(fp)
1010039c:	10c0000d 	sth	r3,0(r2)
        return true;
101003a0:	00800044 	movi	r2,1
    }
}
101003a4:	e037883a 	mov	sp,fp
101003a8:	dfc00117 	ldw	ra,4(sp)
101003ac:	df000017 	ldw	fp,0(sp)
101003b0:	dec00204 	addi	sp,sp,8
101003b4:	f800283a 	ret

101003b8 <init_TRDB_D5M>:


void init_TRDB_D5M() {
101003b8:	defffd04 	addi	sp,sp,-12
101003bc:	dfc00215 	stw	ra,8(sp)
101003c0:	df000115 	stw	fp,4(sp)
101003c4:	df000104 	addi	fp,sp,4
	i2c_dev i2c = I2C_INST(I2C_0);
101003c8:	01040034 	movhi	r4,4096
101003cc:	21020204 	addi	r4,r4,2056
101003d0:	010089c0 	call	1010089c <i2c_inst>
101003d4:	e0bfff15 	stw	r2,-4(fp)
	i2c_init(&i2c, CLK_FREQ);
101003d8:	0140bef4 	movhi	r5,763
101003dc:	297c2004 	addi	r5,r5,-3968
101003e0:	e13fff04 	addi	r4,fp,-4
101003e4:	01008c80 	call	101008c8 <i2c_init>

	// Set column and row size
	trdb_d5m_write(&i2c, ROW_SIZE_ADDR, 4*ROWS_CAM-1);
101003e8:	0181dfc4 	movi	r6,1919
101003ec:	014000c4 	movi	r5,3
101003f0:	e13fff04 	addi	r4,fp,-4
101003f4:	01002900 	call	10100290 <trdb_d5m_write>
	trdb_d5m_write(&i2c, COL_SIZE_ADDR, 4*COLUMNS_CAM-1);
101003f8:	01827fc4 	movi	r6,2559
101003fc:	01400104 	movi	r5,4
10100400:	e13fff04 	addi	r4,fp,-4
10100404:	01002900 	call	10100290 <trdb_d5m_write>

	// Divide pixclk by 1 -- xclkin is already divided by 8
	trdb_d5m_write(&i2c, DIV_CLK_ADDR, 0x0004);
10100408:	01800104 	movi	r6,4
1010040c:	01400284 	movi	r5,10
10100410:	e13fff04 	addi	r4,fp,-4
10100414:	01002900 	call	10100290 <trdb_d5m_write>

	// Set skip and binning
	trdb_d5m_write(&i2c, ROW_MODE_ADDR, 0x0033); // row skip 4x, row bin 4x
10100418:	01800cc4 	movi	r6,51
1010041c:	01400884 	movi	r5,34
10100420:	e13fff04 	addi	r4,fp,-4
10100424:	01002900 	call	10100290 <trdb_d5m_write>
	trdb_d5m_write(&i2c, COL_MODE_ADDR, 0x0033); // col skip 4x, col bin 4x
10100428:	01800cc4 	movi	r6,51
1010042c:	014008c4 	movi	r5,35
10100430:	e13fff04 	addi	r4,fp,-4
10100434:	01002900 	call	10100290 <trdb_d5m_write>
}
10100438:	0001883a 	nop
1010043c:	e037883a 	mov	sp,fp
10100440:	dfc00117 	ldw	ra,4(sp)
10100444:	df000017 	ldw	fp,0(sp)
10100448:	dec00204 	addi	sp,sp,8
1010044c:	f800283a 	ret

10100450 <CameraControllerISR>:

static void CameraControllerISR(void *unused){
10100450:	defffd04 	addi	sp,sp,-12
10100454:	dfc00215 	stw	ra,8(sp)
10100458:	df000115 	stw	fp,4(sp)
1010045c:	df000104 	addi	fp,sp,4
10100460:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(CAMERACONTROLLER_0_BASE, 4*CAMERA_CONTROLLER_RE_IRQ, 1);
10100464:	00c00044 	movi	r3,1
10100468:	00840034 	movhi	r2,4096
1010046c:	10820b04 	addi	r2,r2,2092
10100470:	10c00035 	stwio	r3,0(r2)
	//restart Camera Controller
	//load_image();
	lcd_camera_ready();
10100474:	0100fc80 	call	10100fc8 <lcd_camera_ready>
}
10100478:	0001883a 	nop
1010047c:	e037883a 	mov	sp,fp
10100480:	dfc00117 	ldw	ra,4(sp)
10100484:	df000017 	ldw	fp,0(sp)
10100488:	dec00204 	addi	sp,sp,8
1010048c:	f800283a 	ret

10100490 <LCDControllerISR>:
static void LCDControllerISR(void *unused){
10100490:	defffd04 	addi	sp,sp,-12
10100494:	dfc00215 	stw	ra,8(sp)
10100498:	df000115 	stw	fp,4(sp)
1010049c:	df000104 	addi	fp,sp,4
101004a0:	e13fff15 	stw	r4,-4(fp)
	lcd_clear_irq();
101004a4:	0100f980 	call	10100f98 <lcd_clear_irq>
	//restart Camera Controller
	IOWR_32DIRECT(CAMERACONTROLLER_0_BASE, 4*CAMERA_CONTROLLER_START, 1);
101004a8:	00c00044 	movi	r3,1
101004ac:	00840034 	movhi	r2,4096
101004b0:	10820a04 	addi	r2,r2,2088
101004b4:	10c00035 	stwio	r3,0(r2)
}
101004b8:	0001883a 	nop
101004bc:	e037883a 	mov	sp,fp
101004c0:	dfc00117 	ldw	ra,4(sp)
101004c4:	df000017 	ldw	fp,0(sp)
101004c8:	dec00204 	addi	sp,sp,8
101004cc:	f800283a 	ret

101004d0 <load_image>:
int load_image(uint32_t addr){
101004d0:	defff504 	addi	sp,sp,-44
101004d4:	dfc00a15 	stw	ra,40(sp)
101004d8:	df000915 	stw	fp,36(sp)
101004dc:	df000904 	addi	fp,sp,36
101004e0:	e13fff15 	stw	r4,-4(fp)
	//char* filename = "/mnt/host/image.ppm";
	char* filename = "/mnt/host/image.ppm";
101004e4:	00840474 	movhi	r2,4113
101004e8:	10856204 	addi	r2,r2,5512
101004ec:	e0bff915 	stw	r2,-28(fp)
	FILE *foutput = fopen(filename, "w");
101004f0:	01440474 	movhi	r5,4113
101004f4:	29456704 	addi	r5,r5,5532
101004f8:	e13ff917 	ldw	r4,-28(fp)
101004fc:	01024600 	call	10102460 <fopen>
10100500:	e0bffa15 	stw	r2,-24(fp)
	if (!foutput) {
10100504:	e0bffa17 	ldw	r2,-24(fp)
10100508:	1000061e 	bne	r2,zero,10100524 <load_image+0x54>
		printf("Error: could not open \"%s\" for writing\n", filename);
1010050c:	e17ff917 	ldw	r5,-28(fp)
10100510:	01040474 	movhi	r4,4113
10100514:	21056804 	addi	r4,r4,5536
10100518:	0103bdc0 	call	10103bdc <printf>
		return 1;
1010051c:	00800044 	movi	r2,1
10100520:	00003e06 	br	1010061c <load_image+0x14c>
	}
	//write: rgb byte format
	fprintf(foutput, "P3\n");
10100524:	e1fffa17 	ldw	r7,-24(fp)
10100528:	018000c4 	movi	r6,3
1010052c:	01400044 	movi	r5,1
10100530:	01040474 	movhi	r4,4113
10100534:	21057204 	addi	r4,r4,5576
10100538:	01030280 	call	10103028 <fwrite>
	//write: dimensions
	fprintf(foutput, "320 240\n");
1010053c:	e1fffa17 	ldw	r7,-24(fp)
10100540:	01800204 	movi	r6,8
10100544:	01400044 	movi	r5,1
10100548:	01040474 	movhi	r4,4113
1010054c:	21057304 	addi	r4,r4,5580
10100550:	01030280 	call	10103028 <fwrite>
	//write: largest possible value (6 bits)
	fprintf(foutput, "31\n");
10100554:	e1fffa17 	ldw	r7,-24(fp)
10100558:	018000c4 	movi	r6,3
1010055c:	01400044 	movi	r5,1
10100560:	01040474 	movhi	r4,4113
10100564:	21057604 	addi	r4,r4,5592
10100568:	01030280 	call	10103028 <fwrite>

	for(int i = 0; i < FRAME_SIZE; i++){
1010056c:	e03ff815 	stw	zero,-32(fp)
10100570:	00002306 	br	10100600 <load_image+0x130>
	 	uint16_t pixel = IORD_16DIRECT(addr, 2*i);
10100574:	e0bff817 	ldw	r2,-32(fp)
10100578:	1085883a 	add	r2,r2,r2
1010057c:	1007883a 	mov	r3,r2
10100580:	e0bfff17 	ldw	r2,-4(fp)
10100584:	1885883a 	add	r2,r3,r2
10100588:	1080002b 	ldhuio	r2,0(r2)
1010058c:	10bfffcc 	andi	r2,r2,65535
10100590:	e0bffb0d 	sth	r2,-20(fp)
	 	//REAL CAMERA INTERFACE
	 	int red = (int)((pixel & MASK_RED) >> OFF_RED);
10100594:	e0bffb0b 	ldhu	r2,-20(fp)
10100598:	1004d2fa 	srli	r2,r2,11
1010059c:	10bfffcc 	andi	r2,r2,65535
101005a0:	e0bffc15 	stw	r2,-16(fp)
	 	int green = (int)((pixel & MASK_GREEN) >> OFF_GREEN);
101005a4:	e0bffb0b 	ldhu	r2,-20(fp)
101005a8:	1081f80c 	andi	r2,r2,2016
101005ac:	1005d17a 	srai	r2,r2,5
101005b0:	e0bffd15 	stw	r2,-12(fp)
	 	int blue = (int)((pixel & MASK_BLUE) >> OFF_BLUE);
101005b4:	e0bffb0b 	ldhu	r2,-20(fp)
101005b8:	108007cc 	andi	r2,r2,31
101005bc:	e0bffe15 	stw	r2,-8(fp)
	 	green = green / 2;
101005c0:	e0bffd17 	ldw	r2,-12(fp)
101005c4:	1006d7fa 	srli	r3,r2,31
101005c8:	1885883a 	add	r2,r3,r2
101005cc:	1005d07a 	srai	r2,r2,1
101005d0:	e0bffd15 	stw	r2,-12(fp)
	 	fprintf(foutput, "%d %d %d\n", red, green, blue);
101005d4:	e0bffe17 	ldw	r2,-8(fp)
101005d8:	d8800015 	stw	r2,0(sp)
101005dc:	e1fffd17 	ldw	r7,-12(fp)
101005e0:	e1bffc17 	ldw	r6,-16(fp)
101005e4:	01440474 	movhi	r5,4113
101005e8:	29457704 	addi	r5,r5,5596
101005ec:	e13ffa17 	ldw	r4,-24(fp)
101005f0:	01024a00 	call	101024a0 <fprintf>
	//write: dimensions
	fprintf(foutput, "320 240\n");
	//write: largest possible value (6 bits)
	fprintf(foutput, "31\n");

	for(int i = 0; i < FRAME_SIZE; i++){
101005f4:	e0bff817 	ldw	r2,-32(fp)
101005f8:	10800044 	addi	r2,r2,1
101005fc:	e0bff815 	stw	r2,-32(fp)
10100600:	e0fff817 	ldw	r3,-32(fp)
10100604:	00800074 	movhi	r2,1
10100608:	108affc4 	addi	r2,r2,11263
1010060c:	10ffd90e 	bge	r2,r3,10100574 <__alt_data_end+0xfffe0574>
	 	//MOCK CAMERA INTERFACE
	 	//one pixel value is written per fifo entry, use that value for a gray-scale pixel
	 	//fprintf(foutput, "%d %d %d\n", pixel, pixel, pixel);
	 }
	//printf("Finished writing image\n");
	fclose(foutput);
10100610:	e13ffa17 	ldw	r4,-24(fp)
10100614:	0101d100 	call	10101d10 <fclose>
	return 0;
10100618:	0005883a 	mov	r2,zero
}
1010061c:	e037883a 	mov	sp,fp
10100620:	dfc00117 	ldw	ra,4(sp)
10100624:	df000017 	ldw	fp,0(sp)
10100628:	dec00204 	addi	sp,sp,8
1010062c:	f800283a 	ret

10100630 <main>:
int main()
{
10100630:	defffc04 	addi	sp,sp,-16
10100634:	dfc00315 	stw	ra,12(sp)
10100638:	df000215 	stw	fp,8(sp)
1010063c:	df000204 	addi	fp,sp,8
	iter = 0;
10100640:	d026cc15 	stw	zero,-25808(gp)
	currentFrame = 0;
10100644:	d026cb15 	stw	zero,-25812(gp)
	//Enable interrupts for camera controller
	//IOWR_ALTERA_AVALON_PIO_IRQ_MASK(CAMERACONTROLLER_0_BASE, 0xFF);
	//set up interrupt handlers
	usleep(1000*1000);
10100648:	010003f4 	movhi	r4,15
1010064c:	21109004 	addi	r4,r4,16960
10100650:	010fa640 	call	1010fa64 <usleep>
	int fail = alt_ic_isr_register(0,
10100654:	d8000015 	stw	zero,0(sp)
10100658:	000f883a 	mov	r7,zero
1010065c:	01840434 	movhi	r6,4112
10100660:	31811404 	addi	r6,r6,1104
10100664:	000b883a 	mov	r5,zero
10100668:	0009883a 	mov	r4,zero
1010066c:	010ef840 	call	1010ef84 <alt_ic_isr_register>
10100670:	e0bfff15 	stw	r2,-4(fp)
			0, CameraControllerISR, NULL, 0x0);
	if(fail)
10100674:	e0bfff17 	ldw	r2,-4(fp)
10100678:	10000226 	beq	r2,zero,10100684 <main+0x54>
		return 1;
1010067c:	00800044 	movi	r2,1
10100680:	00002e06 	br	1010073c <main+0x10c>
	alt_ic_irq_enable(0,0);
10100684:	000b883a 	mov	r5,zero
10100688:	0009883a 	mov	r4,zero
1010068c:	010efd40 	call	1010efd4 <alt_ic_irq_enable>
	fail = alt_ic_isr_register(0,
10100690:	d8000015 	stw	zero,0(sp)
10100694:	000f883a 	mov	r7,zero
10100698:	01840434 	movhi	r6,4112
1010069c:	31812404 	addi	r6,r6,1168
101006a0:	01400084 	movi	r5,2
101006a4:	0009883a 	mov	r4,zero
101006a8:	010ef840 	call	1010ef84 <alt_ic_isr_register>
101006ac:	e0bfff15 	stw	r2,-4(fp)
				2, LCDControllerISR, NULL, 0x0);
	if(fail)
101006b0:	e0bfff17 	ldw	r2,-4(fp)
101006b4:	10000226 	beq	r2,zero,101006c0 <main+0x90>
		return 1;
101006b8:	00800044 	movi	r2,1
101006bc:	00001f06 	br	1010073c <main+0x10c>
	alt_ic_irq_enable(0,0);
101006c0:	000b883a 	mov	r5,zero
101006c4:	0009883a 	mov	r4,zero
101006c8:	010efd40 	call	1010efd4 <alt_ic_irq_enable>

	init_TRDB_D5M();
101006cc:	01003b80 	call	101003b8 <init_TRDB_D5M>
	init_launch_lcd();
101006d0:	01010bc0 	call	101010bc <init_launch_lcd>
	usleep(1000*1000);
101006d4:	010003f4 	movhi	r4,15
101006d8:	21109004 	addi	r4,r4,16960
101006dc:	010fa640 	call	1010fa64 <usleep>
	start_lcd();
101006e0:	010108c0 	call	1010108c <start_lcd>

	printf("Hello from Nios II!\n");
101006e4:	01040474 	movhi	r4,4113
101006e8:	21057a04 	addi	r4,r4,5608
101006ec:	0103cd80 	call	10103cd8 <puts>
	IOWR_32DIRECT(CAMERACONTROLLER_0_BASE, 4*CAMERA_CONTROLLER_FRAME0, FRAME0);
101006f0:	0007883a 	mov	r3,zero
101006f4:	00840034 	movhi	r2,4096
101006f8:	10820804 	addi	r2,r2,2080
101006fc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERACONTROLLER_0_BASE, 4*CAMERA_CONTROLLER_FRAME1, FRAME1);
10100700:	00c00134 	movhi	r3,4
10100704:	00840034 	movhi	r2,4096
10100708:	10820904 	addi	r2,r2,2084
1010070c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERACONTROLLER_0_BASE, 4*CAMERA_CONTROLLER_START, 1);
10100710:	00c00044 	movi	r3,1
10100714:	00840034 	movhi	r2,4096
10100718:	10820a04 	addi	r2,r2,2088
1010071c:	10c00035 	stwio	r3,0(r2)
	usleep(100*1000);
10100720:	010000b4 	movhi	r4,2
10100724:	2121a804 	addi	r4,r4,-31072
10100728:	010fa640 	call	1010fa64 <usleep>
	printf("Finished loading image\n");
1010072c:	01040474 	movhi	r4,4113
10100730:	21057f04 	addi	r4,r4,5628
10100734:	0103cd80 	call	10103cd8 <puts>
	while(1);
10100738:	003fff06 	br	10100738 <__alt_data_end+0xfffe0738>
	return 0;
}
1010073c:	e037883a 	mov	sp,fp
10100740:	dfc00117 	ldw	ra,4(sp)
10100744:	df000017 	ldw	fp,0(sp)
10100748:	dec00204 	addi	sp,sp,8
1010074c:	f800283a 	ret

10100750 <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
10100750:	defffd04 	addi	sp,sp,-12
10100754:	dfc00215 	stw	ra,8(sp)
10100758:	df000115 	stw	fp,4(sp)
1010075c:	df000104 	addi	fp,sp,4
10100760:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
10100764:	e13fff17 	ldw	r4,-4(fp)
10100768:	010fa640 	call	1010fa64 <usleep>
#endif
}
1010076c:	0001883a 	nop
10100770:	e037883a 	mov	sp,fp
10100774:	dfc00117 	ldw	ra,4(sp)
10100778:	df000017 	ldw	fp,0(sp)
1010077c:	dec00204 	addi	sp,sp,8
10100780:	f800283a 	ret

10100784 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
10100784:	defffe04 	addi	sp,sp,-8
10100788:	df000115 	stw	fp,4(sp)
1010078c:	df000104 	addi	fp,sp,4
10100790:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
10100794:	0001883a 	nop
10100798:	e0bfff17 	ldw	r2,-4(fp)
1010079c:	10800017 	ldw	r2,0(r2)
101007a0:	10800084 	addi	r2,r2,2
101007a4:	10800023 	ldbuio	r2,0(r2)
101007a8:	10803fcc 	andi	r2,r2,255
101007ac:	1080020c 	andi	r2,r2,8
101007b0:	103ff91e 	bne	r2,zero,10100798 <__alt_data_end+0xfffe0798>
}
101007b4:	0001883a 	nop
101007b8:	e037883a 	mov	sp,fp
101007bc:	df000017 	ldw	fp,0(sp)
101007c0:	dec00104 	addi	sp,sp,4
101007c4:	f800283a 	ret

101007c8 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
101007c8:	defffb04 	addi	sp,sp,-20
101007cc:	dfc00415 	stw	ra,16(sp)
101007d0:	df000315 	stw	fp,12(sp)
101007d4:	df000304 	addi	fp,sp,12
101007d8:	e13ffd15 	stw	r4,-12(fp)
101007dc:	2807883a 	mov	r3,r5
101007e0:	3005883a 	mov	r2,r6
101007e4:	e0fffe05 	stb	r3,-8(fp)
101007e8:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
101007ec:	e13ffd17 	ldw	r4,-12(fp)
101007f0:	01007840 	call	10100784 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
101007f4:	e0bffd17 	ldw	r2,-12(fp)
101007f8:	10800017 	ldw	r2,0(r2)
101007fc:	e0fffe03 	ldbu	r3,-8(fp)
10100800:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10100804:	e0bffd17 	ldw	r2,-12(fp)
10100808:	10800017 	ldw	r2,0(r2)
1010080c:	10800044 	addi	r2,r2,1
10100810:	e0ffff03 	ldbu	r3,-4(fp)
10100814:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10100818:	e13ffd17 	ldw	r4,-12(fp)
1010081c:	01007840 	call	10100784 <wait_end_of_transfer>
}
10100820:	0001883a 	nop
10100824:	e037883a 	mov	sp,fp
10100828:	dfc00117 	ldw	ra,4(sp)
1010082c:	df000017 	ldw	fp,0(sp)
10100830:	dec00204 	addi	sp,sp,8
10100834:	f800283a 	ret

10100838 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10100838:	defffc04 	addi	sp,sp,-16
1010083c:	dfc00315 	stw	ra,12(sp)
10100840:	df000215 	stw	fp,8(sp)
10100844:	df000204 	addi	fp,sp,8
10100848:	e13ffe15 	stw	r4,-8(fp)
1010084c:	2805883a 	mov	r2,r5
10100850:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10100854:	e13ffe17 	ldw	r4,-8(fp)
10100858:	01007840 	call	10100784 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
1010085c:	e0bffe17 	ldw	r2,-8(fp)
10100860:	10800017 	ldw	r2,0(r2)
10100864:	10800044 	addi	r2,r2,1
10100868:	e0ffff03 	ldbu	r3,-4(fp)
1010086c:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10100870:	e13ffe17 	ldw	r4,-8(fp)
10100874:	01007840 	call	10100784 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
10100878:	e0bffe17 	ldw	r2,-8(fp)
1010087c:	10800017 	ldw	r2,0(r2)
10100880:	10800023 	ldbuio	r2,0(r2)
10100884:	10803fcc 	andi	r2,r2,255
}
10100888:	e037883a 	mov	sp,fp
1010088c:	dfc00117 	ldw	ra,4(sp)
10100890:	df000017 	ldw	fp,0(sp)
10100894:	dec00204 	addi	sp,sp,8
10100898:	f800283a 	ret

1010089c <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
1010089c:	defffd04 	addi	sp,sp,-12
101008a0:	df000215 	stw	fp,8(sp)
101008a4:	df000204 	addi	fp,sp,8
101008a8:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
101008ac:	e0bfff17 	ldw	r2,-4(fp)
101008b0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
101008b4:	e0bffe17 	ldw	r2,-8(fp)
}
101008b8:	e037883a 	mov	sp,fp
101008bc:	df000017 	ldw	fp,0(sp)
101008c0:	dec00104 	addi	sp,sp,4
101008c4:	f800283a 	ret

101008c8 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
101008c8:	defffb04 	addi	sp,sp,-20
101008cc:	dfc00415 	stw	ra,16(sp)
101008d0:	df000315 	stw	fp,12(sp)
101008d4:	dc000215 	stw	r16,8(sp)
101008d8:	df000304 	addi	fp,sp,12
101008dc:	e13ffd15 	stw	r4,-12(fp)
101008e0:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
101008e4:	e0bffd17 	ldw	r2,-12(fp)
101008e8:	10800017 	ldw	r2,0(r2)
101008ec:	140000c4 	addi	r16,r2,3
101008f0:	e0bffe17 	ldw	r2,-8(fp)
101008f4:	014001b4 	movhi	r5,6
101008f8:	2946a004 	addi	r5,r5,6784
101008fc:	1009883a 	mov	r4,r2
10100900:	0101b640 	call	10101b64 <__udivsi3>
10100904:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10100908:	0104e204 	movi	r4,5000
1010090c:	01007500 	call	10100750 <i2c_usleep>
}
10100910:	0001883a 	nop
10100914:	e6ffff04 	addi	sp,fp,-4
10100918:	dfc00217 	ldw	ra,8(sp)
1010091c:	df000117 	ldw	fp,4(sp)
10100920:	dc000017 	ldw	r16,0(sp)
10100924:	dec00304 	addi	sp,sp,12
10100928:	f800283a 	ret

1010092c <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
1010092c:	defffc04 	addi	sp,sp,-16
10100930:	df000315 	stw	fp,12(sp)
10100934:	df000304 	addi	fp,sp,12
10100938:	e13ffe15 	stw	r4,-8(fp)
1010093c:	2805883a 	mov	r2,r5
10100940:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
10100944:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10100948:	e0bfff03 	ldbu	r2,-4(fp)
1010094c:	10000426 	beq	r2,zero,10100960 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10100950:	e0bffd17 	ldw	r2,-12(fp)
10100954:	10800814 	ori	r2,r2,32
10100958:	e0bffd15 	stw	r2,-12(fp)
1010095c:	00000406 	br	10100970 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10100960:	e0fffd17 	ldw	r3,-12(fp)
10100964:	00bff7c4 	movi	r2,-33
10100968:	1884703a 	and	r2,r3,r2
1010096c:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100970:	e0bffe17 	ldw	r2,-8(fp)
10100974:	10800017 	ldw	r2,0(r2)
10100978:	10800044 	addi	r2,r2,1
1010097c:	00c00084 	movi	r3,2
10100980:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
10100984:	e0bffe17 	ldw	r2,-8(fp)
10100988:	10800017 	ldw	r2,0(r2)
1010098c:	10800044 	addi	r2,r2,1
10100990:	e0fffd17 	ldw	r3,-12(fp)
10100994:	10c00025 	stbio	r3,0(r2)
}
10100998:	0001883a 	nop
1010099c:	e037883a 	mov	sp,fp
101009a0:	df000017 	ldw	fp,0(sp)
101009a4:	dec00104 	addi	sp,sp,4
101009a8:	f800283a 	ret

101009ac <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
101009ac:	defffa04 	addi	sp,sp,-24
101009b0:	dfc00515 	stw	ra,20(sp)
101009b4:	df000415 	stw	fp,16(sp)
101009b8:	df000404 	addi	fp,sp,16
101009bc:	e13ffc15 	stw	r4,-16(fp)
101009c0:	2809883a 	mov	r4,r5
101009c4:	3007883a 	mov	r3,r6
101009c8:	3805883a 	mov	r2,r7
101009cc:	e13ffd05 	stb	r4,-12(fp)
101009d0:	e0fffe05 	stb	r3,-8(fp)
101009d4:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101009d8:	e0bffd03 	ldbu	r2,-12(fp)
101009dc:	10803f8c 	andi	r2,r2,254
101009e0:	01800504 	movi	r6,20
101009e4:	100b883a 	mov	r5,r2
101009e8:	e13ffc17 	ldw	r4,-16(fp)
101009ec:	01007c80 	call	101007c8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101009f0:	e0bffc17 	ldw	r2,-16(fp)
101009f4:	10800017 	ldw	r2,0(r2)
101009f8:	10800084 	addi	r2,r2,2
101009fc:	10800023 	ldbuio	r2,0(r2)
10100a00:	10803fcc 	andi	r2,r2,255
10100a04:	1080004c 	andi	r2,r2,1
10100a08:	10000726 	beq	r2,zero,10100a28 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100a0c:	e0bffc17 	ldw	r2,-16(fp)
10100a10:	10800017 	ldw	r2,0(r2)
10100a14:	10800044 	addi	r2,r2,1
10100a18:	00c00084 	movi	r3,2
10100a1c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100a20:	00800044 	movi	r2,1
10100a24:	00002706 	br	10100ac4 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10100a28:	e0bffe03 	ldbu	r2,-8(fp)
10100a2c:	01800404 	movi	r6,16
10100a30:	100b883a 	mov	r5,r2
10100a34:	e13ffc17 	ldw	r4,-16(fp)
10100a38:	01007c80 	call	101007c8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100a3c:	e0bffc17 	ldw	r2,-16(fp)
10100a40:	10800017 	ldw	r2,0(r2)
10100a44:	10800084 	addi	r2,r2,2
10100a48:	10800023 	ldbuio	r2,0(r2)
10100a4c:	10803fcc 	andi	r2,r2,255
10100a50:	1080004c 	andi	r2,r2,1
10100a54:	10000726 	beq	r2,zero,10100a74 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100a58:	e0bffc17 	ldw	r2,-16(fp)
10100a5c:	10800017 	ldw	r2,0(r2)
10100a60:	10800044 	addi	r2,r2,1
10100a64:	00c00084 	movi	r3,2
10100a68:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10100a6c:	00800084 	movi	r2,2
10100a70:	00001406 	br	10100ac4 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100a74:	e0bfff03 	ldbu	r2,-4(fp)
10100a78:	01800484 	movi	r6,18
10100a7c:	100b883a 	mov	r5,r2
10100a80:	e13ffc17 	ldw	r4,-16(fp)
10100a84:	01007c80 	call	101007c8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100a88:	e0bffc17 	ldw	r2,-16(fp)
10100a8c:	10800017 	ldw	r2,0(r2)
10100a90:	10800084 	addi	r2,r2,2
10100a94:	10800023 	ldbuio	r2,0(r2)
10100a98:	10803fcc 	andi	r2,r2,255
10100a9c:	1080004c 	andi	r2,r2,1
10100aa0:	10000726 	beq	r2,zero,10100ac0 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100aa4:	e0bffc17 	ldw	r2,-16(fp)
10100aa8:	10800017 	ldw	r2,0(r2)
10100aac:	10800044 	addi	r2,r2,1
10100ab0:	00c00084 	movi	r3,2
10100ab4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10100ab8:	00800084 	movi	r2,2
10100abc:	00000106 	br	10100ac4 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
10100ac0:	0005883a 	mov	r2,zero
}
10100ac4:	e037883a 	mov	sp,fp
10100ac8:	dfc00117 	ldw	ra,4(sp)
10100acc:	df000017 	ldw	fp,0(sp)
10100ad0:	dec00204 	addi	sp,sp,8
10100ad4:	f800283a 	ret

10100ad8 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
10100ad8:	defffa04 	addi	sp,sp,-24
10100adc:	dfc00515 	stw	ra,20(sp)
10100ae0:	df000415 	stw	fp,16(sp)
10100ae4:	df000404 	addi	fp,sp,16
10100ae8:	e13ffc15 	stw	r4,-16(fp)
10100aec:	2807883a 	mov	r3,r5
10100af0:	3005883a 	mov	r2,r6
10100af4:	e1ffff15 	stw	r7,-4(fp)
10100af8:	e0fffd05 	stb	r3,-12(fp)
10100afc:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100b00:	e0bffd03 	ldbu	r2,-12(fp)
10100b04:	10803f8c 	andi	r2,r2,254
10100b08:	01800504 	movi	r6,20
10100b0c:	100b883a 	mov	r5,r2
10100b10:	e13ffc17 	ldw	r4,-16(fp)
10100b14:	01007c80 	call	101007c8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100b18:	e0bffc17 	ldw	r2,-16(fp)
10100b1c:	10800017 	ldw	r2,0(r2)
10100b20:	10800084 	addi	r2,r2,2
10100b24:	10800023 	ldbuio	r2,0(r2)
10100b28:	10803fcc 	andi	r2,r2,255
10100b2c:	1080004c 	andi	r2,r2,1
10100b30:	10000726 	beq	r2,zero,10100b50 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100b34:	e0bffc17 	ldw	r2,-16(fp)
10100b38:	10800017 	ldw	r2,0(r2)
10100b3c:	10800044 	addi	r2,r2,1
10100b40:	00c00084 	movi	r3,2
10100b44:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100b48:	00800044 	movi	r2,1
10100b4c:	00002f06 	br	10100c0c <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10100b50:	e0bffe03 	ldbu	r2,-8(fp)
10100b54:	01800404 	movi	r6,16
10100b58:	100b883a 	mov	r5,r2
10100b5c:	e13ffc17 	ldw	r4,-16(fp)
10100b60:	01007c80 	call	101007c8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100b64:	e0bffc17 	ldw	r2,-16(fp)
10100b68:	10800017 	ldw	r2,0(r2)
10100b6c:	10800084 	addi	r2,r2,2
10100b70:	10800023 	ldbuio	r2,0(r2)
10100b74:	10803fcc 	andi	r2,r2,255
10100b78:	1080004c 	andi	r2,r2,1
10100b7c:	10000726 	beq	r2,zero,10100b9c <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100b80:	e0bffc17 	ldw	r2,-16(fp)
10100b84:	10800017 	ldw	r2,0(r2)
10100b88:	10800044 	addi	r2,r2,1
10100b8c:	00c00084 	movi	r3,2
10100b90:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10100b94:	00800084 	movi	r2,2
10100b98:	00001c06 	br	10100c0c <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100b9c:	e0bffd03 	ldbu	r2,-12(fp)
10100ba0:	10800054 	ori	r2,r2,1
10100ba4:	10803fcc 	andi	r2,r2,255
10100ba8:	01800504 	movi	r6,20
10100bac:	100b883a 	mov	r5,r2
10100bb0:	e13ffc17 	ldw	r4,-16(fp)
10100bb4:	01007c80 	call	101007c8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100bb8:	e0bffc17 	ldw	r2,-16(fp)
10100bbc:	10800017 	ldw	r2,0(r2)
10100bc0:	10800084 	addi	r2,r2,2
10100bc4:	10800023 	ldbuio	r2,0(r2)
10100bc8:	10803fcc 	andi	r2,r2,255
10100bcc:	1080004c 	andi	r2,r2,1
10100bd0:	10000726 	beq	r2,zero,10100bf0 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100bd4:	e0bffc17 	ldw	r2,-16(fp)
10100bd8:	10800017 	ldw	r2,0(r2)
10100bdc:	10800044 	addi	r2,r2,1
10100be0:	00c00084 	movi	r3,2
10100be4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100be8:	00800044 	movi	r2,1
10100bec:	00000706 	br	10100c0c <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10100bf0:	014002c4 	movi	r5,11
10100bf4:	e13ffc17 	ldw	r4,-16(fp)
10100bf8:	01008380 	call	10100838 <get_data_set_control>
10100bfc:	1007883a 	mov	r3,r2
10100c00:	e0bfff17 	ldw	r2,-4(fp)
10100c04:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10100c08:	0005883a 	mov	r2,zero
}
10100c0c:	e037883a 	mov	sp,fp
10100c10:	dfc00117 	ldw	ra,4(sp)
10100c14:	df000017 	ldw	fp,0(sp)
10100c18:	dec00204 	addi	sp,sp,8
10100c1c:	f800283a 	ret

10100c20 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10100c20:	defff904 	addi	sp,sp,-28
10100c24:	dfc00615 	stw	ra,24(sp)
10100c28:	df000515 	stw	fp,20(sp)
10100c2c:	df000504 	addi	fp,sp,20
10100c30:	e13ffc15 	stw	r4,-16(fp)
10100c34:	2807883a 	mov	r3,r5
10100c38:	3005883a 	mov	r2,r6
10100c3c:	e1ffff15 	stw	r7,-4(fp)
10100c40:	e0fffd05 	stb	r3,-12(fp)
10100c44:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100c48:	e0bffd03 	ldbu	r2,-12(fp)
10100c4c:	10803f8c 	andi	r2,r2,254
10100c50:	01800504 	movi	r6,20
10100c54:	100b883a 	mov	r5,r2
10100c58:	e13ffc17 	ldw	r4,-16(fp)
10100c5c:	01007c80 	call	101007c8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100c60:	e0bffc17 	ldw	r2,-16(fp)
10100c64:	10800017 	ldw	r2,0(r2)
10100c68:	10800084 	addi	r2,r2,2
10100c6c:	10800023 	ldbuio	r2,0(r2)
10100c70:	10803fcc 	andi	r2,r2,255
10100c74:	1080004c 	andi	r2,r2,1
10100c78:	10000726 	beq	r2,zero,10100c98 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100c7c:	e0bffc17 	ldw	r2,-16(fp)
10100c80:	10800017 	ldw	r2,0(r2)
10100c84:	10800044 	addi	r2,r2,1
10100c88:	00c00084 	movi	r3,2
10100c8c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100c90:	00800044 	movi	r2,1
10100c94:	00004206 	br	10100da0 <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10100c98:	e0bffe03 	ldbu	r2,-8(fp)
10100c9c:	01800404 	movi	r6,16
10100ca0:	100b883a 	mov	r5,r2
10100ca4:	e13ffc17 	ldw	r4,-16(fp)
10100ca8:	01007c80 	call	101007c8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100cac:	e0bffc17 	ldw	r2,-16(fp)
10100cb0:	10800017 	ldw	r2,0(r2)
10100cb4:	10800084 	addi	r2,r2,2
10100cb8:	10800023 	ldbuio	r2,0(r2)
10100cbc:	10803fcc 	andi	r2,r2,255
10100cc0:	1080004c 	andi	r2,r2,1
10100cc4:	10000726 	beq	r2,zero,10100ce4 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100cc8:	e0bffc17 	ldw	r2,-16(fp)
10100ccc:	10800017 	ldw	r2,0(r2)
10100cd0:	10800044 	addi	r2,r2,1
10100cd4:	00c00084 	movi	r3,2
10100cd8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10100cdc:	00800084 	movi	r2,2
10100ce0:	00002f06 	br	10100da0 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
10100ce4:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
10100ce8:	e03ffb15 	stw	zero,-20(fp)
10100cec:	00002806 	br	10100d90 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
10100cf0:	e0800217 	ldw	r2,8(fp)
10100cf4:	10bfffc4 	addi	r2,r2,-1
10100cf8:	e0fffb17 	ldw	r3,-20(fp)
10100cfc:	18800a2e 	bgeu	r3,r2,10100d28 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
10100d00:	e0ffff17 	ldw	r3,-4(fp)
10100d04:	e0bffb17 	ldw	r2,-20(fp)
10100d08:	1885883a 	add	r2,r3,r2
10100d0c:	10800003 	ldbu	r2,0(r2)
10100d10:	10803fcc 	andi	r2,r2,255
10100d14:	01800404 	movi	r6,16
10100d18:	100b883a 	mov	r5,r2
10100d1c:	e13ffc17 	ldw	r4,-16(fp)
10100d20:	01007c80 	call	101007c8 <set_data_control>
10100d24:	00000906 	br	10100d4c <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100d28:	e0ffff17 	ldw	r3,-4(fp)
10100d2c:	e0bffb17 	ldw	r2,-20(fp)
10100d30:	1885883a 	add	r2,r3,r2
10100d34:	10800003 	ldbu	r2,0(r2)
10100d38:	10803fcc 	andi	r2,r2,255
10100d3c:	01800484 	movi	r6,18
10100d40:	100b883a 	mov	r5,r2
10100d44:	e13ffc17 	ldw	r4,-16(fp)
10100d48:	01007c80 	call	101007c8 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100d4c:	e0bffc17 	ldw	r2,-16(fp)
10100d50:	10800017 	ldw	r2,0(r2)
10100d54:	10800084 	addi	r2,r2,2
10100d58:	10800023 	ldbuio	r2,0(r2)
10100d5c:	10803fcc 	andi	r2,r2,255
10100d60:	1080004c 	andi	r2,r2,1
10100d64:	10000726 	beq	r2,zero,10100d84 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100d68:	e0bffc17 	ldw	r2,-16(fp)
10100d6c:	10800017 	ldw	r2,0(r2)
10100d70:	10800044 	addi	r2,r2,1
10100d74:	00c00084 	movi	r3,2
10100d78:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
10100d7c:	00800084 	movi	r2,2
10100d80:	00000706 	br	10100da0 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10100d84:	e0bffb17 	ldw	r2,-20(fp)
10100d88:	10800044 	addi	r2,r2,1
10100d8c:	e0bffb15 	stw	r2,-20(fp)
10100d90:	e0fffb17 	ldw	r3,-20(fp)
10100d94:	e0800217 	ldw	r2,8(fp)
10100d98:	18bfd536 	bltu	r3,r2,10100cf0 <__alt_data_end+0xfffe0cf0>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
10100d9c:	0005883a 	mov	r2,zero
}
10100da0:	e037883a 	mov	sp,fp
10100da4:	dfc00117 	ldw	ra,4(sp)
10100da8:	df000017 	ldw	fp,0(sp)
10100dac:	dec00204 	addi	sp,sp,8
10100db0:	f800283a 	ret

10100db4 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10100db4:	defff804 	addi	sp,sp,-32
10100db8:	dfc00715 	stw	ra,28(sp)
10100dbc:	df000615 	stw	fp,24(sp)
10100dc0:	dc000515 	stw	r16,20(sp)
10100dc4:	df000604 	addi	fp,sp,24
10100dc8:	e13ffb15 	stw	r4,-20(fp)
10100dcc:	2807883a 	mov	r3,r5
10100dd0:	3005883a 	mov	r2,r6
10100dd4:	e1fffe15 	stw	r7,-8(fp)
10100dd8:	e0fffc05 	stb	r3,-16(fp)
10100ddc:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100de0:	e0bffc03 	ldbu	r2,-16(fp)
10100de4:	10803f8c 	andi	r2,r2,254
10100de8:	01800504 	movi	r6,20
10100dec:	100b883a 	mov	r5,r2
10100df0:	e13ffb17 	ldw	r4,-20(fp)
10100df4:	01007c80 	call	101007c8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100df8:	e0bffb17 	ldw	r2,-20(fp)
10100dfc:	10800017 	ldw	r2,0(r2)
10100e00:	10800084 	addi	r2,r2,2
10100e04:	10800023 	ldbuio	r2,0(r2)
10100e08:	10803fcc 	andi	r2,r2,255
10100e0c:	1080004c 	andi	r2,r2,1
10100e10:	10000726 	beq	r2,zero,10100e30 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100e14:	e0bffb17 	ldw	r2,-20(fp)
10100e18:	10800017 	ldw	r2,0(r2)
10100e1c:	10800044 	addi	r2,r2,1
10100e20:	00c00084 	movi	r3,2
10100e24:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100e28:	00800044 	movi	r2,1
10100e2c:	00004506 	br	10100f44 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10100e30:	e0bffd03 	ldbu	r2,-12(fp)
10100e34:	01800404 	movi	r6,16
10100e38:	100b883a 	mov	r5,r2
10100e3c:	e13ffb17 	ldw	r4,-20(fp)
10100e40:	01007c80 	call	101007c8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100e44:	e0bffb17 	ldw	r2,-20(fp)
10100e48:	10800017 	ldw	r2,0(r2)
10100e4c:	10800084 	addi	r2,r2,2
10100e50:	10800023 	ldbuio	r2,0(r2)
10100e54:	10803fcc 	andi	r2,r2,255
10100e58:	1080004c 	andi	r2,r2,1
10100e5c:	10000726 	beq	r2,zero,10100e7c <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100e60:	e0bffb17 	ldw	r2,-20(fp)
10100e64:	10800017 	ldw	r2,0(r2)
10100e68:	10800044 	addi	r2,r2,1
10100e6c:	00c00084 	movi	r3,2
10100e70:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10100e74:	00800084 	movi	r2,2
10100e78:	00003206 	br	10100f44 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100e7c:	e0bffc03 	ldbu	r2,-16(fp)
10100e80:	10800054 	ori	r2,r2,1
10100e84:	10803fcc 	andi	r2,r2,255
10100e88:	01800504 	movi	r6,20
10100e8c:	100b883a 	mov	r5,r2
10100e90:	e13ffb17 	ldw	r4,-20(fp)
10100e94:	01007c80 	call	101007c8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100e98:	e0bffb17 	ldw	r2,-20(fp)
10100e9c:	10800017 	ldw	r2,0(r2)
10100ea0:	10800084 	addi	r2,r2,2
10100ea4:	10800023 	ldbuio	r2,0(r2)
10100ea8:	10803fcc 	andi	r2,r2,255
10100eac:	1080004c 	andi	r2,r2,1
10100eb0:	10000726 	beq	r2,zero,10100ed0 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100eb4:	e0bffb17 	ldw	r2,-20(fp)
10100eb8:	10800017 	ldw	r2,0(r2)
10100ebc:	10800044 	addi	r2,r2,1
10100ec0:	00c00084 	movi	r3,2
10100ec4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100ec8:	00800044 	movi	r2,1
10100ecc:	00001d06 	br	10100f44 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
10100ed0:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10100ed4:	e03ffa15 	stw	zero,-24(fp)
10100ed8:	00001606 	br	10100f34 <i2c_read_array+0x180>
        if (i < size - 1) {
10100edc:	e0800217 	ldw	r2,8(fp)
10100ee0:	10bfffc4 	addi	r2,r2,-1
10100ee4:	e0fffa17 	ldw	r3,-24(fp)
10100ee8:	1880082e 	bgeu	r3,r2,10100f0c <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
10100eec:	e0fffe17 	ldw	r3,-8(fp)
10100ef0:	e0bffa17 	ldw	r2,-24(fp)
10100ef4:	18a1883a 	add	r16,r3,r2
10100ef8:	01400204 	movi	r5,8
10100efc:	e13ffb17 	ldw	r4,-20(fp)
10100f00:	01008380 	call	10100838 <get_data_set_control>
10100f04:	80800005 	stb	r2,0(r16)
10100f08:	00000706 	br	10100f28 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10100f0c:	e0fffe17 	ldw	r3,-8(fp)
10100f10:	e0bffa17 	ldw	r2,-24(fp)
10100f14:	18a1883a 	add	r16,r3,r2
10100f18:	014002c4 	movi	r5,11
10100f1c:	e13ffb17 	ldw	r4,-20(fp)
10100f20:	01008380 	call	10100838 <get_data_set_control>
10100f24:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10100f28:	e0bffa17 	ldw	r2,-24(fp)
10100f2c:	10800044 	addi	r2,r2,1
10100f30:	e0bffa15 	stw	r2,-24(fp)
10100f34:	e0fffa17 	ldw	r3,-24(fp)
10100f38:	e0800217 	ldw	r2,8(fp)
10100f3c:	18bfe736 	bltu	r3,r2,10100edc <__alt_data_end+0xfffe0edc>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
10100f40:	0005883a 	mov	r2,zero
}
10100f44:	e6ffff04 	addi	sp,fp,-4
10100f48:	dfc00217 	ldw	ra,8(sp)
10100f4c:	df000117 	ldw	fp,4(sp)
10100f50:	dc000017 	ldw	r16,0(sp)
10100f54:	dec00304 	addi	sp,sp,12
10100f58:	f800283a 	ret

10100f5c <sleep_ms>:
#include "io.h"
#include "system.h"
#include "lcd.h"


void sleep_ms(int time) {
10100f5c:	defffd04 	addi	sp,sp,-12
10100f60:	dfc00215 	stw	ra,8(sp)
10100f64:	df000115 	stw	fp,4(sp)
10100f68:	df000104 	addi	fp,sp,4
10100f6c:	e13fff15 	stw	r4,-4(fp)
    usleep(1000 * time);
10100f70:	e0bfff17 	ldw	r2,-4(fp)
10100f74:	1080fa24 	muli	r2,r2,1000
10100f78:	1009883a 	mov	r4,r2
10100f7c:	010fa640 	call	1010fa64 <usleep>
}
10100f80:	0001883a 	nop
10100f84:	e037883a 	mov	sp,fp
10100f88:	dfc00117 	ldw	ra,4(sp)
10100f8c:	df000017 	ldw	fp,0(sp)
10100f90:	dec00204 	addi	sp,sp,8
10100f94:	f800283a 	ret

10100f98 <lcd_clear_irq>:

void lcd_clear_irq(){
10100f98:	deffff04 	addi	sp,sp,-4
10100f9c:	df000015 	stw	fp,0(sp)
10100fa0:	d839883a 	mov	fp,sp
    SET_IRQ_PENDING_REG(0);
10100fa4:	0007883a 	mov	r3,zero
10100fa8:	00840034 	movhi	r2,4096
10100fac:	10821604 	addi	r2,r2,2136
10100fb0:	10c00035 	stwio	r3,0(r2)
}
10100fb4:	0001883a 	nop
10100fb8:	e037883a 	mov	sp,fp
10100fbc:	df000017 	ldw	fp,0(sp)
10100fc0:	dec00104 	addi	sp,sp,4
10100fc4:	f800283a 	ret

10100fc8 <lcd_camera_ready>:
void lcd_camera_ready(){
10100fc8:	deffff04 	addi	sp,sp,-4
10100fcc:	df000015 	stw	fp,0(sp)
10100fd0:	d839883a 	mov	fp,sp
    SET_CAMERA_READY_REG(0);
10100fd4:	0007883a 	mov	r3,zero
10100fd8:	00840034 	movhi	r2,4096
10100fdc:	10821504 	addi	r2,r2,2132
10100fe0:	10c00035 	stwio	r3,0(r2)
}
10100fe4:	0001883a 	nop
10100fe8:	e037883a 	mov	sp,fp
10100fec:	df000017 	ldw	fp,0(sp)
10100ff0:	dec00104 	addi	sp,sp,4
10100ff4:	f800283a 	ret

10100ff8 <set_frame_addr>:

void set_frame_addr(uint32_t addr, int front){
10100ff8:	defffd04 	addi	sp,sp,-12
10100ffc:	df000215 	stw	fp,8(sp)
10101000:	df000204 	addi	fp,sp,8
10101004:	e13ffe15 	stw	r4,-8(fp)
10101008:	e17fff15 	stw	r5,-4(fp)
    if (front) {
1010100c:	e0bfff17 	ldw	r2,-4(fp)
10101010:	10000526 	beq	r2,zero,10101028 <set_frame_addr+0x30>
        SET_FRONT_FRAME_ADDR(addr);
10101014:	e0fffe17 	ldw	r3,-8(fp)
10101018:	00840034 	movhi	r2,4096
1010101c:	10821004 	addi	r2,r2,2112
10101020:	10c00035 	stwio	r3,0(r2)
    } else {
        SET_BACK_FRAME_ADDR(addr);
    }
}
10101024:	00000406 	br	10101038 <set_frame_addr+0x40>

void set_frame_addr(uint32_t addr, int front){
    if (front) {
        SET_FRONT_FRAME_ADDR(addr);
    } else {
        SET_BACK_FRAME_ADDR(addr);
10101028:	e0fffe17 	ldw	r3,-8(fp)
1010102c:	00840034 	movhi	r2,4096
10101030:	10821104 	addi	r2,r2,2116
10101034:	10c00035 	stwio	r3,0(r2)
    }
}
10101038:	0001883a 	nop
1010103c:	e037883a 	mov	sp,fp
10101040:	df000017 	ldw	fp,0(sp)
10101044:	dec00104 	addi	sp,sp,4
10101048:	f800283a 	ret

1010104c <init_front_back_buffer_addr>:
void init_front_back_buffer_addr(){
1010104c:	deffff04 	addi	sp,sp,-4
10101050:	df000015 	stw	fp,0(sp)
10101054:	d839883a 	mov	fp,sp
    SET_FRONT_FRAME_ADDR(HPS_0_FRONT_FRAME_BASE);
10101058:	0007883a 	mov	r3,zero
1010105c:	00840034 	movhi	r2,4096
10101060:	10821004 	addi	r2,r2,2112
10101064:	10c00035 	stwio	r3,0(r2)
    SET_BACK_FRAME_ADDR(HPS_0_BACK_FRAME_BASE);
10101068:	00c00134 	movhi	r3,4
1010106c:	00840034 	movhi	r2,4096
10101070:	10821104 	addi	r2,r2,2116
10101074:	10c00035 	stwio	r3,0(r2)
}
10101078:	0001883a 	nop
1010107c:	e037883a 	mov	sp,fp
10101080:	df000017 	ldw	fp,0(sp)
10101084:	dec00104 	addi	sp,sp,4
10101088:	f800283a 	ret

1010108c <start_lcd>:
void start_lcd(){
1010108c:	deffff04 	addi	sp,sp,-4
10101090:	df000015 	stw	fp,0(sp)
10101094:	d839883a 	mov	fp,sp
    SET_LCD_START_REG(1);
10101098:	00c00044 	movi	r3,1
1010109c:	00840034 	movhi	r2,4096
101010a0:	10821204 	addi	r2,r2,2120
101010a4:	10c00035 	stwio	r3,0(r2)
}
101010a8:	0001883a 	nop
101010ac:	e037883a 	mov	sp,fp
101010b0:	df000017 	ldw	fp,0(sp)
101010b4:	dec00104 	addi	sp,sp,4
101010b8:	f800283a 	ret

101010bc <init_launch_lcd>:

void init_launch_lcd(){
101010bc:	defffe04 	addi	sp,sp,-8
101010c0:	dfc00115 	stw	ra,4(sp)
101010c4:	df000015 	stw	fp,0(sp)
101010c8:	d839883a 	mov	fp,sp
    init_front_back_buffer_addr();
101010cc:	010104c0 	call	1010104c <init_front_back_buffer_addr>
    LCD_init();
101010d0:	01010ec0 	call	101010ec <LCD_init>

}
101010d4:	0001883a 	nop
101010d8:	e037883a 	mov	sp,fp
101010dc:	dfc00117 	ldw	ra,4(sp)
101010e0:	df000017 	ldw	fp,0(sp)
101010e4:	dec00204 	addi	sp,sp,8
101010e8:	f800283a 	ret

101010ec <LCD_init>:

void LCD_init(){
101010ec:	defffe04 	addi	sp,sp,-8
101010f0:	dfc00115 	stw	ra,4(sp)
101010f4:	df000015 	stw	fp,0(sp)
101010f8:	d839883a 	mov	fp,sp

    sleep_ms(131);
101010fc:	010020c4 	movi	r4,131
10101100:	0100f5c0 	call	10100f5c <sleep_ms>

    SET_WRITING_CMD_REG(1);
10101104:	00c00044 	movi	r3,1
10101108:	00840034 	movhi	r2,4096
1010110c:	10821404 	addi	r2,r2,2128
10101110:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x0011); //Exit Sleep
10101114:	00c00444 	movi	r3,17
10101118:	00840034 	movhi	r2,4096
1010111c:	10821304 	addi	r2,r2,2124
10101120:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101124:	0007883a 	mov	r3,zero
10101128:	00840034 	movhi	r2,4096
1010112c:	10821404 	addi	r2,r2,2128
10101130:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101134:	00c00044 	movi	r3,1
10101138:	00840034 	movhi	r2,4096
1010113c:	10821404 	addi	r2,r2,2128
10101140:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00CF); // Power Control B
10101144:	00c033c4 	movi	r3,207
10101148:	00840034 	movhi	r2,4096
1010114c:	10821304 	addi	r2,r2,2124
10101150:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000); // Always 0x00
10101154:	0007883a 	mov	r3,zero
10101158:	00840034 	movhi	r2,4096
1010115c:	10821304 	addi	r2,r2,2124
10101160:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0081);
10101164:	00c02044 	movi	r3,129
10101168:	00840034 	movhi	r2,4096
1010116c:	10821304 	addi	r2,r2,2124
10101170:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0X00c0);
10101174:	00c03004 	movi	r3,192
10101178:	00840034 	movhi	r2,4096
1010117c:	10821304 	addi	r2,r2,2124
10101180:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101184:	0007883a 	mov	r3,zero
10101188:	00840034 	movhi	r2,4096
1010118c:	10821404 	addi	r2,r2,2128
10101190:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101194:	00c00044 	movi	r3,1
10101198:	00840034 	movhi	r2,4096
1010119c:	10821404 	addi	r2,r2,2128
101011a0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00ED); // Power on sequence control
101011a4:	00c03b44 	movi	r3,237
101011a8:	00840034 	movhi	r2,4096
101011ac:	10821304 	addi	r2,r2,2124
101011b0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0064); // Soft Start Keep 1 frame
101011b4:	00c01904 	movi	r3,100
101011b8:	00840034 	movhi	r2,4096
101011bc:	10821304 	addi	r2,r2,2124
101011c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0003);
101011c4:	00c000c4 	movi	r3,3
101011c8:	00840034 	movhi	r2,4096
101011cc:	10821304 	addi	r2,r2,2124
101011d0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0X0012);
101011d4:	00c00484 	movi	r3,18
101011d8:	00840034 	movhi	r2,4096
101011dc:	10821304 	addi	r2,r2,2124
101011e0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0X0081);
101011e4:	00c02044 	movi	r3,129
101011e8:	00840034 	movhi	r2,4096
101011ec:	10821304 	addi	r2,r2,2124
101011f0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101011f4:	0007883a 	mov	r3,zero
101011f8:	00840034 	movhi	r2,4096
101011fc:	10821404 	addi	r2,r2,2128
10101200:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101204:	00c00044 	movi	r3,1
10101208:	00840034 	movhi	r2,4096
1010120c:	10821404 	addi	r2,r2,2128
10101210:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00E8); // Driver timing control A
10101214:	00c03a04 	movi	r3,232
10101218:	00840034 	movhi	r2,4096
1010121c:	10821304 	addi	r2,r2,2124
10101220:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0085);
10101224:	00c02144 	movi	r3,133
10101228:	00840034 	movhi	r2,4096
1010122c:	10821304 	addi	r2,r2,2124
10101230:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0001);
10101234:	00c00044 	movi	r3,1
10101238:	00840034 	movhi	r2,4096
1010123c:	10821304 	addi	r2,r2,2124
10101240:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x00798);
10101244:	00c1e604 	movi	r3,1944
10101248:	00840034 	movhi	r2,4096
1010124c:	10821304 	addi	r2,r2,2124
10101250:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101254:	0007883a 	mov	r3,zero
10101258:	00840034 	movhi	r2,4096
1010125c:	10821404 	addi	r2,r2,2128
10101260:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101264:	00c00044 	movi	r3,1
10101268:	00840034 	movhi	r2,4096
1010126c:	10821404 	addi	r2,r2,2128
10101270:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00CB); // Power control A
10101274:	00c032c4 	movi	r3,203
10101278:	00840034 	movhi	r2,4096
1010127c:	10821304 	addi	r2,r2,2124
10101280:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0039);
10101284:	00c00e44 	movi	r3,57
10101288:	00840034 	movhi	r2,4096
1010128c:	10821304 	addi	r2,r2,2124
10101290:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x002C);
10101294:	00c00b04 	movi	r3,44
10101298:	00840034 	movhi	r2,4096
1010129c:	10821304 	addi	r2,r2,2124
101012a0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
101012a4:	0007883a 	mov	r3,zero
101012a8:	00840034 	movhi	r2,4096
101012ac:	10821304 	addi	r2,r2,2124
101012b0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0034);
101012b4:	00c00d04 	movi	r3,52
101012b8:	00840034 	movhi	r2,4096
101012bc:	10821304 	addi	r2,r2,2124
101012c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0002);
101012c4:	00c00084 	movi	r3,2
101012c8:	00840034 	movhi	r2,4096
101012cc:	10821304 	addi	r2,r2,2124
101012d0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101012d4:	0007883a 	mov	r3,zero
101012d8:	00840034 	movhi	r2,4096
101012dc:	10821404 	addi	r2,r2,2128
101012e0:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
101012e4:	00c00044 	movi	r3,1
101012e8:	00840034 	movhi	r2,4096
101012ec:	10821404 	addi	r2,r2,2128
101012f0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00F7); // Pump ratio control
101012f4:	00c03dc4 	movi	r3,247
101012f8:	00840034 	movhi	r2,4096
101012fc:	10821304 	addi	r2,r2,2124
10101300:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0020);
10101304:	00c00804 	movi	r3,32
10101308:	00840034 	movhi	r2,4096
1010130c:	10821304 	addi	r2,r2,2124
10101310:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101314:	0007883a 	mov	r3,zero
10101318:	00840034 	movhi	r2,4096
1010131c:	10821404 	addi	r2,r2,2128
10101320:	10c00035 	stwio	r3,0(r2)
    
    SET_WRITING_CMD_REG(1);
10101324:	00c00044 	movi	r3,1
10101328:	00840034 	movhi	r2,4096
1010132c:	10821404 	addi	r2,r2,2128
10101330:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00EA); // Driver timing control B
10101334:	00c03a84 	movi	r3,234
10101338:	00840034 	movhi	r2,4096
1010133c:	10821304 	addi	r2,r2,2124
10101340:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
10101344:	0007883a 	mov	r3,zero
10101348:	00840034 	movhi	r2,4096
1010134c:	10821304 	addi	r2,r2,2124
10101350:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
10101354:	0007883a 	mov	r3,zero
10101358:	00840034 	movhi	r2,4096
1010135c:	10821304 	addi	r2,r2,2124
10101360:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101364:	0007883a 	mov	r3,zero
10101368:	00840034 	movhi	r2,4096
1010136c:	10821404 	addi	r2,r2,2128
10101370:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101374:	00c00044 	movi	r3,1
10101378:	00840034 	movhi	r2,4096
1010137c:	10821404 	addi	r2,r2,2128
10101380:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00B1); // Frame Control (In Normal Mode)
10101384:	00c02c44 	movi	r3,177
10101388:	00840034 	movhi	r2,4096
1010138c:	10821304 	addi	r2,r2,2124
10101390:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
10101394:	0007883a 	mov	r3,zero
10101398:	00840034 	movhi	r2,4096
1010139c:	10821304 	addi	r2,r2,2124
101013a0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x001b);
101013a4:	00c006c4 	movi	r3,27
101013a8:	00840034 	movhi	r2,4096
101013ac:	10821304 	addi	r2,r2,2124
101013b0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101013b4:	0007883a 	mov	r3,zero
101013b8:	00840034 	movhi	r2,4096
101013bc:	10821404 	addi	r2,r2,2128
101013c0:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
101013c4:	00c00044 	movi	r3,1
101013c8:	00840034 	movhi	r2,4096
101013cc:	10821404 	addi	r2,r2,2128
101013d0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00B6); // Display Function Control
101013d4:	00c02d84 	movi	r3,182
101013d8:	00840034 	movhi	r2,4096
101013dc:	10821304 	addi	r2,r2,2124
101013e0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000A);
101013e4:	00c00284 	movi	r3,10
101013e8:	00840034 	movhi	r2,4096
101013ec:	10821304 	addi	r2,r2,2124
101013f0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x00A2);
101013f4:	00c02884 	movi	r3,162
101013f8:	00840034 	movhi	r2,4096
101013fc:	10821304 	addi	r2,r2,2124
10101400:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101404:	0007883a 	mov	r3,zero
10101408:	00840034 	movhi	r2,4096
1010140c:	10821404 	addi	r2,r2,2128
10101410:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101414:	00c00044 	movi	r3,1
10101418:	00840034 	movhi	r2,4096
1010141c:	10821404 	addi	r2,r2,2128
10101420:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00C0); //Power control 1
10101424:	00c03004 	movi	r3,192
10101428:	00840034 	movhi	r2,4096
1010142c:	10821304 	addi	r2,r2,2124
10101430:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0005); //VRH[5:0]
10101434:	00c00144 	movi	r3,5
10101438:	00840034 	movhi	r2,4096
1010143c:	10821304 	addi	r2,r2,2124
10101440:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101444:	0007883a 	mov	r3,zero
10101448:	00840034 	movhi	r2,4096
1010144c:	10821404 	addi	r2,r2,2128
10101450:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101454:	00c00044 	movi	r3,1
10101458:	00840034 	movhi	r2,4096
1010145c:	10821404 	addi	r2,r2,2128
10101460:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00C1); //Power control 2
10101464:	00c03044 	movi	r3,193
10101468:	00840034 	movhi	r2,4096
1010146c:	10821304 	addi	r2,r2,2124
10101470:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0011); //SAP[2:0];BT[3:0]
10101474:	00c00444 	movi	r3,17
10101478:	00840034 	movhi	r2,4096
1010147c:	10821304 	addi	r2,r2,2124
10101480:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101484:	0007883a 	mov	r3,zero
10101488:	00840034 	movhi	r2,4096
1010148c:	10821404 	addi	r2,r2,2128
10101490:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101494:	00c00044 	movi	r3,1
10101498:	00840034 	movhi	r2,4096
1010149c:	10821404 	addi	r2,r2,2128
101014a0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00C5); //VCM control 1
101014a4:	00c03144 	movi	r3,197
101014a8:	00840034 	movhi	r2,4096
101014ac:	10821304 	addi	r2,r2,2124
101014b0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0045); //3F
101014b4:	00c01144 	movi	r3,69
101014b8:	00840034 	movhi	r2,4096
101014bc:	10821304 	addi	r2,r2,2124
101014c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0045); //3C
101014c4:	00c01144 	movi	r3,69
101014c8:	00840034 	movhi	r2,4096
101014cc:	10821304 	addi	r2,r2,2124
101014d0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101014d4:	0007883a 	mov	r3,zero
101014d8:	00840034 	movhi	r2,4096
101014dc:	10821404 	addi	r2,r2,2128
101014e0:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
101014e4:	00c00044 	movi	r3,1
101014e8:	00840034 	movhi	r2,4096
101014ec:	10821404 	addi	r2,r2,2128
101014f0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00C7); //VCM control 2
101014f4:	00c031c4 	movi	r3,199
101014f8:	00840034 	movhi	r2,4096
101014fc:	10821304 	addi	r2,r2,2124
10101500:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0X00a2);
10101504:	00c02884 	movi	r3,162
10101508:	00840034 	movhi	r2,4096
1010150c:	10821304 	addi	r2,r2,2124
10101510:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101514:	0007883a 	mov	r3,zero
10101518:	00840034 	movhi	r2,4096
1010151c:	10821404 	addi	r2,r2,2128
10101520:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101524:	00c00044 	movi	r3,1
10101528:	00840034 	movhi	r2,4096
1010152c:	10821404 	addi	r2,r2,2128
10101530:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x0036); // Memory Access Control
10101534:	00c00d84 	movi	r3,54
10101538:	00840034 	movhi	r2,4096
1010153c:	10821304 	addi	r2,r2,2124
10101540:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x00A0);// RGB order							//changed
10101544:	00c02804 	movi	r3,160
10101548:	00840034 	movhi	r2,4096
1010154c:	10821304 	addi	r2,r2,2124
10101550:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101554:	0007883a 	mov	r3,zero
10101558:	00840034 	movhi	r2,4096
1010155c:	10821404 	addi	r2,r2,2128
10101560:	10c00035 	stwio	r3,0(r2)
 
    SET_WRITING_CMD_REG(1);
10101564:	00c00044 	movi	r3,1
10101568:	00840034 	movhi	r2,4096
1010156c:	10821404 	addi	r2,r2,2128
10101570:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00F2); // Enable 3G
10101574:	00c03c84 	movi	r3,242
10101578:	00840034 	movhi	r2,4096
1010157c:	10821304 	addi	r2,r2,2124
10101580:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000); // 3Gamma Function Disable
10101584:	0007883a 	mov	r3,zero
10101588:	00840034 	movhi	r2,4096
1010158c:	10821304 	addi	r2,r2,2124
10101590:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101594:	0007883a 	mov	r3,zero
10101598:	00840034 	movhi	r2,4096
1010159c:	10821404 	addi	r2,r2,2128
101015a0:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
101015a4:	00c00044 	movi	r3,1
101015a8:	00840034 	movhi	r2,4096
101015ac:	10821404 	addi	r2,r2,2128
101015b0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x0026); // Gamma Set
101015b4:	00c00984 	movi	r3,38
101015b8:	00840034 	movhi	r2,4096
101015bc:	10821304 	addi	r2,r2,2124
101015c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0001); // Gamma curve selected
101015c4:	00c00044 	movi	r3,1
101015c8:	00840034 	movhi	r2,4096
101015cc:	10821304 	addi	r2,r2,2124
101015d0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101015d4:	0007883a 	mov	r3,zero
101015d8:	00840034 	movhi	r2,4096
101015dc:	10821404 	addi	r2,r2,2128
101015e0:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
101015e4:	00c00044 	movi	r3,1
101015e8:	00840034 	movhi	r2,4096
101015ec:	10821404 	addi	r2,r2,2128
101015f0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00E0); // Positive Gamma Correction, Set Gamma
101015f4:	00c03804 	movi	r3,224
101015f8:	00840034 	movhi	r2,4096
101015fc:	10821304 	addi	r2,r2,2124
10101600:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000F);
10101604:	00c003c4 	movi	r3,15
10101608:	00840034 	movhi	r2,4096
1010160c:	10821304 	addi	r2,r2,2124
10101610:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0026);
10101614:	00c00984 	movi	r3,38
10101618:	00840034 	movhi	r2,4096
1010161c:	10821304 	addi	r2,r2,2124
10101620:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0024);
10101624:	00c00904 	movi	r3,36
10101628:	00840034 	movhi	r2,4096
1010162c:	10821304 	addi	r2,r2,2124
10101630:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000b);
10101634:	00c002c4 	movi	r3,11
10101638:	00840034 	movhi	r2,4096
1010163c:	10821304 	addi	r2,r2,2124
10101640:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000E);
10101644:	00c00384 	movi	r3,14
10101648:	00840034 	movhi	r2,4096
1010164c:	10821304 	addi	r2,r2,2124
10101650:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0008);
10101654:	00c00204 	movi	r3,8
10101658:	00840034 	movhi	r2,4096
1010165c:	10821304 	addi	r2,r2,2124
10101660:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x004b);
10101664:	00c012c4 	movi	r3,75
10101668:	00840034 	movhi	r2,4096
1010166c:	10821304 	addi	r2,r2,2124
10101670:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0X00a8);
10101674:	00c02a04 	movi	r3,168
10101678:	00840034 	movhi	r2,4096
1010167c:	10821304 	addi	r2,r2,2124
10101680:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x003b);
10101684:	00c00ec4 	movi	r3,59
10101688:	00840034 	movhi	r2,4096
1010168c:	10821304 	addi	r2,r2,2124
10101690:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000a);
10101694:	00c00284 	movi	r3,10
10101698:	00840034 	movhi	r2,4096
1010169c:	10821304 	addi	r2,r2,2124
101016a0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0014);
101016a4:	00c00504 	movi	r3,20
101016a8:	00840034 	movhi	r2,4096
101016ac:	10821304 	addi	r2,r2,2124
101016b0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0006);
101016b4:	00c00184 	movi	r3,6
101016b8:	00840034 	movhi	r2,4096
101016bc:	10821304 	addi	r2,r2,2124
101016c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0010);
101016c4:	00c00404 	movi	r3,16
101016c8:	00840034 	movhi	r2,4096
101016cc:	10821304 	addi	r2,r2,2124
101016d0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0009);
101016d4:	00c00244 	movi	r3,9
101016d8:	00840034 	movhi	r2,4096
101016dc:	10821304 	addi	r2,r2,2124
101016e0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
101016e4:	0007883a 	mov	r3,zero
101016e8:	00840034 	movhi	r2,4096
101016ec:	10821304 	addi	r2,r2,2124
101016f0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101016f4:	0007883a 	mov	r3,zero
101016f8:	00840034 	movhi	r2,4096
101016fc:	10821404 	addi	r2,r2,2128
10101700:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101704:	00c00044 	movi	r3,1
10101708:	00840034 	movhi	r2,4096
1010170c:	10821404 	addi	r2,r2,2128
10101710:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0X00E1); //Negative Gamma Correction, Set Gamma
10101714:	00c03844 	movi	r3,225
10101718:	00840034 	movhi	r2,4096
1010171c:	10821304 	addi	r2,r2,2124
10101720:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
10101724:	0007883a 	mov	r3,zero
10101728:	00840034 	movhi	r2,4096
1010172c:	10821304 	addi	r2,r2,2124
10101730:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x001c);
10101734:	00c00704 	movi	r3,28
10101738:	00840034 	movhi	r2,4096
1010173c:	10821304 	addi	r2,r2,2124
10101740:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0020);
10101744:	00c00804 	movi	r3,32
10101748:	00840034 	movhi	r2,4096
1010174c:	10821304 	addi	r2,r2,2124
10101750:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0004);
10101754:	00c00104 	movi	r3,4
10101758:	00840034 	movhi	r2,4096
1010175c:	10821304 	addi	r2,r2,2124
10101760:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0010);
10101764:	00c00404 	movi	r3,16
10101768:	00840034 	movhi	r2,4096
1010176c:	10821304 	addi	r2,r2,2124
10101770:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0008);
10101774:	00c00204 	movi	r3,8
10101778:	00840034 	movhi	r2,4096
1010177c:	10821304 	addi	r2,r2,2124
10101780:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0034);
10101784:	00c00d04 	movi	r3,52
10101788:	00840034 	movhi	r2,4096
1010178c:	10821304 	addi	r2,r2,2124
10101790:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0047);
10101794:	00c011c4 	movi	r3,71
10101798:	00840034 	movhi	r2,4096
1010179c:	10821304 	addi	r2,r2,2124
101017a0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0044);
101017a4:	00c01104 	movi	r3,68
101017a8:	00840034 	movhi	r2,4096
101017ac:	10821304 	addi	r2,r2,2124
101017b0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0005);
101017b4:	00c00144 	movi	r3,5
101017b8:	00840034 	movhi	r2,4096
101017bc:	10821304 	addi	r2,r2,2124
101017c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000b);
101017c4:	00c002c4 	movi	r3,11
101017c8:	00840034 	movhi	r2,4096
101017cc:	10821304 	addi	r2,r2,2124
101017d0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0009);
101017d4:	00c00244 	movi	r3,9
101017d8:	00840034 	movhi	r2,4096
101017dc:	10821304 	addi	r2,r2,2124
101017e0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x002f);
101017e4:	00c00bc4 	movi	r3,47
101017e8:	00840034 	movhi	r2,4096
101017ec:	10821304 	addi	r2,r2,2124
101017f0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0036);
101017f4:	00c00d84 	movi	r3,54
101017f8:	00840034 	movhi	r2,4096
101017fc:	10821304 	addi	r2,r2,2124
10101800:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x000f);
10101804:	00c003c4 	movi	r3,15
10101808:	00840034 	movhi	r2,4096
1010180c:	10821304 	addi	r2,r2,2124
10101810:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101814:	0007883a 	mov	r3,zero
10101818:	00840034 	movhi	r2,4096
1010181c:	10821404 	addi	r2,r2,2128
10101820:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101824:	00c00044 	movi	r3,1
10101828:	00840034 	movhi	r2,4096
1010182c:	10821404 	addi	r2,r2,2128
10101830:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x002A); // Column Address Set
10101834:	00c00a84 	movi	r3,42
10101838:	00840034 	movhi	r2,4096
1010183c:	10821304 	addi	r2,r2,2124
10101840:	10c00035 	stwio	r3,0(r2)
    	LCD_WR_DATA(0x0000);
10101844:	0007883a 	mov	r3,zero
10101848:	00840034 	movhi	r2,4096
1010184c:	10821304 	addi	r2,r2,2124
10101850:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
10101854:	0007883a 	mov	r3,zero
10101858:	00840034 	movhi	r2,4096
1010185c:	10821304 	addi	r2,r2,2124
10101860:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0001);
10101864:	00c00044 	movi	r3,1
10101868:	00840034 	movhi	r2,4096
1010186c:	10821304 	addi	r2,r2,2124
10101870:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x003f);
10101874:	00c00fc4 	movi	r3,63
10101878:	00840034 	movhi	r2,4096
1010187c:	10821304 	addi	r2,r2,2124
10101880:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101884:	0007883a 	mov	r3,zero
10101888:	00840034 	movhi	r2,4096
1010188c:	10821404 	addi	r2,r2,2128
10101890:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101894:	00c00044 	movi	r3,1
10101898:	00840034 	movhi	r2,4096
1010189c:	10821404 	addi	r2,r2,2128
101018a0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x002B); // Page Address Set
101018a4:	00c00ac4 	movi	r3,43
101018a8:	00840034 	movhi	r2,4096
101018ac:	10821304 	addi	r2,r2,2124
101018b0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
101018b4:	0007883a 	mov	r3,zero
101018b8:	00840034 	movhi	r2,4096
101018bc:	10821304 	addi	r2,r2,2124
101018c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
101018c4:	0007883a 	mov	r3,zero
101018c8:	00840034 	movhi	r2,4096
101018cc:	10821304 	addi	r2,r2,2124
101018d0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
101018d4:	0007883a 	mov	r3,zero
101018d8:	00840034 	movhi	r2,4096
101018dc:	10821304 	addi	r2,r2,2124
101018e0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x00ef);
101018e4:	00c03bc4 	movi	r3,239
101018e8:	00840034 	movhi	r2,4096
101018ec:	10821304 	addi	r2,r2,2124
101018f0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101018f4:	0007883a 	mov	r3,zero
101018f8:	00840034 	movhi	r2,4096
101018fc:	10821404 	addi	r2,r2,2128
10101900:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101904:	00c00044 	movi	r3,1
10101908:	00840034 	movhi	r2,4096
1010190c:	10821404 	addi	r2,r2,2128
10101910:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x003A); // COLMOD: Pixel Format Set
10101914:	00c00e84 	movi	r3,58
10101918:	00840034 	movhi	r2,4096
1010191c:	10821304 	addi	r2,r2,2124
10101920:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0055);
10101924:	00c01544 	movi	r3,85
10101928:	00840034 	movhi	r2,4096
1010192c:	10821304 	addi	r2,r2,2124
10101930:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101934:	0007883a 	mov	r3,zero
10101938:	00840034 	movhi	r2,4096
1010193c:	10821404 	addi	r2,r2,2128
10101940:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101944:	00c00044 	movi	r3,1
10101948:	00840034 	movhi	r2,4096
1010194c:	10821404 	addi	r2,r2,2128
10101950:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x00f6); // Interface Control
10101954:	00c03d84 	movi	r3,246
10101958:	00840034 	movhi	r2,4096
1010195c:	10821304 	addi	r2,r2,2124
10101960:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0001);
10101964:	00c00044 	movi	r3,1
10101968:	00840034 	movhi	r2,4096
1010196c:	10821304 	addi	r2,r2,2124
10101970:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0030);
10101974:	00c00c04 	movi	r3,48
10101978:	00840034 	movhi	r2,4096
1010197c:	10821304 	addi	r2,r2,2124
10101980:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000);
10101984:	0007883a 	mov	r3,zero
10101988:	00840034 	movhi	r2,4096
1010198c:	10821304 	addi	r2,r2,2124
10101990:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101994:	0007883a 	mov	r3,zero
10101998:	00840034 	movhi	r2,4096
1010199c:	10821404 	addi	r2,r2,2128
101019a0:	10c00035 	stwio	r3,0(r2)

    //Command we added to reverse the order the colomns are read
    SET_WRITING_CMD_REG(1);
101019a4:	00c00044 	movi	r3,1
101019a8:	00840034 	movhi	r2,4096
101019ac:	10821404 	addi	r2,r2,2128
101019b0:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x000B); // Read Display MADCTL
101019b4:	00c002c4 	movi	r3,11
101019b8:	00840034 	movhi	r2,4096
101019bc:	10821304 	addi	r2,r2,2124
101019c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0000); // Don't care
101019c4:	0007883a 	mov	r3,zero
101019c8:	00840034 	movhi	r2,4096
101019cc:	10821304 	addi	r2,r2,2124
101019d0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(0x0040); // B6 = '1' => Right to Left
101019d4:	00c01004 	movi	r3,64
101019d8:	00840034 	movhi	r2,4096
101019dc:	10821304 	addi	r2,r2,2124
101019e0:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
101019e4:	0007883a 	mov	r3,zero
101019e8:	00840034 	movhi	r2,4096
101019ec:	10821404 	addi	r2,r2,2128
101019f0:	10c00035 	stwio	r3,0(r2)
    
    SET_WRITING_CMD_REG(1);
101019f4:	00c00044 	movi	r3,1
101019f8:	00840034 	movhi	r2,4096
101019fc:	10821404 	addi	r2,r2,2128
10101a00:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x0029); //display on
10101a04:	00c00a44 	movi	r3,41
10101a08:	00840034 	movhi	r2,4096
10101a0c:	10821304 	addi	r2,r2,2124
10101a10:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101a14:	0007883a 	mov	r3,zero
10101a18:	00840034 	movhi	r2,4096
10101a1c:	10821404 	addi	r2,r2,2128
10101a20:	10c00035 	stwio	r3,0(r2)

    SET_WRITING_CMD_REG(1);
10101a24:	00c00044 	movi	r3,1
10101a28:	00840034 	movhi	r2,4096
10101a2c:	10821404 	addi	r2,r2,2128
10101a30:	10c00035 	stwio	r3,0(r2)
    LCD_WR_REG(0x002c); // 0x3C
10101a34:	00c00b04 	movi	r3,44
10101a38:	00840034 	movhi	r2,4096
10101a3c:	10821304 	addi	r2,r2,2124
10101a40:	10c00035 	stwio	r3,0(r2)
    SET_WRITING_CMD_REG(0);
10101a44:	0007883a 	mov	r3,zero
10101a48:	00840034 	movhi	r2,4096
10101a4c:	10821404 	addi	r2,r2,2128
10101a50:	10c00035 	stwio	r3,0(r2)

}
10101a54:	0001883a 	nop
10101a58:	e037883a 	mov	sp,fp
10101a5c:	dfc00117 	ldw	ra,4(sp)
10101a60:	df000017 	ldw	fp,0(sp)
10101a64:	dec00204 	addi	sp,sp,8
10101a68:	f800283a 	ret

10101a6c <__divsi3>:
10101a6c:	20001b16 	blt	r4,zero,10101adc <__divsi3+0x70>
10101a70:	000f883a 	mov	r7,zero
10101a74:	28001616 	blt	r5,zero,10101ad0 <__divsi3+0x64>
10101a78:	200d883a 	mov	r6,r4
10101a7c:	29001a2e 	bgeu	r5,r4,10101ae8 <__divsi3+0x7c>
10101a80:	00800804 	movi	r2,32
10101a84:	00c00044 	movi	r3,1
10101a88:	00000106 	br	10101a90 <__divsi3+0x24>
10101a8c:	10000d26 	beq	r2,zero,10101ac4 <__divsi3+0x58>
10101a90:	294b883a 	add	r5,r5,r5
10101a94:	10bfffc4 	addi	r2,r2,-1
10101a98:	18c7883a 	add	r3,r3,r3
10101a9c:	293ffb36 	bltu	r5,r4,10101a8c <__alt_data_end+0xfffe1a8c>
10101aa0:	0005883a 	mov	r2,zero
10101aa4:	18000726 	beq	r3,zero,10101ac4 <__divsi3+0x58>
10101aa8:	0005883a 	mov	r2,zero
10101aac:	31400236 	bltu	r6,r5,10101ab8 <__divsi3+0x4c>
10101ab0:	314dc83a 	sub	r6,r6,r5
10101ab4:	10c4b03a 	or	r2,r2,r3
10101ab8:	1806d07a 	srli	r3,r3,1
10101abc:	280ad07a 	srli	r5,r5,1
10101ac0:	183ffa1e 	bne	r3,zero,10101aac <__alt_data_end+0xfffe1aac>
10101ac4:	38000126 	beq	r7,zero,10101acc <__divsi3+0x60>
10101ac8:	0085c83a 	sub	r2,zero,r2
10101acc:	f800283a 	ret
10101ad0:	014bc83a 	sub	r5,zero,r5
10101ad4:	39c0005c 	xori	r7,r7,1
10101ad8:	003fe706 	br	10101a78 <__alt_data_end+0xfffe1a78>
10101adc:	0109c83a 	sub	r4,zero,r4
10101ae0:	01c00044 	movi	r7,1
10101ae4:	003fe306 	br	10101a74 <__alt_data_end+0xfffe1a74>
10101ae8:	00c00044 	movi	r3,1
10101aec:	003fee06 	br	10101aa8 <__alt_data_end+0xfffe1aa8>

10101af0 <__modsi3>:
10101af0:	20001716 	blt	r4,zero,10101b50 <__modsi3+0x60>
10101af4:	000f883a 	mov	r7,zero
10101af8:	2005883a 	mov	r2,r4
10101afc:	28001216 	blt	r5,zero,10101b48 <__modsi3+0x58>
10101b00:	2900162e 	bgeu	r5,r4,10101b5c <__modsi3+0x6c>
10101b04:	01800804 	movi	r6,32
10101b08:	00c00044 	movi	r3,1
10101b0c:	00000106 	br	10101b14 <__modsi3+0x24>
10101b10:	30000a26 	beq	r6,zero,10101b3c <__modsi3+0x4c>
10101b14:	294b883a 	add	r5,r5,r5
10101b18:	31bfffc4 	addi	r6,r6,-1
10101b1c:	18c7883a 	add	r3,r3,r3
10101b20:	293ffb36 	bltu	r5,r4,10101b10 <__alt_data_end+0xfffe1b10>
10101b24:	18000526 	beq	r3,zero,10101b3c <__modsi3+0x4c>
10101b28:	1806d07a 	srli	r3,r3,1
10101b2c:	11400136 	bltu	r2,r5,10101b34 <__modsi3+0x44>
10101b30:	1145c83a 	sub	r2,r2,r5
10101b34:	280ad07a 	srli	r5,r5,1
10101b38:	183ffb1e 	bne	r3,zero,10101b28 <__alt_data_end+0xfffe1b28>
10101b3c:	38000126 	beq	r7,zero,10101b44 <__modsi3+0x54>
10101b40:	0085c83a 	sub	r2,zero,r2
10101b44:	f800283a 	ret
10101b48:	014bc83a 	sub	r5,zero,r5
10101b4c:	003fec06 	br	10101b00 <__alt_data_end+0xfffe1b00>
10101b50:	0109c83a 	sub	r4,zero,r4
10101b54:	01c00044 	movi	r7,1
10101b58:	003fe706 	br	10101af8 <__alt_data_end+0xfffe1af8>
10101b5c:	00c00044 	movi	r3,1
10101b60:	003ff106 	br	10101b28 <__alt_data_end+0xfffe1b28>

10101b64 <__udivsi3>:
10101b64:	200d883a 	mov	r6,r4
10101b68:	2900152e 	bgeu	r5,r4,10101bc0 <__udivsi3+0x5c>
10101b6c:	28001416 	blt	r5,zero,10101bc0 <__udivsi3+0x5c>
10101b70:	00800804 	movi	r2,32
10101b74:	00c00044 	movi	r3,1
10101b78:	00000206 	br	10101b84 <__udivsi3+0x20>
10101b7c:	10000e26 	beq	r2,zero,10101bb8 <__udivsi3+0x54>
10101b80:	28000516 	blt	r5,zero,10101b98 <__udivsi3+0x34>
10101b84:	294b883a 	add	r5,r5,r5
10101b88:	10bfffc4 	addi	r2,r2,-1
10101b8c:	18c7883a 	add	r3,r3,r3
10101b90:	293ffa36 	bltu	r5,r4,10101b7c <__alt_data_end+0xfffe1b7c>
10101b94:	18000826 	beq	r3,zero,10101bb8 <__udivsi3+0x54>
10101b98:	0005883a 	mov	r2,zero
10101b9c:	31400236 	bltu	r6,r5,10101ba8 <__udivsi3+0x44>
10101ba0:	314dc83a 	sub	r6,r6,r5
10101ba4:	10c4b03a 	or	r2,r2,r3
10101ba8:	1806d07a 	srli	r3,r3,1
10101bac:	280ad07a 	srli	r5,r5,1
10101bb0:	183ffa1e 	bne	r3,zero,10101b9c <__alt_data_end+0xfffe1b9c>
10101bb4:	f800283a 	ret
10101bb8:	0005883a 	mov	r2,zero
10101bbc:	f800283a 	ret
10101bc0:	00c00044 	movi	r3,1
10101bc4:	003ff406 	br	10101b98 <__alt_data_end+0xfffe1b98>

10101bc8 <__umodsi3>:
10101bc8:	2005883a 	mov	r2,r4
10101bcc:	2900122e 	bgeu	r5,r4,10101c18 <__umodsi3+0x50>
10101bd0:	28001116 	blt	r5,zero,10101c18 <__umodsi3+0x50>
10101bd4:	01800804 	movi	r6,32
10101bd8:	00c00044 	movi	r3,1
10101bdc:	00000206 	br	10101be8 <__umodsi3+0x20>
10101be0:	30000c26 	beq	r6,zero,10101c14 <__umodsi3+0x4c>
10101be4:	28000516 	blt	r5,zero,10101bfc <__umodsi3+0x34>
10101be8:	294b883a 	add	r5,r5,r5
10101bec:	31bfffc4 	addi	r6,r6,-1
10101bf0:	18c7883a 	add	r3,r3,r3
10101bf4:	293ffa36 	bltu	r5,r4,10101be0 <__alt_data_end+0xfffe1be0>
10101bf8:	18000626 	beq	r3,zero,10101c14 <__umodsi3+0x4c>
10101bfc:	1806d07a 	srli	r3,r3,1
10101c00:	11400136 	bltu	r2,r5,10101c08 <__umodsi3+0x40>
10101c04:	1145c83a 	sub	r2,r2,r5
10101c08:	280ad07a 	srli	r5,r5,1
10101c0c:	183ffb1e 	bne	r3,zero,10101bfc <__alt_data_end+0xfffe1bfc>
10101c10:	f800283a 	ret
10101c14:	f800283a 	ret
10101c18:	00c00044 	movi	r3,1
10101c1c:	003ff706 	br	10101bfc <__alt_data_end+0xfffe1bfc>

10101c20 <_fclose_r>:
10101c20:	28003926 	beq	r5,zero,10101d08 <_fclose_r+0xe8>
10101c24:	defffc04 	addi	sp,sp,-16
10101c28:	dc400115 	stw	r17,4(sp)
10101c2c:	dc000015 	stw	r16,0(sp)
10101c30:	dfc00315 	stw	ra,12(sp)
10101c34:	dc800215 	stw	r18,8(sp)
10101c38:	2023883a 	mov	r17,r4
10101c3c:	2821883a 	mov	r16,r5
10101c40:	20000226 	beq	r4,zero,10101c4c <_fclose_r+0x2c>
10101c44:	20800e17 	ldw	r2,56(r4)
10101c48:	10002726 	beq	r2,zero,10101ce8 <_fclose_r+0xc8>
10101c4c:	8080030f 	ldh	r2,12(r16)
10101c50:	1000071e 	bne	r2,zero,10101c70 <_fclose_r+0x50>
10101c54:	0005883a 	mov	r2,zero
10101c58:	dfc00317 	ldw	ra,12(sp)
10101c5c:	dc800217 	ldw	r18,8(sp)
10101c60:	dc400117 	ldw	r17,4(sp)
10101c64:	dc000017 	ldw	r16,0(sp)
10101c68:	dec00404 	addi	sp,sp,16
10101c6c:	f800283a 	ret
10101c70:	800b883a 	mov	r5,r16
10101c74:	8809883a 	mov	r4,r17
10101c78:	0101d240 	call	10101d24 <__sflush_r>
10101c7c:	1025883a 	mov	r18,r2
10101c80:	80800b17 	ldw	r2,44(r16)
10101c84:	10000426 	beq	r2,zero,10101c98 <_fclose_r+0x78>
10101c88:	81400717 	ldw	r5,28(r16)
10101c8c:	8809883a 	mov	r4,r17
10101c90:	103ee83a 	callr	r2
10101c94:	10001616 	blt	r2,zero,10101cf0 <_fclose_r+0xd0>
10101c98:	8080030b 	ldhu	r2,12(r16)
10101c9c:	1080200c 	andi	r2,r2,128
10101ca0:	1000151e 	bne	r2,zero,10101cf8 <_fclose_r+0xd8>
10101ca4:	81400c17 	ldw	r5,48(r16)
10101ca8:	28000526 	beq	r5,zero,10101cc0 <_fclose_r+0xa0>
10101cac:	80801004 	addi	r2,r16,64
10101cb0:	28800226 	beq	r5,r2,10101cbc <_fclose_r+0x9c>
10101cb4:	8809883a 	mov	r4,r17
10101cb8:	01025e80 	call	101025e8 <_free_r>
10101cbc:	80000c15 	stw	zero,48(r16)
10101cc0:	81401117 	ldw	r5,68(r16)
10101cc4:	28000326 	beq	r5,zero,10101cd4 <_fclose_r+0xb4>
10101cc8:	8809883a 	mov	r4,r17
10101ccc:	01025e80 	call	101025e8 <_free_r>
10101cd0:	80001115 	stw	zero,68(r16)
10101cd4:	010232c0 	call	1010232c <__sfp_lock_acquire>
10101cd8:	8000030d 	sth	zero,12(r16)
10101cdc:	01023300 	call	10102330 <__sfp_lock_release>
10101ce0:	9005883a 	mov	r2,r18
10101ce4:	003fdc06 	br	10101c58 <__alt_data_end+0xfffe1c58>
10101ce8:	010231c0 	call	1010231c <__sinit>
10101cec:	003fd706 	br	10101c4c <__alt_data_end+0xfffe1c4c>
10101cf0:	04bfffc4 	movi	r18,-1
10101cf4:	003fe806 	br	10101c98 <__alt_data_end+0xfffe1c98>
10101cf8:	81400417 	ldw	r5,16(r16)
10101cfc:	8809883a 	mov	r4,r17
10101d00:	01025e80 	call	101025e8 <_free_r>
10101d04:	003fe706 	br	10101ca4 <__alt_data_end+0xfffe1ca4>
10101d08:	0005883a 	mov	r2,zero
10101d0c:	f800283a 	ret

10101d10 <fclose>:
10101d10:	00840474 	movhi	r2,4113
10101d14:	108cf104 	addi	r2,r2,13252
10101d18:	200b883a 	mov	r5,r4
10101d1c:	11000017 	ldw	r4,0(r2)
10101d20:	0101c201 	jmpi	10101c20 <_fclose_r>

10101d24 <__sflush_r>:
10101d24:	2880030b 	ldhu	r2,12(r5)
10101d28:	defffb04 	addi	sp,sp,-20
10101d2c:	dcc00315 	stw	r19,12(sp)
10101d30:	dc400115 	stw	r17,4(sp)
10101d34:	dfc00415 	stw	ra,16(sp)
10101d38:	dc800215 	stw	r18,8(sp)
10101d3c:	dc000015 	stw	r16,0(sp)
10101d40:	10c0020c 	andi	r3,r2,8
10101d44:	2823883a 	mov	r17,r5
10101d48:	2027883a 	mov	r19,r4
10101d4c:	1800311e 	bne	r3,zero,10101e14 <__sflush_r+0xf0>
10101d50:	28c00117 	ldw	r3,4(r5)
10101d54:	10820014 	ori	r2,r2,2048
10101d58:	2880030d 	sth	r2,12(r5)
10101d5c:	00c04b0e 	bge	zero,r3,10101e8c <__sflush_r+0x168>
10101d60:	8a000a17 	ldw	r8,40(r17)
10101d64:	40002326 	beq	r8,zero,10101df4 <__sflush_r+0xd0>
10101d68:	9c000017 	ldw	r16,0(r19)
10101d6c:	10c4000c 	andi	r3,r2,4096
10101d70:	98000015 	stw	zero,0(r19)
10101d74:	18004826 	beq	r3,zero,10101e98 <__sflush_r+0x174>
10101d78:	89801417 	ldw	r6,80(r17)
10101d7c:	10c0010c 	andi	r3,r2,4
10101d80:	18000626 	beq	r3,zero,10101d9c <__sflush_r+0x78>
10101d84:	88c00117 	ldw	r3,4(r17)
10101d88:	88800c17 	ldw	r2,48(r17)
10101d8c:	30cdc83a 	sub	r6,r6,r3
10101d90:	10000226 	beq	r2,zero,10101d9c <__sflush_r+0x78>
10101d94:	88800f17 	ldw	r2,60(r17)
10101d98:	308dc83a 	sub	r6,r6,r2
10101d9c:	89400717 	ldw	r5,28(r17)
10101da0:	000f883a 	mov	r7,zero
10101da4:	9809883a 	mov	r4,r19
10101da8:	403ee83a 	callr	r8
10101dac:	00ffffc4 	movi	r3,-1
10101db0:	10c04426 	beq	r2,r3,10101ec4 <__sflush_r+0x1a0>
10101db4:	88c0030b 	ldhu	r3,12(r17)
10101db8:	89000417 	ldw	r4,16(r17)
10101dbc:	88000115 	stw	zero,4(r17)
10101dc0:	197dffcc 	andi	r5,r3,63487
10101dc4:	8940030d 	sth	r5,12(r17)
10101dc8:	89000015 	stw	r4,0(r17)
10101dcc:	18c4000c 	andi	r3,r3,4096
10101dd0:	18002c1e 	bne	r3,zero,10101e84 <__sflush_r+0x160>
10101dd4:	89400c17 	ldw	r5,48(r17)
10101dd8:	9c000015 	stw	r16,0(r19)
10101ddc:	28000526 	beq	r5,zero,10101df4 <__sflush_r+0xd0>
10101de0:	88801004 	addi	r2,r17,64
10101de4:	28800226 	beq	r5,r2,10101df0 <__sflush_r+0xcc>
10101de8:	9809883a 	mov	r4,r19
10101dec:	01025e80 	call	101025e8 <_free_r>
10101df0:	88000c15 	stw	zero,48(r17)
10101df4:	0005883a 	mov	r2,zero
10101df8:	dfc00417 	ldw	ra,16(sp)
10101dfc:	dcc00317 	ldw	r19,12(sp)
10101e00:	dc800217 	ldw	r18,8(sp)
10101e04:	dc400117 	ldw	r17,4(sp)
10101e08:	dc000017 	ldw	r16,0(sp)
10101e0c:	dec00504 	addi	sp,sp,20
10101e10:	f800283a 	ret
10101e14:	2c800417 	ldw	r18,16(r5)
10101e18:	903ff626 	beq	r18,zero,10101df4 <__alt_data_end+0xfffe1df4>
10101e1c:	2c000017 	ldw	r16,0(r5)
10101e20:	108000cc 	andi	r2,r2,3
10101e24:	2c800015 	stw	r18,0(r5)
10101e28:	84a1c83a 	sub	r16,r16,r18
10101e2c:	1000131e 	bne	r2,zero,10101e7c <__sflush_r+0x158>
10101e30:	28800517 	ldw	r2,20(r5)
10101e34:	88800215 	stw	r2,8(r17)
10101e38:	04000316 	blt	zero,r16,10101e48 <__sflush_r+0x124>
10101e3c:	003fed06 	br	10101df4 <__alt_data_end+0xfffe1df4>
10101e40:	90a5883a 	add	r18,r18,r2
10101e44:	043feb0e 	bge	zero,r16,10101df4 <__alt_data_end+0xfffe1df4>
10101e48:	88800917 	ldw	r2,36(r17)
10101e4c:	89400717 	ldw	r5,28(r17)
10101e50:	800f883a 	mov	r7,r16
10101e54:	900d883a 	mov	r6,r18
10101e58:	9809883a 	mov	r4,r19
10101e5c:	103ee83a 	callr	r2
10101e60:	80a1c83a 	sub	r16,r16,r2
10101e64:	00bff616 	blt	zero,r2,10101e40 <__alt_data_end+0xfffe1e40>
10101e68:	88c0030b 	ldhu	r3,12(r17)
10101e6c:	00bfffc4 	movi	r2,-1
10101e70:	18c01014 	ori	r3,r3,64
10101e74:	88c0030d 	sth	r3,12(r17)
10101e78:	003fdf06 	br	10101df8 <__alt_data_end+0xfffe1df8>
10101e7c:	0005883a 	mov	r2,zero
10101e80:	003fec06 	br	10101e34 <__alt_data_end+0xfffe1e34>
10101e84:	88801415 	stw	r2,80(r17)
10101e88:	003fd206 	br	10101dd4 <__alt_data_end+0xfffe1dd4>
10101e8c:	28c00f17 	ldw	r3,60(r5)
10101e90:	00ffb316 	blt	zero,r3,10101d60 <__alt_data_end+0xfffe1d60>
10101e94:	003fd706 	br	10101df4 <__alt_data_end+0xfffe1df4>
10101e98:	89400717 	ldw	r5,28(r17)
10101e9c:	000d883a 	mov	r6,zero
10101ea0:	01c00044 	movi	r7,1
10101ea4:	9809883a 	mov	r4,r19
10101ea8:	403ee83a 	callr	r8
10101eac:	100d883a 	mov	r6,r2
10101eb0:	00bfffc4 	movi	r2,-1
10101eb4:	30801426 	beq	r6,r2,10101f08 <__sflush_r+0x1e4>
10101eb8:	8880030b 	ldhu	r2,12(r17)
10101ebc:	8a000a17 	ldw	r8,40(r17)
10101ec0:	003fae06 	br	10101d7c <__alt_data_end+0xfffe1d7c>
10101ec4:	98c00017 	ldw	r3,0(r19)
10101ec8:	183fba26 	beq	r3,zero,10101db4 <__alt_data_end+0xfffe1db4>
10101ecc:	01000744 	movi	r4,29
10101ed0:	19000626 	beq	r3,r4,10101eec <__sflush_r+0x1c8>
10101ed4:	01000584 	movi	r4,22
10101ed8:	19000426 	beq	r3,r4,10101eec <__sflush_r+0x1c8>
10101edc:	88c0030b 	ldhu	r3,12(r17)
10101ee0:	18c01014 	ori	r3,r3,64
10101ee4:	88c0030d 	sth	r3,12(r17)
10101ee8:	003fc306 	br	10101df8 <__alt_data_end+0xfffe1df8>
10101eec:	8880030b 	ldhu	r2,12(r17)
10101ef0:	88c00417 	ldw	r3,16(r17)
10101ef4:	88000115 	stw	zero,4(r17)
10101ef8:	10bdffcc 	andi	r2,r2,63487
10101efc:	8880030d 	sth	r2,12(r17)
10101f00:	88c00015 	stw	r3,0(r17)
10101f04:	003fb306 	br	10101dd4 <__alt_data_end+0xfffe1dd4>
10101f08:	98800017 	ldw	r2,0(r19)
10101f0c:	103fea26 	beq	r2,zero,10101eb8 <__alt_data_end+0xfffe1eb8>
10101f10:	00c00744 	movi	r3,29
10101f14:	10c00226 	beq	r2,r3,10101f20 <__sflush_r+0x1fc>
10101f18:	00c00584 	movi	r3,22
10101f1c:	10c0031e 	bne	r2,r3,10101f2c <__sflush_r+0x208>
10101f20:	9c000015 	stw	r16,0(r19)
10101f24:	0005883a 	mov	r2,zero
10101f28:	003fb306 	br	10101df8 <__alt_data_end+0xfffe1df8>
10101f2c:	88c0030b 	ldhu	r3,12(r17)
10101f30:	3005883a 	mov	r2,r6
10101f34:	18c01014 	ori	r3,r3,64
10101f38:	88c0030d 	sth	r3,12(r17)
10101f3c:	003fae06 	br	10101df8 <__alt_data_end+0xfffe1df8>

10101f40 <_fflush_r>:
10101f40:	defffd04 	addi	sp,sp,-12
10101f44:	dc000115 	stw	r16,4(sp)
10101f48:	dfc00215 	stw	ra,8(sp)
10101f4c:	2021883a 	mov	r16,r4
10101f50:	20000226 	beq	r4,zero,10101f5c <_fflush_r+0x1c>
10101f54:	20800e17 	ldw	r2,56(r4)
10101f58:	10000c26 	beq	r2,zero,10101f8c <_fflush_r+0x4c>
10101f5c:	2880030f 	ldh	r2,12(r5)
10101f60:	1000051e 	bne	r2,zero,10101f78 <_fflush_r+0x38>
10101f64:	0005883a 	mov	r2,zero
10101f68:	dfc00217 	ldw	ra,8(sp)
10101f6c:	dc000117 	ldw	r16,4(sp)
10101f70:	dec00304 	addi	sp,sp,12
10101f74:	f800283a 	ret
10101f78:	8009883a 	mov	r4,r16
10101f7c:	dfc00217 	ldw	ra,8(sp)
10101f80:	dc000117 	ldw	r16,4(sp)
10101f84:	dec00304 	addi	sp,sp,12
10101f88:	0101d241 	jmpi	10101d24 <__sflush_r>
10101f8c:	d9400015 	stw	r5,0(sp)
10101f90:	010231c0 	call	1010231c <__sinit>
10101f94:	d9400017 	ldw	r5,0(sp)
10101f98:	003ff006 	br	10101f5c <__alt_data_end+0xfffe1f5c>

10101f9c <fflush>:
10101f9c:	20000526 	beq	r4,zero,10101fb4 <fflush+0x18>
10101fa0:	00840474 	movhi	r2,4113
10101fa4:	108cf104 	addi	r2,r2,13252
10101fa8:	200b883a 	mov	r5,r4
10101fac:	11000017 	ldw	r4,0(r2)
10101fb0:	0101f401 	jmpi	10101f40 <_fflush_r>
10101fb4:	00840474 	movhi	r2,4113
10101fb8:	108cf004 	addi	r2,r2,13248
10101fbc:	11000017 	ldw	r4,0(r2)
10101fc0:	01440434 	movhi	r5,4112
10101fc4:	2947d004 	addi	r5,r5,8000
10101fc8:	0102e981 	jmpi	10102e98 <_fwalk_reent>

10101fcc <__fp_unlock>:
10101fcc:	0005883a 	mov	r2,zero
10101fd0:	f800283a 	ret

10101fd4 <_cleanup_r>:
10101fd4:	01440434 	movhi	r5,4112
10101fd8:	29470804 	addi	r5,r5,7200
10101fdc:	0102e981 	jmpi	10102e98 <_fwalk_reent>

10101fe0 <__sinit.part.1>:
10101fe0:	defff704 	addi	sp,sp,-36
10101fe4:	00c40434 	movhi	r3,4112
10101fe8:	dfc00815 	stw	ra,32(sp)
10101fec:	ddc00715 	stw	r23,28(sp)
10101ff0:	dd800615 	stw	r22,24(sp)
10101ff4:	dd400515 	stw	r21,20(sp)
10101ff8:	dd000415 	stw	r20,16(sp)
10101ffc:	dcc00315 	stw	r19,12(sp)
10102000:	dc800215 	stw	r18,8(sp)
10102004:	dc400115 	stw	r17,4(sp)
10102008:	dc000015 	stw	r16,0(sp)
1010200c:	18c7f504 	addi	r3,r3,8148
10102010:	24000117 	ldw	r16,4(r4)
10102014:	20c00f15 	stw	r3,60(r4)
10102018:	2080bb04 	addi	r2,r4,748
1010201c:	00c000c4 	movi	r3,3
10102020:	20c0b915 	stw	r3,740(r4)
10102024:	2080ba15 	stw	r2,744(r4)
10102028:	2000b815 	stw	zero,736(r4)
1010202c:	05c00204 	movi	r23,8
10102030:	00800104 	movi	r2,4
10102034:	2025883a 	mov	r18,r4
10102038:	b80d883a 	mov	r6,r23
1010203c:	81001704 	addi	r4,r16,92
10102040:	000b883a 	mov	r5,zero
10102044:	80000015 	stw	zero,0(r16)
10102048:	80000115 	stw	zero,4(r16)
1010204c:	80000215 	stw	zero,8(r16)
10102050:	8080030d 	sth	r2,12(r16)
10102054:	80001915 	stw	zero,100(r16)
10102058:	8000038d 	sth	zero,14(r16)
1010205c:	80000415 	stw	zero,16(r16)
10102060:	80000515 	stw	zero,20(r16)
10102064:	80000615 	stw	zero,24(r16)
10102068:	0103a240 	call	10103a24 <memset>
1010206c:	05840434 	movhi	r22,4112
10102070:	94400217 	ldw	r17,8(r18)
10102074:	05440434 	movhi	r21,4112
10102078:	05040434 	movhi	r20,4112
1010207c:	04c40434 	movhi	r19,4112
10102080:	b58fcc04 	addi	r22,r22,16176
10102084:	ad4fe304 	addi	r21,r21,16268
10102088:	a5100204 	addi	r20,r20,16392
1010208c:	9cd01904 	addi	r19,r19,16484
10102090:	85800815 	stw	r22,32(r16)
10102094:	85400915 	stw	r21,36(r16)
10102098:	85000a15 	stw	r20,40(r16)
1010209c:	84c00b15 	stw	r19,44(r16)
101020a0:	84000715 	stw	r16,28(r16)
101020a4:	00800284 	movi	r2,10
101020a8:	8880030d 	sth	r2,12(r17)
101020ac:	00800044 	movi	r2,1
101020b0:	b80d883a 	mov	r6,r23
101020b4:	89001704 	addi	r4,r17,92
101020b8:	000b883a 	mov	r5,zero
101020bc:	88000015 	stw	zero,0(r17)
101020c0:	88000115 	stw	zero,4(r17)
101020c4:	88000215 	stw	zero,8(r17)
101020c8:	88001915 	stw	zero,100(r17)
101020cc:	8880038d 	sth	r2,14(r17)
101020d0:	88000415 	stw	zero,16(r17)
101020d4:	88000515 	stw	zero,20(r17)
101020d8:	88000615 	stw	zero,24(r17)
101020dc:	0103a240 	call	10103a24 <memset>
101020e0:	94000317 	ldw	r16,12(r18)
101020e4:	00800484 	movi	r2,18
101020e8:	8c400715 	stw	r17,28(r17)
101020ec:	8d800815 	stw	r22,32(r17)
101020f0:	8d400915 	stw	r21,36(r17)
101020f4:	8d000a15 	stw	r20,40(r17)
101020f8:	8cc00b15 	stw	r19,44(r17)
101020fc:	8080030d 	sth	r2,12(r16)
10102100:	00800084 	movi	r2,2
10102104:	80000015 	stw	zero,0(r16)
10102108:	80000115 	stw	zero,4(r16)
1010210c:	80000215 	stw	zero,8(r16)
10102110:	80001915 	stw	zero,100(r16)
10102114:	8080038d 	sth	r2,14(r16)
10102118:	80000415 	stw	zero,16(r16)
1010211c:	80000515 	stw	zero,20(r16)
10102120:	80000615 	stw	zero,24(r16)
10102124:	b80d883a 	mov	r6,r23
10102128:	000b883a 	mov	r5,zero
1010212c:	81001704 	addi	r4,r16,92
10102130:	0103a240 	call	10103a24 <memset>
10102134:	00800044 	movi	r2,1
10102138:	84000715 	stw	r16,28(r16)
1010213c:	85800815 	stw	r22,32(r16)
10102140:	85400915 	stw	r21,36(r16)
10102144:	85000a15 	stw	r20,40(r16)
10102148:	84c00b15 	stw	r19,44(r16)
1010214c:	90800e15 	stw	r2,56(r18)
10102150:	dfc00817 	ldw	ra,32(sp)
10102154:	ddc00717 	ldw	r23,28(sp)
10102158:	dd800617 	ldw	r22,24(sp)
1010215c:	dd400517 	ldw	r21,20(sp)
10102160:	dd000417 	ldw	r20,16(sp)
10102164:	dcc00317 	ldw	r19,12(sp)
10102168:	dc800217 	ldw	r18,8(sp)
1010216c:	dc400117 	ldw	r17,4(sp)
10102170:	dc000017 	ldw	r16,0(sp)
10102174:	dec00904 	addi	sp,sp,36
10102178:	f800283a 	ret

1010217c <__fp_lock>:
1010217c:	0005883a 	mov	r2,zero
10102180:	f800283a 	ret

10102184 <__sfmoreglue>:
10102184:	defffc04 	addi	sp,sp,-16
10102188:	dc400115 	stw	r17,4(sp)
1010218c:	2c7fffc4 	addi	r17,r5,-1
10102190:	8c401a24 	muli	r17,r17,104
10102194:	dc800215 	stw	r18,8(sp)
10102198:	2825883a 	mov	r18,r5
1010219c:	89401d04 	addi	r5,r17,116
101021a0:	dc000015 	stw	r16,0(sp)
101021a4:	dfc00315 	stw	ra,12(sp)
101021a8:	01032180 	call	10103218 <_malloc_r>
101021ac:	1021883a 	mov	r16,r2
101021b0:	10000726 	beq	r2,zero,101021d0 <__sfmoreglue+0x4c>
101021b4:	11000304 	addi	r4,r2,12
101021b8:	10000015 	stw	zero,0(r2)
101021bc:	14800115 	stw	r18,4(r2)
101021c0:	11000215 	stw	r4,8(r2)
101021c4:	89801a04 	addi	r6,r17,104
101021c8:	000b883a 	mov	r5,zero
101021cc:	0103a240 	call	10103a24 <memset>
101021d0:	8005883a 	mov	r2,r16
101021d4:	dfc00317 	ldw	ra,12(sp)
101021d8:	dc800217 	ldw	r18,8(sp)
101021dc:	dc400117 	ldw	r17,4(sp)
101021e0:	dc000017 	ldw	r16,0(sp)
101021e4:	dec00404 	addi	sp,sp,16
101021e8:	f800283a 	ret

101021ec <__sfp>:
101021ec:	defffb04 	addi	sp,sp,-20
101021f0:	dc000015 	stw	r16,0(sp)
101021f4:	04040474 	movhi	r16,4113
101021f8:	840cf004 	addi	r16,r16,13248
101021fc:	dcc00315 	stw	r19,12(sp)
10102200:	2027883a 	mov	r19,r4
10102204:	81000017 	ldw	r4,0(r16)
10102208:	dfc00415 	stw	ra,16(sp)
1010220c:	dc800215 	stw	r18,8(sp)
10102210:	20800e17 	ldw	r2,56(r4)
10102214:	dc400115 	stw	r17,4(sp)
10102218:	1000021e 	bne	r2,zero,10102224 <__sfp+0x38>
1010221c:	0101fe00 	call	10101fe0 <__sinit.part.1>
10102220:	81000017 	ldw	r4,0(r16)
10102224:	2480b804 	addi	r18,r4,736
10102228:	047fffc4 	movi	r17,-1
1010222c:	91000117 	ldw	r4,4(r18)
10102230:	94000217 	ldw	r16,8(r18)
10102234:	213fffc4 	addi	r4,r4,-1
10102238:	20000a16 	blt	r4,zero,10102264 <__sfp+0x78>
1010223c:	8080030f 	ldh	r2,12(r16)
10102240:	10000c26 	beq	r2,zero,10102274 <__sfp+0x88>
10102244:	80c01d04 	addi	r3,r16,116
10102248:	00000206 	br	10102254 <__sfp+0x68>
1010224c:	18bfe60f 	ldh	r2,-104(r3)
10102250:	10000826 	beq	r2,zero,10102274 <__sfp+0x88>
10102254:	213fffc4 	addi	r4,r4,-1
10102258:	1c3ffd04 	addi	r16,r3,-12
1010225c:	18c01a04 	addi	r3,r3,104
10102260:	247ffa1e 	bne	r4,r17,1010224c <__alt_data_end+0xfffe224c>
10102264:	90800017 	ldw	r2,0(r18)
10102268:	10001d26 	beq	r2,zero,101022e0 <__sfp+0xf4>
1010226c:	1025883a 	mov	r18,r2
10102270:	003fee06 	br	1010222c <__alt_data_end+0xfffe222c>
10102274:	00bfffc4 	movi	r2,-1
10102278:	8080038d 	sth	r2,14(r16)
1010227c:	00800044 	movi	r2,1
10102280:	8080030d 	sth	r2,12(r16)
10102284:	80001915 	stw	zero,100(r16)
10102288:	80000015 	stw	zero,0(r16)
1010228c:	80000215 	stw	zero,8(r16)
10102290:	80000115 	stw	zero,4(r16)
10102294:	80000415 	stw	zero,16(r16)
10102298:	80000515 	stw	zero,20(r16)
1010229c:	80000615 	stw	zero,24(r16)
101022a0:	01800204 	movi	r6,8
101022a4:	000b883a 	mov	r5,zero
101022a8:	81001704 	addi	r4,r16,92
101022ac:	0103a240 	call	10103a24 <memset>
101022b0:	8005883a 	mov	r2,r16
101022b4:	80000c15 	stw	zero,48(r16)
101022b8:	80000d15 	stw	zero,52(r16)
101022bc:	80001115 	stw	zero,68(r16)
101022c0:	80001215 	stw	zero,72(r16)
101022c4:	dfc00417 	ldw	ra,16(sp)
101022c8:	dcc00317 	ldw	r19,12(sp)
101022cc:	dc800217 	ldw	r18,8(sp)
101022d0:	dc400117 	ldw	r17,4(sp)
101022d4:	dc000017 	ldw	r16,0(sp)
101022d8:	dec00504 	addi	sp,sp,20
101022dc:	f800283a 	ret
101022e0:	01400104 	movi	r5,4
101022e4:	9809883a 	mov	r4,r19
101022e8:	01021840 	call	10102184 <__sfmoreglue>
101022ec:	90800015 	stw	r2,0(r18)
101022f0:	103fde1e 	bne	r2,zero,1010226c <__alt_data_end+0xfffe226c>
101022f4:	00800304 	movi	r2,12
101022f8:	98800015 	stw	r2,0(r19)
101022fc:	0005883a 	mov	r2,zero
10102300:	003ff006 	br	101022c4 <__alt_data_end+0xfffe22c4>

10102304 <_cleanup>:
10102304:	00840474 	movhi	r2,4113
10102308:	108cf004 	addi	r2,r2,13248
1010230c:	11000017 	ldw	r4,0(r2)
10102310:	01440434 	movhi	r5,4112
10102314:	29470804 	addi	r5,r5,7200
10102318:	0102e981 	jmpi	10102e98 <_fwalk_reent>

1010231c <__sinit>:
1010231c:	20800e17 	ldw	r2,56(r4)
10102320:	10000126 	beq	r2,zero,10102328 <__sinit+0xc>
10102324:	f800283a 	ret
10102328:	0101fe01 	jmpi	10101fe0 <__sinit.part.1>

1010232c <__sfp_lock_acquire>:
1010232c:	f800283a 	ret

10102330 <__sfp_lock_release>:
10102330:	f800283a 	ret

10102334 <__sinit_lock_acquire>:
10102334:	f800283a 	ret

10102338 <__sinit_lock_release>:
10102338:	f800283a 	ret

1010233c <__fp_lock_all>:
1010233c:	00840474 	movhi	r2,4113
10102340:	108cf104 	addi	r2,r2,13252
10102344:	11000017 	ldw	r4,0(r2)
10102348:	01440434 	movhi	r5,4112
1010234c:	29485f04 	addi	r5,r5,8572
10102350:	0102dd41 	jmpi	10102dd4 <_fwalk>

10102354 <__fp_unlock_all>:
10102354:	00840474 	movhi	r2,4113
10102358:	108cf104 	addi	r2,r2,13252
1010235c:	11000017 	ldw	r4,0(r2)
10102360:	01440434 	movhi	r5,4112
10102364:	2947f304 	addi	r5,r5,8140
10102368:	0102dd41 	jmpi	10102dd4 <_fwalk>

1010236c <_fopen_r>:
1010236c:	defffa04 	addi	sp,sp,-24
10102370:	3005883a 	mov	r2,r6
10102374:	dcc00415 	stw	r19,16(sp)
10102378:	d80d883a 	mov	r6,sp
1010237c:	2827883a 	mov	r19,r5
10102380:	100b883a 	mov	r5,r2
10102384:	dc800315 	stw	r18,12(sp)
10102388:	dfc00515 	stw	ra,20(sp)
1010238c:	dc400215 	stw	r17,8(sp)
10102390:	dc000115 	stw	r16,4(sp)
10102394:	2025883a 	mov	r18,r4
10102398:	0107e640 	call	10107e64 <__sflags>
1010239c:	10002726 	beq	r2,zero,1010243c <_fopen_r+0xd0>
101023a0:	9009883a 	mov	r4,r18
101023a4:	1023883a 	mov	r17,r2
101023a8:	01021ec0 	call	101021ec <__sfp>
101023ac:	1021883a 	mov	r16,r2
101023b0:	10002226 	beq	r2,zero,1010243c <_fopen_r+0xd0>
101023b4:	d9800017 	ldw	r6,0(sp)
101023b8:	01c06d84 	movi	r7,438
101023bc:	980b883a 	mov	r5,r19
101023c0:	9009883a 	mov	r4,r18
101023c4:	0103b4c0 	call	10103b4c <_open_r>
101023c8:	10001916 	blt	r2,zero,10102430 <_fopen_r+0xc4>
101023cc:	8080038d 	sth	r2,14(r16)
101023d0:	00840434 	movhi	r2,4112
101023d4:	108fcc04 	addi	r2,r2,16176
101023d8:	80800815 	stw	r2,32(r16)
101023dc:	00840434 	movhi	r2,4112
101023e0:	108fe304 	addi	r2,r2,16268
101023e4:	80800915 	stw	r2,36(r16)
101023e8:	00840434 	movhi	r2,4112
101023ec:	10900204 	addi	r2,r2,16392
101023f0:	80800a15 	stw	r2,40(r16)
101023f4:	00840434 	movhi	r2,4112
101023f8:	10901904 	addi	r2,r2,16484
101023fc:	8440030d 	sth	r17,12(r16)
10102400:	84000715 	stw	r16,28(r16)
10102404:	80800b15 	stw	r2,44(r16)
10102408:	8c40400c 	andi	r17,r17,256
1010240c:	88000d1e 	bne	r17,zero,10102444 <_fopen_r+0xd8>
10102410:	8005883a 	mov	r2,r16
10102414:	dfc00517 	ldw	ra,20(sp)
10102418:	dcc00417 	ldw	r19,16(sp)
1010241c:	dc800317 	ldw	r18,12(sp)
10102420:	dc400217 	ldw	r17,8(sp)
10102424:	dc000117 	ldw	r16,4(sp)
10102428:	dec00604 	addi	sp,sp,24
1010242c:	f800283a 	ret
10102430:	010232c0 	call	1010232c <__sfp_lock_acquire>
10102434:	8000030d 	sth	zero,12(r16)
10102438:	01023300 	call	10102330 <__sfp_lock_release>
1010243c:	0005883a 	mov	r2,zero
10102440:	003ff406 	br	10102414 <__alt_data_end+0xfffe2414>
10102444:	01c00084 	movi	r7,2
10102448:	000d883a 	mov	r6,zero
1010244c:	800b883a 	mov	r5,r16
10102450:	9009883a 	mov	r4,r18
10102454:	01028f80 	call	101028f8 <_fseek_r>
10102458:	8005883a 	mov	r2,r16
1010245c:	003fed06 	br	10102414 <__alt_data_end+0xfffe2414>

10102460 <fopen>:
10102460:	00840474 	movhi	r2,4113
10102464:	108cf104 	addi	r2,r2,13252
10102468:	280d883a 	mov	r6,r5
1010246c:	200b883a 	mov	r5,r4
10102470:	11000017 	ldw	r4,0(r2)
10102474:	010236c1 	jmpi	1010236c <_fopen_r>

10102478 <_fprintf_r>:
10102478:	defffe04 	addi	sp,sp,-8
1010247c:	2809883a 	mov	r4,r5
10102480:	300b883a 	mov	r5,r6
10102484:	dfc00015 	stw	ra,0(sp)
10102488:	d9c00115 	stw	r7,4(sp)
1010248c:	d9800104 	addi	r6,sp,4
10102490:	01062fc0 	call	101062fc <__vfprintf_internal>
10102494:	dfc00017 	ldw	ra,0(sp)
10102498:	dec00204 	addi	sp,sp,8
1010249c:	f800283a 	ret

101024a0 <fprintf>:
101024a0:	defffd04 	addi	sp,sp,-12
101024a4:	dfc00015 	stw	ra,0(sp)
101024a8:	d9800115 	stw	r6,4(sp)
101024ac:	d9c00215 	stw	r7,8(sp)
101024b0:	d9800104 	addi	r6,sp,4
101024b4:	01062fc0 	call	101062fc <__vfprintf_internal>
101024b8:	dfc00017 	ldw	ra,0(sp)
101024bc:	dec00304 	addi	sp,sp,12
101024c0:	f800283a 	ret

101024c4 <_malloc_trim_r>:
101024c4:	defffb04 	addi	sp,sp,-20
101024c8:	dcc00315 	stw	r19,12(sp)
101024cc:	04c40474 	movhi	r19,4113
101024d0:	dc800215 	stw	r18,8(sp)
101024d4:	dc400115 	stw	r17,4(sp)
101024d8:	dc000015 	stw	r16,0(sp)
101024dc:	dfc00415 	stw	ra,16(sp)
101024e0:	2821883a 	mov	r16,r5
101024e4:	9cc74e04 	addi	r19,r19,7480
101024e8:	2025883a 	mov	r18,r4
101024ec:	010f57c0 	call	1010f57c <__malloc_lock>
101024f0:	98800217 	ldw	r2,8(r19)
101024f4:	14400117 	ldw	r17,4(r2)
101024f8:	00bfff04 	movi	r2,-4
101024fc:	88a2703a 	and	r17,r17,r2
10102500:	8c21c83a 	sub	r16,r17,r16
10102504:	8403fbc4 	addi	r16,r16,4079
10102508:	8020d33a 	srli	r16,r16,12
1010250c:	0083ffc4 	movi	r2,4095
10102510:	843fffc4 	addi	r16,r16,-1
10102514:	8020933a 	slli	r16,r16,12
10102518:	1400060e 	bge	r2,r16,10102534 <_malloc_trim_r+0x70>
1010251c:	000b883a 	mov	r5,zero
10102520:	9009883a 	mov	r4,r18
10102524:	0103edc0 	call	10103edc <_sbrk_r>
10102528:	98c00217 	ldw	r3,8(r19)
1010252c:	1c47883a 	add	r3,r3,r17
10102530:	10c00a26 	beq	r2,r3,1010255c <_malloc_trim_r+0x98>
10102534:	9009883a 	mov	r4,r18
10102538:	010f5a00 	call	1010f5a0 <__malloc_unlock>
1010253c:	0005883a 	mov	r2,zero
10102540:	dfc00417 	ldw	ra,16(sp)
10102544:	dcc00317 	ldw	r19,12(sp)
10102548:	dc800217 	ldw	r18,8(sp)
1010254c:	dc400117 	ldw	r17,4(sp)
10102550:	dc000017 	ldw	r16,0(sp)
10102554:	dec00504 	addi	sp,sp,20
10102558:	f800283a 	ret
1010255c:	040bc83a 	sub	r5,zero,r16
10102560:	9009883a 	mov	r4,r18
10102564:	0103edc0 	call	10103edc <_sbrk_r>
10102568:	00ffffc4 	movi	r3,-1
1010256c:	10c00d26 	beq	r2,r3,101025a4 <_malloc_trim_r+0xe0>
10102570:	00c40474 	movhi	r3,4113
10102574:	18d3cb04 	addi	r3,r3,20268
10102578:	18800017 	ldw	r2,0(r3)
1010257c:	99000217 	ldw	r4,8(r19)
10102580:	8c23c83a 	sub	r17,r17,r16
10102584:	8c400054 	ori	r17,r17,1
10102588:	1421c83a 	sub	r16,r2,r16
1010258c:	24400115 	stw	r17,4(r4)
10102590:	9009883a 	mov	r4,r18
10102594:	1c000015 	stw	r16,0(r3)
10102598:	010f5a00 	call	1010f5a0 <__malloc_unlock>
1010259c:	00800044 	movi	r2,1
101025a0:	003fe706 	br	10102540 <__alt_data_end+0xfffe2540>
101025a4:	000b883a 	mov	r5,zero
101025a8:	9009883a 	mov	r4,r18
101025ac:	0103edc0 	call	10103edc <_sbrk_r>
101025b0:	99000217 	ldw	r4,8(r19)
101025b4:	014003c4 	movi	r5,15
101025b8:	1107c83a 	sub	r3,r2,r4
101025bc:	28ffdd0e 	bge	r5,r3,10102534 <__alt_data_end+0xfffe2534>
101025c0:	01440474 	movhi	r5,4113
101025c4:	294cf204 	addi	r5,r5,13256
101025c8:	29400017 	ldw	r5,0(r5)
101025cc:	18c00054 	ori	r3,r3,1
101025d0:	20c00115 	stw	r3,4(r4)
101025d4:	00c40474 	movhi	r3,4113
101025d8:	1145c83a 	sub	r2,r2,r5
101025dc:	18d3cb04 	addi	r3,r3,20268
101025e0:	18800015 	stw	r2,0(r3)
101025e4:	003fd306 	br	10102534 <__alt_data_end+0xfffe2534>

101025e8 <_free_r>:
101025e8:	28004126 	beq	r5,zero,101026f0 <_free_r+0x108>
101025ec:	defffd04 	addi	sp,sp,-12
101025f0:	dc400115 	stw	r17,4(sp)
101025f4:	dc000015 	stw	r16,0(sp)
101025f8:	2023883a 	mov	r17,r4
101025fc:	2821883a 	mov	r16,r5
10102600:	dfc00215 	stw	ra,8(sp)
10102604:	010f57c0 	call	1010f57c <__malloc_lock>
10102608:	81ffff17 	ldw	r7,-4(r16)
1010260c:	00bfff84 	movi	r2,-2
10102610:	01040474 	movhi	r4,4113
10102614:	81bffe04 	addi	r6,r16,-8
10102618:	3884703a 	and	r2,r7,r2
1010261c:	21074e04 	addi	r4,r4,7480
10102620:	308b883a 	add	r5,r6,r2
10102624:	2a400117 	ldw	r9,4(r5)
10102628:	22000217 	ldw	r8,8(r4)
1010262c:	00ffff04 	movi	r3,-4
10102630:	48c6703a 	and	r3,r9,r3
10102634:	2a005726 	beq	r5,r8,10102794 <_free_r+0x1ac>
10102638:	28c00115 	stw	r3,4(r5)
1010263c:	39c0004c 	andi	r7,r7,1
10102640:	3800091e 	bne	r7,zero,10102668 <_free_r+0x80>
10102644:	823ffe17 	ldw	r8,-8(r16)
10102648:	22400204 	addi	r9,r4,8
1010264c:	320dc83a 	sub	r6,r6,r8
10102650:	31c00217 	ldw	r7,8(r6)
10102654:	1205883a 	add	r2,r2,r8
10102658:	3a406526 	beq	r7,r9,101027f0 <_free_r+0x208>
1010265c:	32000317 	ldw	r8,12(r6)
10102660:	3a000315 	stw	r8,12(r7)
10102664:	41c00215 	stw	r7,8(r8)
10102668:	28cf883a 	add	r7,r5,r3
1010266c:	39c00117 	ldw	r7,4(r7)
10102670:	39c0004c 	andi	r7,r7,1
10102674:	38003a26 	beq	r7,zero,10102760 <_free_r+0x178>
10102678:	10c00054 	ori	r3,r2,1
1010267c:	30c00115 	stw	r3,4(r6)
10102680:	3087883a 	add	r3,r6,r2
10102684:	18800015 	stw	r2,0(r3)
10102688:	00c07fc4 	movi	r3,511
1010268c:	18801936 	bltu	r3,r2,101026f4 <_free_r+0x10c>
10102690:	1004d0fa 	srli	r2,r2,3
10102694:	01c00044 	movi	r7,1
10102698:	21400117 	ldw	r5,4(r4)
1010269c:	10c00044 	addi	r3,r2,1
101026a0:	18c7883a 	add	r3,r3,r3
101026a4:	1005d0ba 	srai	r2,r2,2
101026a8:	18c7883a 	add	r3,r3,r3
101026ac:	18c7883a 	add	r3,r3,r3
101026b0:	1907883a 	add	r3,r3,r4
101026b4:	3884983a 	sll	r2,r7,r2
101026b8:	19c00017 	ldw	r7,0(r3)
101026bc:	1a3ffe04 	addi	r8,r3,-8
101026c0:	1144b03a 	or	r2,r2,r5
101026c4:	32000315 	stw	r8,12(r6)
101026c8:	31c00215 	stw	r7,8(r6)
101026cc:	20800115 	stw	r2,4(r4)
101026d0:	19800015 	stw	r6,0(r3)
101026d4:	39800315 	stw	r6,12(r7)
101026d8:	8809883a 	mov	r4,r17
101026dc:	dfc00217 	ldw	ra,8(sp)
101026e0:	dc400117 	ldw	r17,4(sp)
101026e4:	dc000017 	ldw	r16,0(sp)
101026e8:	dec00304 	addi	sp,sp,12
101026ec:	010f5a01 	jmpi	1010f5a0 <__malloc_unlock>
101026f0:	f800283a 	ret
101026f4:	100ad27a 	srli	r5,r2,9
101026f8:	00c00104 	movi	r3,4
101026fc:	19404a36 	bltu	r3,r5,10102828 <_free_r+0x240>
10102700:	100ad1ba 	srli	r5,r2,6
10102704:	28c00e44 	addi	r3,r5,57
10102708:	18c7883a 	add	r3,r3,r3
1010270c:	29400e04 	addi	r5,r5,56
10102710:	18c7883a 	add	r3,r3,r3
10102714:	18c7883a 	add	r3,r3,r3
10102718:	1909883a 	add	r4,r3,r4
1010271c:	20c00017 	ldw	r3,0(r4)
10102720:	01c40474 	movhi	r7,4113
10102724:	213ffe04 	addi	r4,r4,-8
10102728:	39c74e04 	addi	r7,r7,7480
1010272c:	20c04426 	beq	r4,r3,10102840 <_free_r+0x258>
10102730:	01ffff04 	movi	r7,-4
10102734:	19400117 	ldw	r5,4(r3)
10102738:	29ca703a 	and	r5,r5,r7
1010273c:	1140022e 	bgeu	r2,r5,10102748 <_free_r+0x160>
10102740:	18c00217 	ldw	r3,8(r3)
10102744:	20fffb1e 	bne	r4,r3,10102734 <__alt_data_end+0xfffe2734>
10102748:	19000317 	ldw	r4,12(r3)
1010274c:	31000315 	stw	r4,12(r6)
10102750:	30c00215 	stw	r3,8(r6)
10102754:	21800215 	stw	r6,8(r4)
10102758:	19800315 	stw	r6,12(r3)
1010275c:	003fde06 	br	101026d8 <__alt_data_end+0xfffe26d8>
10102760:	29c00217 	ldw	r7,8(r5)
10102764:	10c5883a 	add	r2,r2,r3
10102768:	00c40474 	movhi	r3,4113
1010276c:	18c75004 	addi	r3,r3,7488
10102770:	38c03b26 	beq	r7,r3,10102860 <_free_r+0x278>
10102774:	2a000317 	ldw	r8,12(r5)
10102778:	11400054 	ori	r5,r2,1
1010277c:	3087883a 	add	r3,r6,r2
10102780:	3a000315 	stw	r8,12(r7)
10102784:	41c00215 	stw	r7,8(r8)
10102788:	31400115 	stw	r5,4(r6)
1010278c:	18800015 	stw	r2,0(r3)
10102790:	003fbd06 	br	10102688 <__alt_data_end+0xfffe2688>
10102794:	39c0004c 	andi	r7,r7,1
10102798:	10c5883a 	add	r2,r2,r3
1010279c:	3800071e 	bne	r7,zero,101027bc <_free_r+0x1d4>
101027a0:	81fffe17 	ldw	r7,-8(r16)
101027a4:	31cdc83a 	sub	r6,r6,r7
101027a8:	30c00317 	ldw	r3,12(r6)
101027ac:	31400217 	ldw	r5,8(r6)
101027b0:	11c5883a 	add	r2,r2,r7
101027b4:	28c00315 	stw	r3,12(r5)
101027b8:	19400215 	stw	r5,8(r3)
101027bc:	10c00054 	ori	r3,r2,1
101027c0:	30c00115 	stw	r3,4(r6)
101027c4:	00c40474 	movhi	r3,4113
101027c8:	18ccf304 	addi	r3,r3,13260
101027cc:	18c00017 	ldw	r3,0(r3)
101027d0:	21800215 	stw	r6,8(r4)
101027d4:	10ffc036 	bltu	r2,r3,101026d8 <__alt_data_end+0xfffe26d8>
101027d8:	00840474 	movhi	r2,4113
101027dc:	1093c004 	addi	r2,r2,20224
101027e0:	11400017 	ldw	r5,0(r2)
101027e4:	8809883a 	mov	r4,r17
101027e8:	01024c40 	call	101024c4 <_malloc_trim_r>
101027ec:	003fba06 	br	101026d8 <__alt_data_end+0xfffe26d8>
101027f0:	28c9883a 	add	r4,r5,r3
101027f4:	21000117 	ldw	r4,4(r4)
101027f8:	2100004c 	andi	r4,r4,1
101027fc:	2000391e 	bne	r4,zero,101028e4 <_free_r+0x2fc>
10102800:	29c00217 	ldw	r7,8(r5)
10102804:	29000317 	ldw	r4,12(r5)
10102808:	1885883a 	add	r2,r3,r2
1010280c:	10c00054 	ori	r3,r2,1
10102810:	39000315 	stw	r4,12(r7)
10102814:	21c00215 	stw	r7,8(r4)
10102818:	30c00115 	stw	r3,4(r6)
1010281c:	308d883a 	add	r6,r6,r2
10102820:	30800015 	stw	r2,0(r6)
10102824:	003fac06 	br	101026d8 <__alt_data_end+0xfffe26d8>
10102828:	00c00504 	movi	r3,20
1010282c:	19401536 	bltu	r3,r5,10102884 <_free_r+0x29c>
10102830:	28c01704 	addi	r3,r5,92
10102834:	18c7883a 	add	r3,r3,r3
10102838:	294016c4 	addi	r5,r5,91
1010283c:	003fb406 	br	10102710 <__alt_data_end+0xfffe2710>
10102840:	280bd0ba 	srai	r5,r5,2
10102844:	00c00044 	movi	r3,1
10102848:	38800117 	ldw	r2,4(r7)
1010284c:	194a983a 	sll	r5,r3,r5
10102850:	2007883a 	mov	r3,r4
10102854:	2884b03a 	or	r2,r5,r2
10102858:	38800115 	stw	r2,4(r7)
1010285c:	003fbb06 	br	1010274c <__alt_data_end+0xfffe274c>
10102860:	21800515 	stw	r6,20(r4)
10102864:	21800415 	stw	r6,16(r4)
10102868:	10c00054 	ori	r3,r2,1
1010286c:	31c00315 	stw	r7,12(r6)
10102870:	31c00215 	stw	r7,8(r6)
10102874:	30c00115 	stw	r3,4(r6)
10102878:	308d883a 	add	r6,r6,r2
1010287c:	30800015 	stw	r2,0(r6)
10102880:	003f9506 	br	101026d8 <__alt_data_end+0xfffe26d8>
10102884:	00c01504 	movi	r3,84
10102888:	19400536 	bltu	r3,r5,101028a0 <_free_r+0x2b8>
1010288c:	100ad33a 	srli	r5,r2,12
10102890:	28c01bc4 	addi	r3,r5,111
10102894:	18c7883a 	add	r3,r3,r3
10102898:	29401b84 	addi	r5,r5,110
1010289c:	003f9c06 	br	10102710 <__alt_data_end+0xfffe2710>
101028a0:	00c05504 	movi	r3,340
101028a4:	19400536 	bltu	r3,r5,101028bc <_free_r+0x2d4>
101028a8:	100ad3fa 	srli	r5,r2,15
101028ac:	28c01e04 	addi	r3,r5,120
101028b0:	18c7883a 	add	r3,r3,r3
101028b4:	29401dc4 	addi	r5,r5,119
101028b8:	003f9506 	br	10102710 <__alt_data_end+0xfffe2710>
101028bc:	00c15504 	movi	r3,1364
101028c0:	19400536 	bltu	r3,r5,101028d8 <_free_r+0x2f0>
101028c4:	100ad4ba 	srli	r5,r2,18
101028c8:	28c01f44 	addi	r3,r5,125
101028cc:	18c7883a 	add	r3,r3,r3
101028d0:	29401f04 	addi	r5,r5,124
101028d4:	003f8e06 	br	10102710 <__alt_data_end+0xfffe2710>
101028d8:	00c03f84 	movi	r3,254
101028dc:	01401f84 	movi	r5,126
101028e0:	003f8b06 	br	10102710 <__alt_data_end+0xfffe2710>
101028e4:	10c00054 	ori	r3,r2,1
101028e8:	30c00115 	stw	r3,4(r6)
101028ec:	308d883a 	add	r6,r6,r2
101028f0:	30800015 	stw	r2,0(r6)
101028f4:	003f7806 	br	101026d8 <__alt_data_end+0xfffe26d8>

101028f8 <_fseek_r>:
101028f8:	01029181 	jmpi	10102918 <_fseeko_r>

101028fc <fseek>:
101028fc:	00840474 	movhi	r2,4113
10102900:	108cf104 	addi	r2,r2,13252
10102904:	300f883a 	mov	r7,r6
10102908:	280d883a 	mov	r6,r5
1010290c:	200b883a 	mov	r5,r4
10102910:	11000017 	ldw	r4,0(r2)
10102914:	01029181 	jmpi	10102918 <_fseeko_r>

10102918 <_fseeko_r>:
10102918:	deffe804 	addi	sp,sp,-96
1010291c:	dd401415 	stw	r21,80(sp)
10102920:	dc801115 	stw	r18,68(sp)
10102924:	dc401015 	stw	r17,64(sp)
10102928:	dc000f15 	stw	r16,60(sp)
1010292c:	dfc01715 	stw	ra,92(sp)
10102930:	ddc01615 	stw	r23,88(sp)
10102934:	dd801515 	stw	r22,84(sp)
10102938:	dd001315 	stw	r20,76(sp)
1010293c:	dcc01215 	stw	r19,72(sp)
10102940:	2023883a 	mov	r17,r4
10102944:	2821883a 	mov	r16,r5
10102948:	302b883a 	mov	r21,r6
1010294c:	3825883a 	mov	r18,r7
10102950:	20000226 	beq	r4,zero,1010295c <_fseeko_r+0x44>
10102954:	20800e17 	ldw	r2,56(r4)
10102958:	10005a26 	beq	r2,zero,10102ac4 <_fseeko_r+0x1ac>
1010295c:	8080030b 	ldhu	r2,12(r16)
10102960:	00c04204 	movi	r3,264
10102964:	1080420c 	andi	r2,r2,264
10102968:	10c05b26 	beq	r2,r3,10102ad8 <_fseeko_r+0x1c0>
1010296c:	85000a17 	ldw	r20,40(r16)
10102970:	a000f626 	beq	r20,zero,10102d4c <_fseeko_r+0x434>
10102974:	00800044 	movi	r2,1
10102978:	90803e26 	beq	r18,r2,10102a74 <_fseeko_r+0x15c>
1010297c:	00800084 	movi	r2,2
10102980:	90801026 	beq	r18,r2,101029c4 <_fseeko_r+0xac>
10102984:	90000f26 	beq	r18,zero,101029c4 <_fseeko_r+0xac>
10102988:	00800584 	movi	r2,22
1010298c:	88800015 	stw	r2,0(r17)
10102990:	04ffffc4 	movi	r19,-1
10102994:	9805883a 	mov	r2,r19
10102998:	dfc01717 	ldw	ra,92(sp)
1010299c:	ddc01617 	ldw	r23,88(sp)
101029a0:	dd801517 	ldw	r22,84(sp)
101029a4:	dd401417 	ldw	r21,80(sp)
101029a8:	dd001317 	ldw	r20,76(sp)
101029ac:	dcc01217 	ldw	r19,72(sp)
101029b0:	dc801117 	ldw	r18,68(sp)
101029b4:	dc401017 	ldw	r17,64(sp)
101029b8:	dc000f17 	ldw	r16,60(sp)
101029bc:	dec01804 	addi	sp,sp,96
101029c0:	f800283a 	ret
101029c4:	80800417 	ldw	r2,16(r16)
101029c8:	002f883a 	mov	r23,zero
101029cc:	0027883a 	mov	r19,zero
101029d0:	1000cb26 	beq	r2,zero,10102d00 <_fseeko_r+0x3e8>
101029d4:	8080030b 	ldhu	r2,12(r16)
101029d8:	10c2068c 	andi	r3,r2,2074
101029dc:	1800071e 	bne	r3,zero,101029fc <_fseeko_r+0xe4>
101029e0:	10c1000c 	andi	r3,r2,1024
101029e4:	1800451e 	bne	r3,zero,10102afc <_fseeko_r+0x1e4>
101029e8:	00c40434 	movhi	r3,4112
101029ec:	18d00204 	addi	r3,r3,16392
101029f0:	a0c0b726 	beq	r20,r3,10102cd0 <_fseeko_r+0x3b8>
101029f4:	10820014 	ori	r2,r2,2048
101029f8:	8080030d 	sth	r2,12(r16)
101029fc:	800b883a 	mov	r5,r16
10102a00:	8809883a 	mov	r4,r17
10102a04:	0101f400 	call	10101f40 <_fflush_r>
10102a08:	1027883a 	mov	r19,r2
10102a0c:	103fe01e 	bne	r2,zero,10102990 <__alt_data_end+0xfffe2990>
10102a10:	81400717 	ldw	r5,28(r16)
10102a14:	900f883a 	mov	r7,r18
10102a18:	a80d883a 	mov	r6,r21
10102a1c:	8809883a 	mov	r4,r17
10102a20:	a03ee83a 	callr	r20
10102a24:	00ffffc4 	movi	r3,-1
10102a28:	10ffd926 	beq	r2,r3,10102990 <__alt_data_end+0xfffe2990>
10102a2c:	81400c17 	ldw	r5,48(r16)
10102a30:	28000526 	beq	r5,zero,10102a48 <_fseeko_r+0x130>
10102a34:	80801004 	addi	r2,r16,64
10102a38:	28800226 	beq	r5,r2,10102a44 <_fseeko_r+0x12c>
10102a3c:	8809883a 	mov	r4,r17
10102a40:	01025e80 	call	101025e8 <_free_r>
10102a44:	80000c15 	stw	zero,48(r16)
10102a48:	8080030b 	ldhu	r2,12(r16)
10102a4c:	80c00417 	ldw	r3,16(r16)
10102a50:	80000115 	stw	zero,4(r16)
10102a54:	10bdf7cc 	andi	r2,r2,63455
10102a58:	80c00015 	stw	r3,0(r16)
10102a5c:	8080030d 	sth	r2,12(r16)
10102a60:	01800204 	movi	r6,8
10102a64:	000b883a 	mov	r5,zero
10102a68:	81001704 	addi	r4,r16,92
10102a6c:	0103a240 	call	10103a24 <memset>
10102a70:	003fc806 	br	10102994 <__alt_data_end+0xfffe2994>
10102a74:	800b883a 	mov	r5,r16
10102a78:	8809883a 	mov	r4,r17
10102a7c:	0101f400 	call	10101f40 <_fflush_r>
10102a80:	8080030b 	ldhu	r2,12(r16)
10102a84:	10c4000c 	andi	r3,r2,4096
10102a88:	18008726 	beq	r3,zero,10102ca8 <_fseeko_r+0x390>
10102a8c:	84c01417 	ldw	r19,80(r16)
10102a90:	10c0010c 	andi	r3,r2,4
10102a94:	1800431e 	bne	r3,zero,10102ba4 <_fseeko_r+0x28c>
10102a98:	1080020c 	andi	r2,r2,8
10102a9c:	10008026 	beq	r2,zero,10102ca0 <_fseeko_r+0x388>
10102aa0:	80c00017 	ldw	r3,0(r16)
10102aa4:	80800417 	ldw	r2,16(r16)
10102aa8:	18000226 	beq	r3,zero,10102ab4 <_fseeko_r+0x19c>
10102aac:	1887c83a 	sub	r3,r3,r2
10102ab0:	98e7883a 	add	r19,r19,r3
10102ab4:	aceb883a 	add	r21,r21,r19
10102ab8:	05c00044 	movi	r23,1
10102abc:	0025883a 	mov	r18,zero
10102ac0:	003fc306 	br	101029d0 <__alt_data_end+0xfffe29d0>
10102ac4:	010231c0 	call	1010231c <__sinit>
10102ac8:	8080030b 	ldhu	r2,12(r16)
10102acc:	00c04204 	movi	r3,264
10102ad0:	1080420c 	andi	r2,r2,264
10102ad4:	10ffa51e 	bne	r2,r3,1010296c <__alt_data_end+0xfffe296c>
10102ad8:	800b883a 	mov	r5,r16
10102adc:	8809883a 	mov	r4,r17
10102ae0:	0101f400 	call	10101f40 <_fflush_r>
10102ae4:	003fa106 	br	1010296c <__alt_data_end+0xfffe296c>
10102ae8:	8080030b 	ldhu	r2,12(r16)
10102aec:	00c10004 	movi	r3,1024
10102af0:	80c01315 	stw	r3,76(r16)
10102af4:	10c4b03a 	or	r2,r2,r3
10102af8:	8080030d 	sth	r2,12(r16)
10102afc:	9000311e 	bne	r18,zero,10102bc4 <_fseeko_r+0x2ac>
10102b00:	a82d883a 	mov	r22,r21
10102b04:	b800371e 	bne	r23,zero,10102be4 <_fseeko_r+0x2cc>
10102b08:	8080030b 	ldhu	r2,12(r16)
10102b0c:	1084000c 	andi	r2,r2,4096
10102b10:	10007f26 	beq	r2,zero,10102d10 <_fseeko_r+0x3f8>
10102b14:	80801417 	ldw	r2,80(r16)
10102b18:	81800117 	ldw	r6,4(r16)
10102b1c:	81400c17 	ldw	r5,48(r16)
10102b20:	11a7c83a 	sub	r19,r2,r6
10102b24:	28008226 	beq	r5,zero,10102d30 <_fseeko_r+0x418>
10102b28:	81c00f17 	ldw	r7,60(r16)
10102b2c:	99e7c83a 	sub	r19,r19,r7
10102b30:	81000e17 	ldw	r4,56(r16)
10102b34:	80800417 	ldw	r2,16(r16)
10102b38:	99a7883a 	add	r19,r19,r6
10102b3c:	2087c83a 	sub	r3,r4,r2
10102b40:	98e7c83a 	sub	r19,r19,r3
10102b44:	38c7883a 	add	r3,r7,r3
10102b48:	b4c02b16 	blt	r22,r19,10102bf8 <_fseeko_r+0x2e0>
10102b4c:	98c9883a 	add	r4,r19,r3
10102b50:	b100292e 	bgeu	r22,r4,10102bf8 <_fseeko_r+0x2e0>
10102b54:	b4e7c83a 	sub	r19,r22,r19
10102b58:	14c5883a 	add	r2,r2,r19
10102b5c:	1ce7c83a 	sub	r19,r3,r19
10102b60:	80800015 	stw	r2,0(r16)
10102b64:	84c00115 	stw	r19,4(r16)
10102b68:	28000526 	beq	r5,zero,10102b80 <_fseeko_r+0x268>
10102b6c:	80801004 	addi	r2,r16,64
10102b70:	28800226 	beq	r5,r2,10102b7c <_fseeko_r+0x264>
10102b74:	8809883a 	mov	r4,r17
10102b78:	01025e80 	call	101025e8 <_free_r>
10102b7c:	80000c15 	stw	zero,48(r16)
10102b80:	8080030b 	ldhu	r2,12(r16)
10102b84:	01800204 	movi	r6,8
10102b88:	000b883a 	mov	r5,zero
10102b8c:	10bff7cc 	andi	r2,r2,65503
10102b90:	8080030d 	sth	r2,12(r16)
10102b94:	81001704 	addi	r4,r16,92
10102b98:	0103a240 	call	10103a24 <memset>
10102b9c:	0027883a 	mov	r19,zero
10102ba0:	003f7c06 	br	10102994 <__alt_data_end+0xfffe2994>
10102ba4:	80c00117 	ldw	r3,4(r16)
10102ba8:	80800c17 	ldw	r2,48(r16)
10102bac:	98e7c83a 	sub	r19,r19,r3
10102bb0:	10003b26 	beq	r2,zero,10102ca0 <_fseeko_r+0x388>
10102bb4:	80c00f17 	ldw	r3,60(r16)
10102bb8:	80800417 	ldw	r2,16(r16)
10102bbc:	98e7c83a 	sub	r19,r19,r3
10102bc0:	003fbc06 	br	10102ab4 <__alt_data_end+0xfffe2ab4>
10102bc4:	8140038f 	ldh	r5,14(r16)
10102bc8:	d80d883a 	mov	r6,sp
10102bcc:	8809883a 	mov	r4,r17
10102bd0:	0102d780 	call	10102d78 <_fstat_r>
10102bd4:	103f891e 	bne	r2,zero,101029fc <__alt_data_end+0xfffe29fc>
10102bd8:	dd800417 	ldw	r22,16(sp)
10102bdc:	adad883a 	add	r22,r21,r22
10102be0:	b83fc926 	beq	r23,zero,10102b08 <__alt_data_end+0xfffe2b08>
10102be4:	81400c17 	ldw	r5,48(r16)
10102be8:	81800117 	ldw	r6,4(r16)
10102bec:	28005026 	beq	r5,zero,10102d30 <_fseeko_r+0x418>
10102bf0:	81c00f17 	ldw	r7,60(r16)
10102bf4:	003fce06 	br	10102b30 <__alt_data_end+0xfffe2b30>
10102bf8:	84c01317 	ldw	r19,76(r16)
10102bfc:	81400717 	ldw	r5,28(r16)
10102c00:	000f883a 	mov	r7,zero
10102c04:	04e7c83a 	sub	r19,zero,r19
10102c08:	9da6703a 	and	r19,r19,r22
10102c0c:	980d883a 	mov	r6,r19
10102c10:	8809883a 	mov	r4,r17
10102c14:	a03ee83a 	callr	r20
10102c18:	00ffffc4 	movi	r3,-1
10102c1c:	10ff7726 	beq	r2,r3,101029fc <__alt_data_end+0xfffe29fc>
10102c20:	80800417 	ldw	r2,16(r16)
10102c24:	81400c17 	ldw	r5,48(r16)
10102c28:	80000115 	stw	zero,4(r16)
10102c2c:	80800015 	stw	r2,0(r16)
10102c30:	28000526 	beq	r5,zero,10102c48 <_fseeko_r+0x330>
10102c34:	80801004 	addi	r2,r16,64
10102c38:	28800226 	beq	r5,r2,10102c44 <_fseeko_r+0x32c>
10102c3c:	8809883a 	mov	r4,r17
10102c40:	01025e80 	call	101025e8 <_free_r>
10102c44:	80000c15 	stw	zero,48(r16)
10102c48:	8080030b 	ldhu	r2,12(r16)
10102c4c:	b4e7c83a 	sub	r19,r22,r19
10102c50:	10bff7cc 	andi	r2,r2,65503
10102c54:	8080030d 	sth	r2,12(r16)
10102c58:	98000b26 	beq	r19,zero,10102c88 <_fseeko_r+0x370>
10102c5c:	800b883a 	mov	r5,r16
10102c60:	8809883a 	mov	r4,r17
10102c64:	0103d080 	call	10103d08 <__srefill_r>
10102c68:	103f641e 	bne	r2,zero,101029fc <__alt_data_end+0xfffe29fc>
10102c6c:	80800117 	ldw	r2,4(r16)
10102c70:	14ff6236 	bltu	r2,r19,101029fc <__alt_data_end+0xfffe29fc>
10102c74:	80c00017 	ldw	r3,0(r16)
10102c78:	14c5c83a 	sub	r2,r2,r19
10102c7c:	80800115 	stw	r2,4(r16)
10102c80:	1ce7883a 	add	r19,r3,r19
10102c84:	84c00015 	stw	r19,0(r16)
10102c88:	01800204 	movi	r6,8
10102c8c:	000b883a 	mov	r5,zero
10102c90:	81001704 	addi	r4,r16,92
10102c94:	0103a240 	call	10103a24 <memset>
10102c98:	0027883a 	mov	r19,zero
10102c9c:	003f3d06 	br	10102994 <__alt_data_end+0xfffe2994>
10102ca0:	80800417 	ldw	r2,16(r16)
10102ca4:	003f8306 	br	10102ab4 <__alt_data_end+0xfffe2ab4>
10102ca8:	81400717 	ldw	r5,28(r16)
10102cac:	900f883a 	mov	r7,r18
10102cb0:	000d883a 	mov	r6,zero
10102cb4:	8809883a 	mov	r4,r17
10102cb8:	a03ee83a 	callr	r20
10102cbc:	1027883a 	mov	r19,r2
10102cc0:	00bfffc4 	movi	r2,-1
10102cc4:	98bf3226 	beq	r19,r2,10102990 <__alt_data_end+0xfffe2990>
10102cc8:	8080030b 	ldhu	r2,12(r16)
10102ccc:	003f7006 	br	10102a90 <__alt_data_end+0xfffe2a90>
10102cd0:	8140038f 	ldh	r5,14(r16)
10102cd4:	283f4716 	blt	r5,zero,101029f4 <__alt_data_end+0xfffe29f4>
10102cd8:	d80d883a 	mov	r6,sp
10102cdc:	8809883a 	mov	r4,r17
10102ce0:	0102d780 	call	10102d78 <_fstat_r>
10102ce4:	1000041e 	bne	r2,zero,10102cf8 <_fseeko_r+0x3e0>
10102ce8:	d8800117 	ldw	r2,4(sp)
10102cec:	00e00014 	movui	r3,32768
10102cf0:	10bc000c 	andi	r2,r2,61440
10102cf4:	10ff7c26 	beq	r2,r3,10102ae8 <__alt_data_end+0xfffe2ae8>
10102cf8:	8080030b 	ldhu	r2,12(r16)
10102cfc:	003f3d06 	br	101029f4 <__alt_data_end+0xfffe29f4>
10102d00:	800b883a 	mov	r5,r16
10102d04:	8809883a 	mov	r4,r17
10102d08:	010305c0 	call	1010305c <__smakebuf_r>
10102d0c:	003f3106 	br	101029d4 <__alt_data_end+0xfffe29d4>
10102d10:	81400717 	ldw	r5,28(r16)
10102d14:	01c00044 	movi	r7,1
10102d18:	000d883a 	mov	r6,zero
10102d1c:	8809883a 	mov	r4,r17
10102d20:	a03ee83a 	callr	r20
10102d24:	00ffffc4 	movi	r3,-1
10102d28:	10ff7b1e 	bne	r2,r3,10102b18 <__alt_data_end+0xfffe2b18>
10102d2c:	003f3306 	br	101029fc <__alt_data_end+0xfffe29fc>
10102d30:	80c00017 	ldw	r3,0(r16)
10102d34:	80800417 	ldw	r2,16(r16)
10102d38:	000b883a 	mov	r5,zero
10102d3c:	1887c83a 	sub	r3,r3,r2
10102d40:	98e7c83a 	sub	r19,r19,r3
10102d44:	30c7883a 	add	r3,r6,r3
10102d48:	003f7f06 	br	10102b48 <__alt_data_end+0xfffe2b48>
10102d4c:	00800744 	movi	r2,29
10102d50:	88800015 	stw	r2,0(r17)
10102d54:	04ffffc4 	movi	r19,-1
10102d58:	003f0e06 	br	10102994 <__alt_data_end+0xfffe2994>

10102d5c <fseeko>:
10102d5c:	00840474 	movhi	r2,4113
10102d60:	108cf104 	addi	r2,r2,13252
10102d64:	300f883a 	mov	r7,r6
10102d68:	280d883a 	mov	r6,r5
10102d6c:	200b883a 	mov	r5,r4
10102d70:	11000017 	ldw	r4,0(r2)
10102d74:	01029181 	jmpi	10102918 <_fseeko_r>

10102d78 <_fstat_r>:
10102d78:	defffd04 	addi	sp,sp,-12
10102d7c:	2805883a 	mov	r2,r5
10102d80:	dc000015 	stw	r16,0(sp)
10102d84:	04040474 	movhi	r16,4113
10102d88:	dc400115 	stw	r17,4(sp)
10102d8c:	8413bd04 	addi	r16,r16,20212
10102d90:	2023883a 	mov	r17,r4
10102d94:	300b883a 	mov	r5,r6
10102d98:	1009883a 	mov	r4,r2
10102d9c:	dfc00215 	stw	ra,8(sp)
10102da0:	80000015 	stw	zero,0(r16)
10102da4:	010eed40 	call	1010eed4 <fstat>
10102da8:	00ffffc4 	movi	r3,-1
10102dac:	10c00526 	beq	r2,r3,10102dc4 <_fstat_r+0x4c>
10102db0:	dfc00217 	ldw	ra,8(sp)
10102db4:	dc400117 	ldw	r17,4(sp)
10102db8:	dc000017 	ldw	r16,0(sp)
10102dbc:	dec00304 	addi	sp,sp,12
10102dc0:	f800283a 	ret
10102dc4:	80c00017 	ldw	r3,0(r16)
10102dc8:	183ff926 	beq	r3,zero,10102db0 <__alt_data_end+0xfffe2db0>
10102dcc:	88c00015 	stw	r3,0(r17)
10102dd0:	003ff706 	br	10102db0 <__alt_data_end+0xfffe2db0>

10102dd4 <_fwalk>:
10102dd4:	defff704 	addi	sp,sp,-36
10102dd8:	dd000415 	stw	r20,16(sp)
10102ddc:	dfc00815 	stw	ra,32(sp)
10102de0:	ddc00715 	stw	r23,28(sp)
10102de4:	dd800615 	stw	r22,24(sp)
10102de8:	dd400515 	stw	r21,20(sp)
10102dec:	dcc00315 	stw	r19,12(sp)
10102df0:	dc800215 	stw	r18,8(sp)
10102df4:	dc400115 	stw	r17,4(sp)
10102df8:	dc000015 	stw	r16,0(sp)
10102dfc:	2500b804 	addi	r20,r4,736
10102e00:	a0002326 	beq	r20,zero,10102e90 <_fwalk+0xbc>
10102e04:	282b883a 	mov	r21,r5
10102e08:	002f883a 	mov	r23,zero
10102e0c:	05800044 	movi	r22,1
10102e10:	04ffffc4 	movi	r19,-1
10102e14:	a4400117 	ldw	r17,4(r20)
10102e18:	a4800217 	ldw	r18,8(r20)
10102e1c:	8c7fffc4 	addi	r17,r17,-1
10102e20:	88000d16 	blt	r17,zero,10102e58 <_fwalk+0x84>
10102e24:	94000304 	addi	r16,r18,12
10102e28:	94800384 	addi	r18,r18,14
10102e2c:	8080000b 	ldhu	r2,0(r16)
10102e30:	8c7fffc4 	addi	r17,r17,-1
10102e34:	813ffd04 	addi	r4,r16,-12
10102e38:	b080042e 	bgeu	r22,r2,10102e4c <_fwalk+0x78>
10102e3c:	9080000f 	ldh	r2,0(r18)
10102e40:	14c00226 	beq	r2,r19,10102e4c <_fwalk+0x78>
10102e44:	a83ee83a 	callr	r21
10102e48:	b8aeb03a 	or	r23,r23,r2
10102e4c:	84001a04 	addi	r16,r16,104
10102e50:	94801a04 	addi	r18,r18,104
10102e54:	8cfff51e 	bne	r17,r19,10102e2c <__alt_data_end+0xfffe2e2c>
10102e58:	a5000017 	ldw	r20,0(r20)
10102e5c:	a03fed1e 	bne	r20,zero,10102e14 <__alt_data_end+0xfffe2e14>
10102e60:	b805883a 	mov	r2,r23
10102e64:	dfc00817 	ldw	ra,32(sp)
10102e68:	ddc00717 	ldw	r23,28(sp)
10102e6c:	dd800617 	ldw	r22,24(sp)
10102e70:	dd400517 	ldw	r21,20(sp)
10102e74:	dd000417 	ldw	r20,16(sp)
10102e78:	dcc00317 	ldw	r19,12(sp)
10102e7c:	dc800217 	ldw	r18,8(sp)
10102e80:	dc400117 	ldw	r17,4(sp)
10102e84:	dc000017 	ldw	r16,0(sp)
10102e88:	dec00904 	addi	sp,sp,36
10102e8c:	f800283a 	ret
10102e90:	002f883a 	mov	r23,zero
10102e94:	003ff206 	br	10102e60 <__alt_data_end+0xfffe2e60>

10102e98 <_fwalk_reent>:
10102e98:	defff704 	addi	sp,sp,-36
10102e9c:	dd000415 	stw	r20,16(sp)
10102ea0:	dfc00815 	stw	ra,32(sp)
10102ea4:	ddc00715 	stw	r23,28(sp)
10102ea8:	dd800615 	stw	r22,24(sp)
10102eac:	dd400515 	stw	r21,20(sp)
10102eb0:	dcc00315 	stw	r19,12(sp)
10102eb4:	dc800215 	stw	r18,8(sp)
10102eb8:	dc400115 	stw	r17,4(sp)
10102ebc:	dc000015 	stw	r16,0(sp)
10102ec0:	2500b804 	addi	r20,r4,736
10102ec4:	a0002326 	beq	r20,zero,10102f54 <_fwalk_reent+0xbc>
10102ec8:	282b883a 	mov	r21,r5
10102ecc:	2027883a 	mov	r19,r4
10102ed0:	002f883a 	mov	r23,zero
10102ed4:	05800044 	movi	r22,1
10102ed8:	04bfffc4 	movi	r18,-1
10102edc:	a4400117 	ldw	r17,4(r20)
10102ee0:	a4000217 	ldw	r16,8(r20)
10102ee4:	8c7fffc4 	addi	r17,r17,-1
10102ee8:	88000c16 	blt	r17,zero,10102f1c <_fwalk_reent+0x84>
10102eec:	84000304 	addi	r16,r16,12
10102ef0:	8080000b 	ldhu	r2,0(r16)
10102ef4:	8c7fffc4 	addi	r17,r17,-1
10102ef8:	817ffd04 	addi	r5,r16,-12
10102efc:	b080052e 	bgeu	r22,r2,10102f14 <_fwalk_reent+0x7c>
10102f00:	8080008f 	ldh	r2,2(r16)
10102f04:	9809883a 	mov	r4,r19
10102f08:	14800226 	beq	r2,r18,10102f14 <_fwalk_reent+0x7c>
10102f0c:	a83ee83a 	callr	r21
10102f10:	b8aeb03a 	or	r23,r23,r2
10102f14:	84001a04 	addi	r16,r16,104
10102f18:	8cbff51e 	bne	r17,r18,10102ef0 <__alt_data_end+0xfffe2ef0>
10102f1c:	a5000017 	ldw	r20,0(r20)
10102f20:	a03fee1e 	bne	r20,zero,10102edc <__alt_data_end+0xfffe2edc>
10102f24:	b805883a 	mov	r2,r23
10102f28:	dfc00817 	ldw	ra,32(sp)
10102f2c:	ddc00717 	ldw	r23,28(sp)
10102f30:	dd800617 	ldw	r22,24(sp)
10102f34:	dd400517 	ldw	r21,20(sp)
10102f38:	dd000417 	ldw	r20,16(sp)
10102f3c:	dcc00317 	ldw	r19,12(sp)
10102f40:	dc800217 	ldw	r18,8(sp)
10102f44:	dc400117 	ldw	r17,4(sp)
10102f48:	dc000017 	ldw	r16,0(sp)
10102f4c:	dec00904 	addi	sp,sp,36
10102f50:	f800283a 	ret
10102f54:	002f883a 	mov	r23,zero
10102f58:	003ff206 	br	10102f24 <__alt_data_end+0xfffe2f24>

10102f5c <_fwrite_r>:
10102f5c:	defff504 	addi	sp,sp,-44
10102f60:	dc800815 	stw	r18,32(sp)
10102f64:	39a5383a 	mul	r18,r7,r6
10102f68:	d8800304 	addi	r2,sp,12
10102f6c:	d8800015 	stw	r2,0(sp)
10102f70:	00800044 	movi	r2,1
10102f74:	dcc00915 	stw	r19,36(sp)
10102f78:	dc400715 	stw	r17,28(sp)
10102f7c:	dc000615 	stw	r16,24(sp)
10102f80:	d9400315 	stw	r5,12(sp)
10102f84:	dfc00a15 	stw	ra,40(sp)
10102f88:	dc800415 	stw	r18,16(sp)
10102f8c:	dc800215 	stw	r18,8(sp)
10102f90:	d8800115 	stw	r2,4(sp)
10102f94:	3027883a 	mov	r19,r6
10102f98:	3821883a 	mov	r16,r7
10102f9c:	2023883a 	mov	r17,r4
10102fa0:	d9400b17 	ldw	r5,44(sp)
10102fa4:	20000226 	beq	r4,zero,10102fb0 <_fwrite_r+0x54>
10102fa8:	20800e17 	ldw	r2,56(r4)
10102fac:	10001a26 	beq	r2,zero,10103018 <_fwrite_r+0xbc>
10102fb0:	2880030b 	ldhu	r2,12(r5)
10102fb4:	10c8000c 	andi	r3,r2,8192
10102fb8:	1800061e 	bne	r3,zero,10102fd4 <_fwrite_r+0x78>
10102fbc:	29001917 	ldw	r4,100(r5)
10102fc0:	00f7ffc4 	movi	r3,-8193
10102fc4:	10880014 	ori	r2,r2,8192
10102fc8:	20c6703a 	and	r3,r4,r3
10102fcc:	2880030d 	sth	r2,12(r5)
10102fd0:	28c01915 	stw	r3,100(r5)
10102fd4:	d80d883a 	mov	r6,sp
10102fd8:	8809883a 	mov	r4,r17
10102fdc:	0107f100 	call	10107f10 <__sfvwrite_r>
10102fe0:	10000b26 	beq	r2,zero,10103010 <_fwrite_r+0xb4>
10102fe4:	d9000217 	ldw	r4,8(sp)
10102fe8:	980b883a 	mov	r5,r19
10102fec:	9109c83a 	sub	r4,r18,r4
10102ff0:	0101b640 	call	10101b64 <__udivsi3>
10102ff4:	dfc00a17 	ldw	ra,40(sp)
10102ff8:	dcc00917 	ldw	r19,36(sp)
10102ffc:	dc800817 	ldw	r18,32(sp)
10103000:	dc400717 	ldw	r17,28(sp)
10103004:	dc000617 	ldw	r16,24(sp)
10103008:	dec00b04 	addi	sp,sp,44
1010300c:	f800283a 	ret
10103010:	8005883a 	mov	r2,r16
10103014:	003ff706 	br	10102ff4 <__alt_data_end+0xfffe2ff4>
10103018:	d9400515 	stw	r5,20(sp)
1010301c:	010231c0 	call	1010231c <__sinit>
10103020:	d9400517 	ldw	r5,20(sp)
10103024:	003fe206 	br	10102fb0 <__alt_data_end+0xfffe2fb0>

10103028 <fwrite>:
10103028:	defffe04 	addi	sp,sp,-8
1010302c:	00840474 	movhi	r2,4113
10103030:	d9c00015 	stw	r7,0(sp)
10103034:	108cf104 	addi	r2,r2,13252
10103038:	300f883a 	mov	r7,r6
1010303c:	280d883a 	mov	r6,r5
10103040:	200b883a 	mov	r5,r4
10103044:	11000017 	ldw	r4,0(r2)
10103048:	dfc00115 	stw	ra,4(sp)
1010304c:	0102f5c0 	call	10102f5c <_fwrite_r>
10103050:	dfc00117 	ldw	ra,4(sp)
10103054:	dec00204 	addi	sp,sp,8
10103058:	f800283a 	ret

1010305c <__smakebuf_r>:
1010305c:	2880030b 	ldhu	r2,12(r5)
10103060:	10c0008c 	andi	r3,r2,2
10103064:	1800411e 	bne	r3,zero,1010316c <__smakebuf_r+0x110>
10103068:	deffec04 	addi	sp,sp,-80
1010306c:	dc000f15 	stw	r16,60(sp)
10103070:	2821883a 	mov	r16,r5
10103074:	2940038f 	ldh	r5,14(r5)
10103078:	dc401015 	stw	r17,64(sp)
1010307c:	dfc01315 	stw	ra,76(sp)
10103080:	dcc01215 	stw	r19,72(sp)
10103084:	dc801115 	stw	r18,68(sp)
10103088:	2023883a 	mov	r17,r4
1010308c:	28001c16 	blt	r5,zero,10103100 <__smakebuf_r+0xa4>
10103090:	d80d883a 	mov	r6,sp
10103094:	0102d780 	call	10102d78 <_fstat_r>
10103098:	10001816 	blt	r2,zero,101030fc <__smakebuf_r+0xa0>
1010309c:	d8800117 	ldw	r2,4(sp)
101030a0:	00e00014 	movui	r3,32768
101030a4:	10bc000c 	andi	r2,r2,61440
101030a8:	14c80020 	cmpeqi	r19,r2,8192
101030ac:	10c03726 	beq	r2,r3,1010318c <__smakebuf_r+0x130>
101030b0:	80c0030b 	ldhu	r3,12(r16)
101030b4:	18c20014 	ori	r3,r3,2048
101030b8:	80c0030d 	sth	r3,12(r16)
101030bc:	00c80004 	movi	r3,8192
101030c0:	10c0521e 	bne	r2,r3,1010320c <__smakebuf_r+0x1b0>
101030c4:	8140038f 	ldh	r5,14(r16)
101030c8:	8809883a 	mov	r4,r17
101030cc:	01083cc0 	call	101083cc <_isatty_r>
101030d0:	10004c26 	beq	r2,zero,10103204 <__smakebuf_r+0x1a8>
101030d4:	8080030b 	ldhu	r2,12(r16)
101030d8:	80c010c4 	addi	r3,r16,67
101030dc:	80c00015 	stw	r3,0(r16)
101030e0:	10800054 	ori	r2,r2,1
101030e4:	8080030d 	sth	r2,12(r16)
101030e8:	00800044 	movi	r2,1
101030ec:	80c00415 	stw	r3,16(r16)
101030f0:	80800515 	stw	r2,20(r16)
101030f4:	04810004 	movi	r18,1024
101030f8:	00000706 	br	10103118 <__smakebuf_r+0xbc>
101030fc:	8080030b 	ldhu	r2,12(r16)
10103100:	10c0200c 	andi	r3,r2,128
10103104:	18001f1e 	bne	r3,zero,10103184 <__smakebuf_r+0x128>
10103108:	04810004 	movi	r18,1024
1010310c:	10820014 	ori	r2,r2,2048
10103110:	8080030d 	sth	r2,12(r16)
10103114:	0027883a 	mov	r19,zero
10103118:	900b883a 	mov	r5,r18
1010311c:	8809883a 	mov	r4,r17
10103120:	01032180 	call	10103218 <_malloc_r>
10103124:	10002c26 	beq	r2,zero,101031d8 <__smakebuf_r+0x17c>
10103128:	80c0030b 	ldhu	r3,12(r16)
1010312c:	01040434 	movhi	r4,4112
10103130:	2107f504 	addi	r4,r4,8148
10103134:	89000f15 	stw	r4,60(r17)
10103138:	18c02014 	ori	r3,r3,128
1010313c:	80c0030d 	sth	r3,12(r16)
10103140:	80800015 	stw	r2,0(r16)
10103144:	80800415 	stw	r2,16(r16)
10103148:	84800515 	stw	r18,20(r16)
1010314c:	98001a1e 	bne	r19,zero,101031b8 <__smakebuf_r+0x15c>
10103150:	dfc01317 	ldw	ra,76(sp)
10103154:	dcc01217 	ldw	r19,72(sp)
10103158:	dc801117 	ldw	r18,68(sp)
1010315c:	dc401017 	ldw	r17,64(sp)
10103160:	dc000f17 	ldw	r16,60(sp)
10103164:	dec01404 	addi	sp,sp,80
10103168:	f800283a 	ret
1010316c:	288010c4 	addi	r2,r5,67
10103170:	28800015 	stw	r2,0(r5)
10103174:	28800415 	stw	r2,16(r5)
10103178:	00800044 	movi	r2,1
1010317c:	28800515 	stw	r2,20(r5)
10103180:	f800283a 	ret
10103184:	04801004 	movi	r18,64
10103188:	003fe006 	br	1010310c <__alt_data_end+0xfffe310c>
1010318c:	81000a17 	ldw	r4,40(r16)
10103190:	00c40434 	movhi	r3,4112
10103194:	18d00204 	addi	r3,r3,16392
10103198:	20ffc51e 	bne	r4,r3,101030b0 <__alt_data_end+0xfffe30b0>
1010319c:	8080030b 	ldhu	r2,12(r16)
101031a0:	04810004 	movi	r18,1024
101031a4:	84801315 	stw	r18,76(r16)
101031a8:	1484b03a 	or	r2,r2,r18
101031ac:	8080030d 	sth	r2,12(r16)
101031b0:	0027883a 	mov	r19,zero
101031b4:	003fd806 	br	10103118 <__alt_data_end+0xfffe3118>
101031b8:	8140038f 	ldh	r5,14(r16)
101031bc:	8809883a 	mov	r4,r17
101031c0:	01083cc0 	call	101083cc <_isatty_r>
101031c4:	103fe226 	beq	r2,zero,10103150 <__alt_data_end+0xfffe3150>
101031c8:	8080030b 	ldhu	r2,12(r16)
101031cc:	10800054 	ori	r2,r2,1
101031d0:	8080030d 	sth	r2,12(r16)
101031d4:	003fde06 	br	10103150 <__alt_data_end+0xfffe3150>
101031d8:	8080030b 	ldhu	r2,12(r16)
101031dc:	10c0800c 	andi	r3,r2,512
101031e0:	183fdb1e 	bne	r3,zero,10103150 <__alt_data_end+0xfffe3150>
101031e4:	10800094 	ori	r2,r2,2
101031e8:	80c010c4 	addi	r3,r16,67
101031ec:	8080030d 	sth	r2,12(r16)
101031f0:	00800044 	movi	r2,1
101031f4:	80c00015 	stw	r3,0(r16)
101031f8:	80c00415 	stw	r3,16(r16)
101031fc:	80800515 	stw	r2,20(r16)
10103200:	003fd306 	br	10103150 <__alt_data_end+0xfffe3150>
10103204:	04810004 	movi	r18,1024
10103208:	003fc306 	br	10103118 <__alt_data_end+0xfffe3118>
1010320c:	0027883a 	mov	r19,zero
10103210:	04810004 	movi	r18,1024
10103214:	003fc006 	br	10103118 <__alt_data_end+0xfffe3118>

10103218 <_malloc_r>:
10103218:	defff504 	addi	sp,sp,-44
1010321c:	dc800315 	stw	r18,12(sp)
10103220:	dfc00a15 	stw	ra,40(sp)
10103224:	df000915 	stw	fp,36(sp)
10103228:	ddc00815 	stw	r23,32(sp)
1010322c:	dd800715 	stw	r22,28(sp)
10103230:	dd400615 	stw	r21,24(sp)
10103234:	dd000515 	stw	r20,20(sp)
10103238:	dcc00415 	stw	r19,16(sp)
1010323c:	dc400215 	stw	r17,8(sp)
10103240:	dc000115 	stw	r16,4(sp)
10103244:	288002c4 	addi	r2,r5,11
10103248:	00c00584 	movi	r3,22
1010324c:	2025883a 	mov	r18,r4
10103250:	18807f2e 	bgeu	r3,r2,10103450 <_malloc_r+0x238>
10103254:	047ffe04 	movi	r17,-8
10103258:	1462703a 	and	r17,r2,r17
1010325c:	8800a316 	blt	r17,zero,101034ec <_malloc_r+0x2d4>
10103260:	8940a236 	bltu	r17,r5,101034ec <_malloc_r+0x2d4>
10103264:	010f57c0 	call	1010f57c <__malloc_lock>
10103268:	00807dc4 	movi	r2,503
1010326c:	1441e92e 	bgeu	r2,r17,10103a14 <_malloc_r+0x7fc>
10103270:	8804d27a 	srli	r2,r17,9
10103274:	1000a126 	beq	r2,zero,101034fc <_malloc_r+0x2e4>
10103278:	00c00104 	movi	r3,4
1010327c:	18811e36 	bltu	r3,r2,101036f8 <_malloc_r+0x4e0>
10103280:	8804d1ba 	srli	r2,r17,6
10103284:	12000e44 	addi	r8,r2,57
10103288:	11c00e04 	addi	r7,r2,56
1010328c:	4209883a 	add	r4,r8,r8
10103290:	04c40474 	movhi	r19,4113
10103294:	2109883a 	add	r4,r4,r4
10103298:	9cc74e04 	addi	r19,r19,7480
1010329c:	2109883a 	add	r4,r4,r4
101032a0:	9909883a 	add	r4,r19,r4
101032a4:	24000117 	ldw	r16,4(r4)
101032a8:	213ffe04 	addi	r4,r4,-8
101032ac:	24009726 	beq	r4,r16,1010350c <_malloc_r+0x2f4>
101032b0:	80800117 	ldw	r2,4(r16)
101032b4:	01bfff04 	movi	r6,-4
101032b8:	014003c4 	movi	r5,15
101032bc:	1184703a 	and	r2,r2,r6
101032c0:	1447c83a 	sub	r3,r2,r17
101032c4:	28c00716 	blt	r5,r3,101032e4 <_malloc_r+0xcc>
101032c8:	1800920e 	bge	r3,zero,10103514 <_malloc_r+0x2fc>
101032cc:	84000317 	ldw	r16,12(r16)
101032d0:	24008e26 	beq	r4,r16,1010350c <_malloc_r+0x2f4>
101032d4:	80800117 	ldw	r2,4(r16)
101032d8:	1184703a 	and	r2,r2,r6
101032dc:	1447c83a 	sub	r3,r2,r17
101032e0:	28fff90e 	bge	r5,r3,101032c8 <__alt_data_end+0xfffe32c8>
101032e4:	3809883a 	mov	r4,r7
101032e8:	01840474 	movhi	r6,4113
101032ec:	9c000417 	ldw	r16,16(r19)
101032f0:	31874e04 	addi	r6,r6,7480
101032f4:	32000204 	addi	r8,r6,8
101032f8:	82013426 	beq	r16,r8,101037cc <_malloc_r+0x5b4>
101032fc:	80c00117 	ldw	r3,4(r16)
10103300:	00bfff04 	movi	r2,-4
10103304:	188e703a 	and	r7,r3,r2
10103308:	3c45c83a 	sub	r2,r7,r17
1010330c:	00c003c4 	movi	r3,15
10103310:	18811f16 	blt	r3,r2,10103790 <_malloc_r+0x578>
10103314:	32000515 	stw	r8,20(r6)
10103318:	32000415 	stw	r8,16(r6)
1010331c:	10007f0e 	bge	r2,zero,1010351c <_malloc_r+0x304>
10103320:	00807fc4 	movi	r2,511
10103324:	11c0fd36 	bltu	r2,r7,1010371c <_malloc_r+0x504>
10103328:	3806d0fa 	srli	r3,r7,3
1010332c:	01c00044 	movi	r7,1
10103330:	30800117 	ldw	r2,4(r6)
10103334:	19400044 	addi	r5,r3,1
10103338:	294b883a 	add	r5,r5,r5
1010333c:	1807d0ba 	srai	r3,r3,2
10103340:	294b883a 	add	r5,r5,r5
10103344:	294b883a 	add	r5,r5,r5
10103348:	298b883a 	add	r5,r5,r6
1010334c:	38c6983a 	sll	r3,r7,r3
10103350:	29c00017 	ldw	r7,0(r5)
10103354:	2a7ffe04 	addi	r9,r5,-8
10103358:	1886b03a 	or	r3,r3,r2
1010335c:	82400315 	stw	r9,12(r16)
10103360:	81c00215 	stw	r7,8(r16)
10103364:	30c00115 	stw	r3,4(r6)
10103368:	2c000015 	stw	r16,0(r5)
1010336c:	3c000315 	stw	r16,12(r7)
10103370:	2005d0ba 	srai	r2,r4,2
10103374:	01400044 	movi	r5,1
10103378:	288a983a 	sll	r5,r5,r2
1010337c:	19406f36 	bltu	r3,r5,1010353c <_malloc_r+0x324>
10103380:	28c4703a 	and	r2,r5,r3
10103384:	10000a1e 	bne	r2,zero,101033b0 <_malloc_r+0x198>
10103388:	00bfff04 	movi	r2,-4
1010338c:	294b883a 	add	r5,r5,r5
10103390:	2088703a 	and	r4,r4,r2
10103394:	28c4703a 	and	r2,r5,r3
10103398:	21000104 	addi	r4,r4,4
1010339c:	1000041e 	bne	r2,zero,101033b0 <_malloc_r+0x198>
101033a0:	294b883a 	add	r5,r5,r5
101033a4:	28c4703a 	and	r2,r5,r3
101033a8:	21000104 	addi	r4,r4,4
101033ac:	103ffc26 	beq	r2,zero,101033a0 <__alt_data_end+0xfffe33a0>
101033b0:	02bfff04 	movi	r10,-4
101033b4:	024003c4 	movi	r9,15
101033b8:	21800044 	addi	r6,r4,1
101033bc:	318d883a 	add	r6,r6,r6
101033c0:	318d883a 	add	r6,r6,r6
101033c4:	318d883a 	add	r6,r6,r6
101033c8:	998d883a 	add	r6,r19,r6
101033cc:	333ffe04 	addi	r12,r6,-8
101033d0:	2017883a 	mov	r11,r4
101033d4:	31800104 	addi	r6,r6,4
101033d8:	34000017 	ldw	r16,0(r6)
101033dc:	31fffd04 	addi	r7,r6,-12
101033e0:	81c0041e 	bne	r16,r7,101033f4 <_malloc_r+0x1dc>
101033e4:	0000fb06 	br	101037d4 <_malloc_r+0x5bc>
101033e8:	1801030e 	bge	r3,zero,101037f8 <_malloc_r+0x5e0>
101033ec:	84000317 	ldw	r16,12(r16)
101033f0:	81c0f826 	beq	r16,r7,101037d4 <_malloc_r+0x5bc>
101033f4:	80800117 	ldw	r2,4(r16)
101033f8:	1284703a 	and	r2,r2,r10
101033fc:	1447c83a 	sub	r3,r2,r17
10103400:	48fff90e 	bge	r9,r3,101033e8 <__alt_data_end+0xfffe33e8>
10103404:	80800317 	ldw	r2,12(r16)
10103408:	81000217 	ldw	r4,8(r16)
1010340c:	89400054 	ori	r5,r17,1
10103410:	81400115 	stw	r5,4(r16)
10103414:	20800315 	stw	r2,12(r4)
10103418:	11000215 	stw	r4,8(r2)
1010341c:	8463883a 	add	r17,r16,r17
10103420:	9c400515 	stw	r17,20(r19)
10103424:	9c400415 	stw	r17,16(r19)
10103428:	18800054 	ori	r2,r3,1
1010342c:	88800115 	stw	r2,4(r17)
10103430:	8a000315 	stw	r8,12(r17)
10103434:	8a000215 	stw	r8,8(r17)
10103438:	88e3883a 	add	r17,r17,r3
1010343c:	88c00015 	stw	r3,0(r17)
10103440:	9009883a 	mov	r4,r18
10103444:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10103448:	80800204 	addi	r2,r16,8
1010344c:	00001b06 	br	101034bc <_malloc_r+0x2a4>
10103450:	04400404 	movi	r17,16
10103454:	89402536 	bltu	r17,r5,101034ec <_malloc_r+0x2d4>
10103458:	010f57c0 	call	1010f57c <__malloc_lock>
1010345c:	00800184 	movi	r2,6
10103460:	01000084 	movi	r4,2
10103464:	04c40474 	movhi	r19,4113
10103468:	1085883a 	add	r2,r2,r2
1010346c:	9cc74e04 	addi	r19,r19,7480
10103470:	1085883a 	add	r2,r2,r2
10103474:	9885883a 	add	r2,r19,r2
10103478:	14000117 	ldw	r16,4(r2)
1010347c:	10fffe04 	addi	r3,r2,-8
10103480:	80c0d926 	beq	r16,r3,101037e8 <_malloc_r+0x5d0>
10103484:	80c00117 	ldw	r3,4(r16)
10103488:	81000317 	ldw	r4,12(r16)
1010348c:	00bfff04 	movi	r2,-4
10103490:	1884703a 	and	r2,r3,r2
10103494:	81400217 	ldw	r5,8(r16)
10103498:	8085883a 	add	r2,r16,r2
1010349c:	10c00117 	ldw	r3,4(r2)
101034a0:	29000315 	stw	r4,12(r5)
101034a4:	21400215 	stw	r5,8(r4)
101034a8:	18c00054 	ori	r3,r3,1
101034ac:	10c00115 	stw	r3,4(r2)
101034b0:	9009883a 	mov	r4,r18
101034b4:	010f5a00 	call	1010f5a0 <__malloc_unlock>
101034b8:	80800204 	addi	r2,r16,8
101034bc:	dfc00a17 	ldw	ra,40(sp)
101034c0:	df000917 	ldw	fp,36(sp)
101034c4:	ddc00817 	ldw	r23,32(sp)
101034c8:	dd800717 	ldw	r22,28(sp)
101034cc:	dd400617 	ldw	r21,24(sp)
101034d0:	dd000517 	ldw	r20,20(sp)
101034d4:	dcc00417 	ldw	r19,16(sp)
101034d8:	dc800317 	ldw	r18,12(sp)
101034dc:	dc400217 	ldw	r17,8(sp)
101034e0:	dc000117 	ldw	r16,4(sp)
101034e4:	dec00b04 	addi	sp,sp,44
101034e8:	f800283a 	ret
101034ec:	00800304 	movi	r2,12
101034f0:	90800015 	stw	r2,0(r18)
101034f4:	0005883a 	mov	r2,zero
101034f8:	003ff006 	br	101034bc <__alt_data_end+0xfffe34bc>
101034fc:	01002004 	movi	r4,128
10103500:	02001004 	movi	r8,64
10103504:	01c00fc4 	movi	r7,63
10103508:	003f6106 	br	10103290 <__alt_data_end+0xfffe3290>
1010350c:	4009883a 	mov	r4,r8
10103510:	003f7506 	br	101032e8 <__alt_data_end+0xfffe32e8>
10103514:	81000317 	ldw	r4,12(r16)
10103518:	003fde06 	br	10103494 <__alt_data_end+0xfffe3494>
1010351c:	81c5883a 	add	r2,r16,r7
10103520:	11400117 	ldw	r5,4(r2)
10103524:	9009883a 	mov	r4,r18
10103528:	29400054 	ori	r5,r5,1
1010352c:	11400115 	stw	r5,4(r2)
10103530:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10103534:	80800204 	addi	r2,r16,8
10103538:	003fe006 	br	101034bc <__alt_data_end+0xfffe34bc>
1010353c:	9c000217 	ldw	r16,8(r19)
10103540:	00bfff04 	movi	r2,-4
10103544:	85800117 	ldw	r22,4(r16)
10103548:	b0ac703a 	and	r22,r22,r2
1010354c:	b4400336 	bltu	r22,r17,1010355c <_malloc_r+0x344>
10103550:	b445c83a 	sub	r2,r22,r17
10103554:	00c003c4 	movi	r3,15
10103558:	18805d16 	blt	r3,r2,101036d0 <_malloc_r+0x4b8>
1010355c:	05c40474 	movhi	r23,4113
10103560:	00840474 	movhi	r2,4113
10103564:	1093c004 	addi	r2,r2,20224
10103568:	bdccf204 	addi	r23,r23,13256
1010356c:	15400017 	ldw	r21,0(r2)
10103570:	b8c00017 	ldw	r3,0(r23)
10103574:	00bfffc4 	movi	r2,-1
10103578:	858d883a 	add	r6,r16,r22
1010357c:	8d6b883a 	add	r21,r17,r21
10103580:	1880ea26 	beq	r3,r2,1010392c <_malloc_r+0x714>
10103584:	ad4403c4 	addi	r21,r21,4111
10103588:	00bc0004 	movi	r2,-4096
1010358c:	a8aa703a 	and	r21,r21,r2
10103590:	a80b883a 	mov	r5,r21
10103594:	9009883a 	mov	r4,r18
10103598:	d9800015 	stw	r6,0(sp)
1010359c:	0103edc0 	call	10103edc <_sbrk_r>
101035a0:	1029883a 	mov	r20,r2
101035a4:	00bfffc4 	movi	r2,-1
101035a8:	d9800017 	ldw	r6,0(sp)
101035ac:	a080e826 	beq	r20,r2,10103950 <_malloc_r+0x738>
101035b0:	a180a636 	bltu	r20,r6,1010384c <_malloc_r+0x634>
101035b4:	07040474 	movhi	fp,4113
101035b8:	e713cb04 	addi	fp,fp,20268
101035bc:	e0800017 	ldw	r2,0(fp)
101035c0:	a887883a 	add	r3,r21,r2
101035c4:	e0c00015 	stw	r3,0(fp)
101035c8:	3500e626 	beq	r6,r20,10103964 <_malloc_r+0x74c>
101035cc:	b9000017 	ldw	r4,0(r23)
101035d0:	00bfffc4 	movi	r2,-1
101035d4:	2080ee26 	beq	r4,r2,10103990 <_malloc_r+0x778>
101035d8:	a185c83a 	sub	r2,r20,r6
101035dc:	10c5883a 	add	r2,r2,r3
101035e0:	e0800015 	stw	r2,0(fp)
101035e4:	a0c001cc 	andi	r3,r20,7
101035e8:	1800bc26 	beq	r3,zero,101038dc <_malloc_r+0x6c4>
101035ec:	a0e9c83a 	sub	r20,r20,r3
101035f0:	00840204 	movi	r2,4104
101035f4:	a5000204 	addi	r20,r20,8
101035f8:	10c7c83a 	sub	r3,r2,r3
101035fc:	a545883a 	add	r2,r20,r21
10103600:	1083ffcc 	andi	r2,r2,4095
10103604:	18abc83a 	sub	r21,r3,r2
10103608:	a80b883a 	mov	r5,r21
1010360c:	9009883a 	mov	r4,r18
10103610:	0103edc0 	call	10103edc <_sbrk_r>
10103614:	00ffffc4 	movi	r3,-1
10103618:	10c0e126 	beq	r2,r3,101039a0 <_malloc_r+0x788>
1010361c:	1505c83a 	sub	r2,r2,r20
10103620:	1545883a 	add	r2,r2,r21
10103624:	10800054 	ori	r2,r2,1
10103628:	e0c00017 	ldw	r3,0(fp)
1010362c:	9d000215 	stw	r20,8(r19)
10103630:	a0800115 	stw	r2,4(r20)
10103634:	a8c7883a 	add	r3,r21,r3
10103638:	e0c00015 	stw	r3,0(fp)
1010363c:	84c00e26 	beq	r16,r19,10103678 <_malloc_r+0x460>
10103640:	018003c4 	movi	r6,15
10103644:	3580a72e 	bgeu	r6,r22,101038e4 <_malloc_r+0x6cc>
10103648:	81400117 	ldw	r5,4(r16)
1010364c:	013ffe04 	movi	r4,-8
10103650:	b0bffd04 	addi	r2,r22,-12
10103654:	1104703a 	and	r2,r2,r4
10103658:	2900004c 	andi	r4,r5,1
1010365c:	2088b03a 	or	r4,r4,r2
10103660:	81000115 	stw	r4,4(r16)
10103664:	01400144 	movi	r5,5
10103668:	8089883a 	add	r4,r16,r2
1010366c:	21400115 	stw	r5,4(r4)
10103670:	21400215 	stw	r5,8(r4)
10103674:	3080cd36 	bltu	r6,r2,101039ac <_malloc_r+0x794>
10103678:	00840474 	movhi	r2,4113
1010367c:	1093bf04 	addi	r2,r2,20220
10103680:	11000017 	ldw	r4,0(r2)
10103684:	20c0012e 	bgeu	r4,r3,1010368c <_malloc_r+0x474>
10103688:	10c00015 	stw	r3,0(r2)
1010368c:	00840474 	movhi	r2,4113
10103690:	1093be04 	addi	r2,r2,20216
10103694:	11000017 	ldw	r4,0(r2)
10103698:	9c000217 	ldw	r16,8(r19)
1010369c:	20c0012e 	bgeu	r4,r3,101036a4 <_malloc_r+0x48c>
101036a0:	10c00015 	stw	r3,0(r2)
101036a4:	80c00117 	ldw	r3,4(r16)
101036a8:	00bfff04 	movi	r2,-4
101036ac:	1886703a 	and	r3,r3,r2
101036b0:	1c45c83a 	sub	r2,r3,r17
101036b4:	1c400236 	bltu	r3,r17,101036c0 <_malloc_r+0x4a8>
101036b8:	00c003c4 	movi	r3,15
101036bc:	18800416 	blt	r3,r2,101036d0 <_malloc_r+0x4b8>
101036c0:	9009883a 	mov	r4,r18
101036c4:	010f5a00 	call	1010f5a0 <__malloc_unlock>
101036c8:	0005883a 	mov	r2,zero
101036cc:	003f7b06 	br	101034bc <__alt_data_end+0xfffe34bc>
101036d0:	88c00054 	ori	r3,r17,1
101036d4:	80c00115 	stw	r3,4(r16)
101036d8:	8463883a 	add	r17,r16,r17
101036dc:	10800054 	ori	r2,r2,1
101036e0:	9c400215 	stw	r17,8(r19)
101036e4:	88800115 	stw	r2,4(r17)
101036e8:	9009883a 	mov	r4,r18
101036ec:	010f5a00 	call	1010f5a0 <__malloc_unlock>
101036f0:	80800204 	addi	r2,r16,8
101036f4:	003f7106 	br	101034bc <__alt_data_end+0xfffe34bc>
101036f8:	00c00504 	movi	r3,20
101036fc:	18804a2e 	bgeu	r3,r2,10103828 <_malloc_r+0x610>
10103700:	00c01504 	movi	r3,84
10103704:	18806e36 	bltu	r3,r2,101038c0 <_malloc_r+0x6a8>
10103708:	8804d33a 	srli	r2,r17,12
1010370c:	12001bc4 	addi	r8,r2,111
10103710:	11c01b84 	addi	r7,r2,110
10103714:	4209883a 	add	r4,r8,r8
10103718:	003edd06 	br	10103290 <__alt_data_end+0xfffe3290>
1010371c:	3804d27a 	srli	r2,r7,9
10103720:	00c00104 	movi	r3,4
10103724:	1880442e 	bgeu	r3,r2,10103838 <_malloc_r+0x620>
10103728:	00c00504 	movi	r3,20
1010372c:	18808136 	bltu	r3,r2,10103934 <_malloc_r+0x71c>
10103730:	11401704 	addi	r5,r2,92
10103734:	10c016c4 	addi	r3,r2,91
10103738:	294b883a 	add	r5,r5,r5
1010373c:	294b883a 	add	r5,r5,r5
10103740:	294b883a 	add	r5,r5,r5
10103744:	994b883a 	add	r5,r19,r5
10103748:	28800017 	ldw	r2,0(r5)
1010374c:	01840474 	movhi	r6,4113
10103750:	297ffe04 	addi	r5,r5,-8
10103754:	31874e04 	addi	r6,r6,7480
10103758:	28806526 	beq	r5,r2,101038f0 <_malloc_r+0x6d8>
1010375c:	01bfff04 	movi	r6,-4
10103760:	10c00117 	ldw	r3,4(r2)
10103764:	1986703a 	and	r3,r3,r6
10103768:	38c0022e 	bgeu	r7,r3,10103774 <_malloc_r+0x55c>
1010376c:	10800217 	ldw	r2,8(r2)
10103770:	28bffb1e 	bne	r5,r2,10103760 <__alt_data_end+0xfffe3760>
10103774:	11400317 	ldw	r5,12(r2)
10103778:	98c00117 	ldw	r3,4(r19)
1010377c:	81400315 	stw	r5,12(r16)
10103780:	80800215 	stw	r2,8(r16)
10103784:	2c000215 	stw	r16,8(r5)
10103788:	14000315 	stw	r16,12(r2)
1010378c:	003ef806 	br	10103370 <__alt_data_end+0xfffe3370>
10103790:	88c00054 	ori	r3,r17,1
10103794:	80c00115 	stw	r3,4(r16)
10103798:	8463883a 	add	r17,r16,r17
1010379c:	34400515 	stw	r17,20(r6)
101037a0:	34400415 	stw	r17,16(r6)
101037a4:	10c00054 	ori	r3,r2,1
101037a8:	8a000315 	stw	r8,12(r17)
101037ac:	8a000215 	stw	r8,8(r17)
101037b0:	88c00115 	stw	r3,4(r17)
101037b4:	88a3883a 	add	r17,r17,r2
101037b8:	88800015 	stw	r2,0(r17)
101037bc:	9009883a 	mov	r4,r18
101037c0:	010f5a00 	call	1010f5a0 <__malloc_unlock>
101037c4:	80800204 	addi	r2,r16,8
101037c8:	003f3c06 	br	101034bc <__alt_data_end+0xfffe34bc>
101037cc:	30c00117 	ldw	r3,4(r6)
101037d0:	003ee706 	br	10103370 <__alt_data_end+0xfffe3370>
101037d4:	5ac00044 	addi	r11,r11,1
101037d8:	588000cc 	andi	r2,r11,3
101037dc:	31800204 	addi	r6,r6,8
101037e0:	103efd1e 	bne	r2,zero,101033d8 <__alt_data_end+0xfffe33d8>
101037e4:	00002406 	br	10103878 <_malloc_r+0x660>
101037e8:	14000317 	ldw	r16,12(r2)
101037ec:	143f251e 	bne	r2,r16,10103484 <__alt_data_end+0xfffe3484>
101037f0:	21000084 	addi	r4,r4,2
101037f4:	003ebc06 	br	101032e8 <__alt_data_end+0xfffe32e8>
101037f8:	8085883a 	add	r2,r16,r2
101037fc:	10c00117 	ldw	r3,4(r2)
10103800:	81000317 	ldw	r4,12(r16)
10103804:	81400217 	ldw	r5,8(r16)
10103808:	18c00054 	ori	r3,r3,1
1010380c:	10c00115 	stw	r3,4(r2)
10103810:	29000315 	stw	r4,12(r5)
10103814:	21400215 	stw	r5,8(r4)
10103818:	9009883a 	mov	r4,r18
1010381c:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10103820:	80800204 	addi	r2,r16,8
10103824:	003f2506 	br	101034bc <__alt_data_end+0xfffe34bc>
10103828:	12001704 	addi	r8,r2,92
1010382c:	11c016c4 	addi	r7,r2,91
10103830:	4209883a 	add	r4,r8,r8
10103834:	003e9606 	br	10103290 <__alt_data_end+0xfffe3290>
10103838:	3804d1ba 	srli	r2,r7,6
1010383c:	11400e44 	addi	r5,r2,57
10103840:	10c00e04 	addi	r3,r2,56
10103844:	294b883a 	add	r5,r5,r5
10103848:	003fbc06 	br	1010373c <__alt_data_end+0xfffe373c>
1010384c:	84ff5926 	beq	r16,r19,101035b4 <__alt_data_end+0xfffe35b4>
10103850:	00840474 	movhi	r2,4113
10103854:	10874e04 	addi	r2,r2,7480
10103858:	14000217 	ldw	r16,8(r2)
1010385c:	00bfff04 	movi	r2,-4
10103860:	80c00117 	ldw	r3,4(r16)
10103864:	1886703a 	and	r3,r3,r2
10103868:	003f9106 	br	101036b0 <__alt_data_end+0xfffe36b0>
1010386c:	60800217 	ldw	r2,8(r12)
10103870:	213fffc4 	addi	r4,r4,-1
10103874:	1300651e 	bne	r2,r12,10103a0c <_malloc_r+0x7f4>
10103878:	208000cc 	andi	r2,r4,3
1010387c:	633ffe04 	addi	r12,r12,-8
10103880:	103ffa1e 	bne	r2,zero,1010386c <__alt_data_end+0xfffe386c>
10103884:	98800117 	ldw	r2,4(r19)
10103888:	0146303a 	nor	r3,zero,r5
1010388c:	1884703a 	and	r2,r3,r2
10103890:	98800115 	stw	r2,4(r19)
10103894:	294b883a 	add	r5,r5,r5
10103898:	117f2836 	bltu	r2,r5,1010353c <__alt_data_end+0xfffe353c>
1010389c:	283f2726 	beq	r5,zero,1010353c <__alt_data_end+0xfffe353c>
101038a0:	2886703a 	and	r3,r5,r2
101038a4:	5809883a 	mov	r4,r11
101038a8:	183ec31e 	bne	r3,zero,101033b8 <__alt_data_end+0xfffe33b8>
101038ac:	294b883a 	add	r5,r5,r5
101038b0:	2886703a 	and	r3,r5,r2
101038b4:	21000104 	addi	r4,r4,4
101038b8:	183ffc26 	beq	r3,zero,101038ac <__alt_data_end+0xfffe38ac>
101038bc:	003ebe06 	br	101033b8 <__alt_data_end+0xfffe33b8>
101038c0:	00c05504 	movi	r3,340
101038c4:	18801236 	bltu	r3,r2,10103910 <_malloc_r+0x6f8>
101038c8:	8804d3fa 	srli	r2,r17,15
101038cc:	12001e04 	addi	r8,r2,120
101038d0:	11c01dc4 	addi	r7,r2,119
101038d4:	4209883a 	add	r4,r8,r8
101038d8:	003e6d06 	br	10103290 <__alt_data_end+0xfffe3290>
101038dc:	00c40004 	movi	r3,4096
101038e0:	003f4606 	br	101035fc <__alt_data_end+0xfffe35fc>
101038e4:	00800044 	movi	r2,1
101038e8:	a0800115 	stw	r2,4(r20)
101038ec:	003f7406 	br	101036c0 <__alt_data_end+0xfffe36c0>
101038f0:	1805d0ba 	srai	r2,r3,2
101038f4:	01c00044 	movi	r7,1
101038f8:	30c00117 	ldw	r3,4(r6)
101038fc:	388e983a 	sll	r7,r7,r2
10103900:	2805883a 	mov	r2,r5
10103904:	38c6b03a 	or	r3,r7,r3
10103908:	30c00115 	stw	r3,4(r6)
1010390c:	003f9b06 	br	1010377c <__alt_data_end+0xfffe377c>
10103910:	00c15504 	movi	r3,1364
10103914:	18801a36 	bltu	r3,r2,10103980 <_malloc_r+0x768>
10103918:	8804d4ba 	srli	r2,r17,18
1010391c:	12001f44 	addi	r8,r2,125
10103920:	11c01f04 	addi	r7,r2,124
10103924:	4209883a 	add	r4,r8,r8
10103928:	003e5906 	br	10103290 <__alt_data_end+0xfffe3290>
1010392c:	ad400404 	addi	r21,r21,16
10103930:	003f1706 	br	10103590 <__alt_data_end+0xfffe3590>
10103934:	00c01504 	movi	r3,84
10103938:	18802336 	bltu	r3,r2,101039c8 <_malloc_r+0x7b0>
1010393c:	3804d33a 	srli	r2,r7,12
10103940:	11401bc4 	addi	r5,r2,111
10103944:	10c01b84 	addi	r3,r2,110
10103948:	294b883a 	add	r5,r5,r5
1010394c:	003f7b06 	br	1010373c <__alt_data_end+0xfffe373c>
10103950:	9c000217 	ldw	r16,8(r19)
10103954:	00bfff04 	movi	r2,-4
10103958:	80c00117 	ldw	r3,4(r16)
1010395c:	1886703a 	and	r3,r3,r2
10103960:	003f5306 	br	101036b0 <__alt_data_end+0xfffe36b0>
10103964:	3083ffcc 	andi	r2,r6,4095
10103968:	103f181e 	bne	r2,zero,101035cc <__alt_data_end+0xfffe35cc>
1010396c:	99000217 	ldw	r4,8(r19)
10103970:	b545883a 	add	r2,r22,r21
10103974:	10800054 	ori	r2,r2,1
10103978:	20800115 	stw	r2,4(r4)
1010397c:	003f3e06 	br	10103678 <__alt_data_end+0xfffe3678>
10103980:	01003f84 	movi	r4,254
10103984:	02001fc4 	movi	r8,127
10103988:	01c01f84 	movi	r7,126
1010398c:	003e4006 	br	10103290 <__alt_data_end+0xfffe3290>
10103990:	00840474 	movhi	r2,4113
10103994:	108cf204 	addi	r2,r2,13256
10103998:	15000015 	stw	r20,0(r2)
1010399c:	003f1106 	br	101035e4 <__alt_data_end+0xfffe35e4>
101039a0:	00800044 	movi	r2,1
101039a4:	002b883a 	mov	r21,zero
101039a8:	003f1f06 	br	10103628 <__alt_data_end+0xfffe3628>
101039ac:	81400204 	addi	r5,r16,8
101039b0:	9009883a 	mov	r4,r18
101039b4:	01025e80 	call	101025e8 <_free_r>
101039b8:	00840474 	movhi	r2,4113
101039bc:	1093cb04 	addi	r2,r2,20268
101039c0:	10c00017 	ldw	r3,0(r2)
101039c4:	003f2c06 	br	10103678 <__alt_data_end+0xfffe3678>
101039c8:	00c05504 	movi	r3,340
101039cc:	18800536 	bltu	r3,r2,101039e4 <_malloc_r+0x7cc>
101039d0:	3804d3fa 	srli	r2,r7,15
101039d4:	11401e04 	addi	r5,r2,120
101039d8:	10c01dc4 	addi	r3,r2,119
101039dc:	294b883a 	add	r5,r5,r5
101039e0:	003f5606 	br	1010373c <__alt_data_end+0xfffe373c>
101039e4:	00c15504 	movi	r3,1364
101039e8:	18800536 	bltu	r3,r2,10103a00 <_malloc_r+0x7e8>
101039ec:	3804d4ba 	srli	r2,r7,18
101039f0:	11401f44 	addi	r5,r2,125
101039f4:	10c01f04 	addi	r3,r2,124
101039f8:	294b883a 	add	r5,r5,r5
101039fc:	003f4f06 	br	1010373c <__alt_data_end+0xfffe373c>
10103a00:	01403f84 	movi	r5,254
10103a04:	00c01f84 	movi	r3,126
10103a08:	003f4c06 	br	1010373c <__alt_data_end+0xfffe373c>
10103a0c:	98800117 	ldw	r2,4(r19)
10103a10:	003fa006 	br	10103894 <__alt_data_end+0xfffe3894>
10103a14:	8808d0fa 	srli	r4,r17,3
10103a18:	20800044 	addi	r2,r4,1
10103a1c:	1085883a 	add	r2,r2,r2
10103a20:	003e9006 	br	10103464 <__alt_data_end+0xfffe3464>

10103a24 <memset>:
10103a24:	20c000cc 	andi	r3,r4,3
10103a28:	2005883a 	mov	r2,r4
10103a2c:	18004426 	beq	r3,zero,10103b40 <memset+0x11c>
10103a30:	31ffffc4 	addi	r7,r6,-1
10103a34:	30004026 	beq	r6,zero,10103b38 <memset+0x114>
10103a38:	2813883a 	mov	r9,r5
10103a3c:	200d883a 	mov	r6,r4
10103a40:	2007883a 	mov	r3,r4
10103a44:	00000406 	br	10103a58 <memset+0x34>
10103a48:	3a3fffc4 	addi	r8,r7,-1
10103a4c:	31800044 	addi	r6,r6,1
10103a50:	38003926 	beq	r7,zero,10103b38 <memset+0x114>
10103a54:	400f883a 	mov	r7,r8
10103a58:	18c00044 	addi	r3,r3,1
10103a5c:	32400005 	stb	r9,0(r6)
10103a60:	1a0000cc 	andi	r8,r3,3
10103a64:	403ff81e 	bne	r8,zero,10103a48 <__alt_data_end+0xfffe3a48>
10103a68:	010000c4 	movi	r4,3
10103a6c:	21c02d2e 	bgeu	r4,r7,10103b24 <memset+0x100>
10103a70:	29003fcc 	andi	r4,r5,255
10103a74:	200c923a 	slli	r6,r4,8
10103a78:	3108b03a 	or	r4,r6,r4
10103a7c:	200c943a 	slli	r6,r4,16
10103a80:	218cb03a 	or	r6,r4,r6
10103a84:	010003c4 	movi	r4,15
10103a88:	21c0182e 	bgeu	r4,r7,10103aec <memset+0xc8>
10103a8c:	3b3ffc04 	addi	r12,r7,-16
10103a90:	6018d13a 	srli	r12,r12,4
10103a94:	1a000104 	addi	r8,r3,4
10103a98:	1ac00204 	addi	r11,r3,8
10103a9c:	6008913a 	slli	r4,r12,4
10103aa0:	1a800304 	addi	r10,r3,12
10103aa4:	1813883a 	mov	r9,r3
10103aa8:	21000504 	addi	r4,r4,20
10103aac:	1909883a 	add	r4,r3,r4
10103ab0:	49800015 	stw	r6,0(r9)
10103ab4:	41800015 	stw	r6,0(r8)
10103ab8:	59800015 	stw	r6,0(r11)
10103abc:	51800015 	stw	r6,0(r10)
10103ac0:	42000404 	addi	r8,r8,16
10103ac4:	4a400404 	addi	r9,r9,16
10103ac8:	5ac00404 	addi	r11,r11,16
10103acc:	52800404 	addi	r10,r10,16
10103ad0:	413ff71e 	bne	r8,r4,10103ab0 <__alt_data_end+0xfffe3ab0>
10103ad4:	63000044 	addi	r12,r12,1
10103ad8:	6018913a 	slli	r12,r12,4
10103adc:	39c003cc 	andi	r7,r7,15
10103ae0:	010000c4 	movi	r4,3
10103ae4:	1b07883a 	add	r3,r3,r12
10103ae8:	21c00e2e 	bgeu	r4,r7,10103b24 <memset+0x100>
10103aec:	1813883a 	mov	r9,r3
10103af0:	3811883a 	mov	r8,r7
10103af4:	010000c4 	movi	r4,3
10103af8:	49800015 	stw	r6,0(r9)
10103afc:	423fff04 	addi	r8,r8,-4
10103b00:	4a400104 	addi	r9,r9,4
10103b04:	223ffc36 	bltu	r4,r8,10103af8 <__alt_data_end+0xfffe3af8>
10103b08:	393fff04 	addi	r4,r7,-4
10103b0c:	2008d0ba 	srli	r4,r4,2
10103b10:	39c000cc 	andi	r7,r7,3
10103b14:	21000044 	addi	r4,r4,1
10103b18:	2109883a 	add	r4,r4,r4
10103b1c:	2109883a 	add	r4,r4,r4
10103b20:	1907883a 	add	r3,r3,r4
10103b24:	38000526 	beq	r7,zero,10103b3c <memset+0x118>
10103b28:	19cf883a 	add	r7,r3,r7
10103b2c:	19400005 	stb	r5,0(r3)
10103b30:	18c00044 	addi	r3,r3,1
10103b34:	38fffd1e 	bne	r7,r3,10103b2c <__alt_data_end+0xfffe3b2c>
10103b38:	f800283a 	ret
10103b3c:	f800283a 	ret
10103b40:	2007883a 	mov	r3,r4
10103b44:	300f883a 	mov	r7,r6
10103b48:	003fc706 	br	10103a68 <__alt_data_end+0xfffe3a68>

10103b4c <_open_r>:
10103b4c:	defffd04 	addi	sp,sp,-12
10103b50:	2805883a 	mov	r2,r5
10103b54:	dc000015 	stw	r16,0(sp)
10103b58:	04040474 	movhi	r16,4113
10103b5c:	dc400115 	stw	r17,4(sp)
10103b60:	300b883a 	mov	r5,r6
10103b64:	8413bd04 	addi	r16,r16,20212
10103b68:	2023883a 	mov	r17,r4
10103b6c:	380d883a 	mov	r6,r7
10103b70:	1009883a 	mov	r4,r2
10103b74:	dfc00215 	stw	ra,8(sp)
10103b78:	80000015 	stw	zero,0(r16)
10103b7c:	010f6c40 	call	1010f6c4 <open>
10103b80:	00ffffc4 	movi	r3,-1
10103b84:	10c00526 	beq	r2,r3,10103b9c <_open_r+0x50>
10103b88:	dfc00217 	ldw	ra,8(sp)
10103b8c:	dc400117 	ldw	r17,4(sp)
10103b90:	dc000017 	ldw	r16,0(sp)
10103b94:	dec00304 	addi	sp,sp,12
10103b98:	f800283a 	ret
10103b9c:	80c00017 	ldw	r3,0(r16)
10103ba0:	183ff926 	beq	r3,zero,10103b88 <__alt_data_end+0xfffe3b88>
10103ba4:	88c00015 	stw	r3,0(r17)
10103ba8:	003ff706 	br	10103b88 <__alt_data_end+0xfffe3b88>

10103bac <_printf_r>:
10103bac:	defffd04 	addi	sp,sp,-12
10103bb0:	2805883a 	mov	r2,r5
10103bb4:	dfc00015 	stw	ra,0(sp)
10103bb8:	d9800115 	stw	r6,4(sp)
10103bbc:	d9c00215 	stw	r7,8(sp)
10103bc0:	21400217 	ldw	r5,8(r4)
10103bc4:	d9c00104 	addi	r7,sp,4
10103bc8:	100d883a 	mov	r6,r2
10103bcc:	01041040 	call	10104104 <___vfprintf_internal_r>
10103bd0:	dfc00017 	ldw	ra,0(sp)
10103bd4:	dec00304 	addi	sp,sp,12
10103bd8:	f800283a 	ret

10103bdc <printf>:
10103bdc:	defffc04 	addi	sp,sp,-16
10103be0:	dfc00015 	stw	ra,0(sp)
10103be4:	d9400115 	stw	r5,4(sp)
10103be8:	d9800215 	stw	r6,8(sp)
10103bec:	d9c00315 	stw	r7,12(sp)
10103bf0:	00840474 	movhi	r2,4113
10103bf4:	108cf104 	addi	r2,r2,13252
10103bf8:	10800017 	ldw	r2,0(r2)
10103bfc:	200b883a 	mov	r5,r4
10103c00:	d9800104 	addi	r6,sp,4
10103c04:	11000217 	ldw	r4,8(r2)
10103c08:	01062fc0 	call	101062fc <__vfprintf_internal>
10103c0c:	dfc00017 	ldw	ra,0(sp)
10103c10:	dec00404 	addi	sp,sp,16
10103c14:	f800283a 	ret

10103c18 <_puts_r>:
10103c18:	defff604 	addi	sp,sp,-40
10103c1c:	dc000715 	stw	r16,28(sp)
10103c20:	2021883a 	mov	r16,r4
10103c24:	2809883a 	mov	r4,r5
10103c28:	dc400815 	stw	r17,32(sp)
10103c2c:	dfc00915 	stw	ra,36(sp)
10103c30:	2823883a 	mov	r17,r5
10103c34:	010406c0 	call	1010406c <strlen>
10103c38:	10c00044 	addi	r3,r2,1
10103c3c:	d8800115 	stw	r2,4(sp)
10103c40:	00840474 	movhi	r2,4113
10103c44:	10858604 	addi	r2,r2,5656
10103c48:	d8800215 	stw	r2,8(sp)
10103c4c:	00800044 	movi	r2,1
10103c50:	d8800315 	stw	r2,12(sp)
10103c54:	00800084 	movi	r2,2
10103c58:	dc400015 	stw	r17,0(sp)
10103c5c:	d8c00615 	stw	r3,24(sp)
10103c60:	dec00415 	stw	sp,16(sp)
10103c64:	d8800515 	stw	r2,20(sp)
10103c68:	80000226 	beq	r16,zero,10103c74 <_puts_r+0x5c>
10103c6c:	80800e17 	ldw	r2,56(r16)
10103c70:	10001426 	beq	r2,zero,10103cc4 <_puts_r+0xac>
10103c74:	81400217 	ldw	r5,8(r16)
10103c78:	2880030b 	ldhu	r2,12(r5)
10103c7c:	10c8000c 	andi	r3,r2,8192
10103c80:	1800061e 	bne	r3,zero,10103c9c <_puts_r+0x84>
10103c84:	29001917 	ldw	r4,100(r5)
10103c88:	00f7ffc4 	movi	r3,-8193
10103c8c:	10880014 	ori	r2,r2,8192
10103c90:	20c6703a 	and	r3,r4,r3
10103c94:	2880030d 	sth	r2,12(r5)
10103c98:	28c01915 	stw	r3,100(r5)
10103c9c:	d9800404 	addi	r6,sp,16
10103ca0:	8009883a 	mov	r4,r16
10103ca4:	0107f100 	call	10107f10 <__sfvwrite_r>
10103ca8:	1000091e 	bne	r2,zero,10103cd0 <_puts_r+0xb8>
10103cac:	00800284 	movi	r2,10
10103cb0:	dfc00917 	ldw	ra,36(sp)
10103cb4:	dc400817 	ldw	r17,32(sp)
10103cb8:	dc000717 	ldw	r16,28(sp)
10103cbc:	dec00a04 	addi	sp,sp,40
10103cc0:	f800283a 	ret
10103cc4:	8009883a 	mov	r4,r16
10103cc8:	010231c0 	call	1010231c <__sinit>
10103ccc:	003fe906 	br	10103c74 <__alt_data_end+0xfffe3c74>
10103cd0:	00bfffc4 	movi	r2,-1
10103cd4:	003ff606 	br	10103cb0 <__alt_data_end+0xfffe3cb0>

10103cd8 <puts>:
10103cd8:	00840474 	movhi	r2,4113
10103cdc:	108cf104 	addi	r2,r2,13252
10103ce0:	200b883a 	mov	r5,r4
10103ce4:	11000017 	ldw	r4,0(r2)
10103ce8:	0103c181 	jmpi	10103c18 <_puts_r>

10103cec <lflush>:
10103cec:	2080030b 	ldhu	r2,12(r4)
10103cf0:	00c00244 	movi	r3,9
10103cf4:	1080024c 	andi	r2,r2,9
10103cf8:	10c00226 	beq	r2,r3,10103d04 <lflush+0x18>
10103cfc:	0005883a 	mov	r2,zero
10103d00:	f800283a 	ret
10103d04:	0101f9c1 	jmpi	10101f9c <fflush>

10103d08 <__srefill_r>:
10103d08:	defffc04 	addi	sp,sp,-16
10103d0c:	dc400115 	stw	r17,4(sp)
10103d10:	dc000015 	stw	r16,0(sp)
10103d14:	dfc00315 	stw	ra,12(sp)
10103d18:	dc800215 	stw	r18,8(sp)
10103d1c:	2023883a 	mov	r17,r4
10103d20:	2821883a 	mov	r16,r5
10103d24:	20000226 	beq	r4,zero,10103d30 <__srefill_r+0x28>
10103d28:	20800e17 	ldw	r2,56(r4)
10103d2c:	10003c26 	beq	r2,zero,10103e20 <__srefill_r+0x118>
10103d30:	80c0030b 	ldhu	r3,12(r16)
10103d34:	1908000c 	andi	r4,r3,8192
10103d38:	1805883a 	mov	r2,r3
10103d3c:	2000071e 	bne	r4,zero,10103d5c <__srefill_r+0x54>
10103d40:	81001917 	ldw	r4,100(r16)
10103d44:	18880014 	ori	r2,r3,8192
10103d48:	00f7ffc4 	movi	r3,-8193
10103d4c:	20c8703a 	and	r4,r4,r3
10103d50:	8080030d 	sth	r2,12(r16)
10103d54:	1007883a 	mov	r3,r2
10103d58:	81001915 	stw	r4,100(r16)
10103d5c:	80000115 	stw	zero,4(r16)
10103d60:	1100080c 	andi	r4,r2,32
10103d64:	2000571e 	bne	r4,zero,10103ec4 <__srefill_r+0x1bc>
10103d68:	1100010c 	andi	r4,r2,4
10103d6c:	20001f26 	beq	r4,zero,10103dec <__srefill_r+0xe4>
10103d70:	81400c17 	ldw	r5,48(r16)
10103d74:	28000826 	beq	r5,zero,10103d98 <__srefill_r+0x90>
10103d78:	80801004 	addi	r2,r16,64
10103d7c:	28800226 	beq	r5,r2,10103d88 <__srefill_r+0x80>
10103d80:	8809883a 	mov	r4,r17
10103d84:	01025e80 	call	101025e8 <_free_r>
10103d88:	80800f17 	ldw	r2,60(r16)
10103d8c:	80000c15 	stw	zero,48(r16)
10103d90:	80800115 	stw	r2,4(r16)
10103d94:	1000391e 	bne	r2,zero,10103e7c <__srefill_r+0x174>
10103d98:	80800417 	ldw	r2,16(r16)
10103d9c:	10004b26 	beq	r2,zero,10103ecc <__srefill_r+0x1c4>
10103da0:	8480030b 	ldhu	r18,12(r16)
10103da4:	908000cc 	andi	r2,r18,3
10103da8:	10001f1e 	bne	r2,zero,10103e28 <__srefill_r+0x120>
10103dac:	81800417 	ldw	r6,16(r16)
10103db0:	80800817 	ldw	r2,32(r16)
10103db4:	81c00517 	ldw	r7,20(r16)
10103db8:	81400717 	ldw	r5,28(r16)
10103dbc:	81800015 	stw	r6,0(r16)
10103dc0:	8809883a 	mov	r4,r17
10103dc4:	103ee83a 	callr	r2
10103dc8:	80800115 	stw	r2,4(r16)
10103dcc:	00800e0e 	bge	zero,r2,10103e08 <__srefill_r+0x100>
10103dd0:	0005883a 	mov	r2,zero
10103dd4:	dfc00317 	ldw	ra,12(sp)
10103dd8:	dc800217 	ldw	r18,8(sp)
10103ddc:	dc400117 	ldw	r17,4(sp)
10103de0:	dc000017 	ldw	r16,0(sp)
10103de4:	dec00404 	addi	sp,sp,16
10103de8:	f800283a 	ret
10103dec:	1100040c 	andi	r4,r2,16
10103df0:	20003026 	beq	r4,zero,10103eb4 <__srefill_r+0x1ac>
10103df4:	1080020c 	andi	r2,r2,8
10103df8:	1000241e 	bne	r2,zero,10103e8c <__srefill_r+0x184>
10103dfc:	18c00114 	ori	r3,r3,4
10103e00:	80c0030d 	sth	r3,12(r16)
10103e04:	003fe406 	br	10103d98 <__alt_data_end+0xfffe3d98>
10103e08:	80c0030b 	ldhu	r3,12(r16)
10103e0c:	1000161e 	bne	r2,zero,10103e68 <__srefill_r+0x160>
10103e10:	18c00814 	ori	r3,r3,32
10103e14:	00bfffc4 	movi	r2,-1
10103e18:	80c0030d 	sth	r3,12(r16)
10103e1c:	003fed06 	br	10103dd4 <__alt_data_end+0xfffe3dd4>
10103e20:	010231c0 	call	1010231c <__sinit>
10103e24:	003fc206 	br	10103d30 <__alt_data_end+0xfffe3d30>
10103e28:	00840474 	movhi	r2,4113
10103e2c:	108cf004 	addi	r2,r2,13248
10103e30:	11000017 	ldw	r4,0(r2)
10103e34:	01440434 	movhi	r5,4112
10103e38:	00800044 	movi	r2,1
10103e3c:	294f3b04 	addi	r5,r5,15596
10103e40:	8080030d 	sth	r2,12(r16)
10103e44:	0102dd40 	call	10102dd4 <_fwalk>
10103e48:	00800244 	movi	r2,9
10103e4c:	8480030d 	sth	r18,12(r16)
10103e50:	9480024c 	andi	r18,r18,9
10103e54:	90bfd51e 	bne	r18,r2,10103dac <__alt_data_end+0xfffe3dac>
10103e58:	800b883a 	mov	r5,r16
10103e5c:	8809883a 	mov	r4,r17
10103e60:	0101d240 	call	10101d24 <__sflush_r>
10103e64:	003fd106 	br	10103dac <__alt_data_end+0xfffe3dac>
10103e68:	18c01014 	ori	r3,r3,64
10103e6c:	80000115 	stw	zero,4(r16)
10103e70:	00bfffc4 	movi	r2,-1
10103e74:	80c0030d 	sth	r3,12(r16)
10103e78:	003fd606 	br	10103dd4 <__alt_data_end+0xfffe3dd4>
10103e7c:	80c00e17 	ldw	r3,56(r16)
10103e80:	0005883a 	mov	r2,zero
10103e84:	80c00015 	stw	r3,0(r16)
10103e88:	003fd206 	br	10103dd4 <__alt_data_end+0xfffe3dd4>
10103e8c:	800b883a 	mov	r5,r16
10103e90:	8809883a 	mov	r4,r17
10103e94:	0101f400 	call	10101f40 <_fflush_r>
10103e98:	10000a1e 	bne	r2,zero,10103ec4 <__srefill_r+0x1bc>
10103e9c:	8080030b 	ldhu	r2,12(r16)
10103ea0:	00fffdc4 	movi	r3,-9
10103ea4:	80000215 	stw	zero,8(r16)
10103ea8:	1886703a 	and	r3,r3,r2
10103eac:	80000615 	stw	zero,24(r16)
10103eb0:	003fd206 	br	10103dfc <__alt_data_end+0xfffe3dfc>
10103eb4:	00800244 	movi	r2,9
10103eb8:	88800015 	stw	r2,0(r17)
10103ebc:	18c01014 	ori	r3,r3,64
10103ec0:	80c0030d 	sth	r3,12(r16)
10103ec4:	00bfffc4 	movi	r2,-1
10103ec8:	003fc206 	br	10103dd4 <__alt_data_end+0xfffe3dd4>
10103ecc:	800b883a 	mov	r5,r16
10103ed0:	8809883a 	mov	r4,r17
10103ed4:	010305c0 	call	1010305c <__smakebuf_r>
10103ed8:	003fb106 	br	10103da0 <__alt_data_end+0xfffe3da0>

10103edc <_sbrk_r>:
10103edc:	defffd04 	addi	sp,sp,-12
10103ee0:	dc000015 	stw	r16,0(sp)
10103ee4:	04040474 	movhi	r16,4113
10103ee8:	dc400115 	stw	r17,4(sp)
10103eec:	8413bd04 	addi	r16,r16,20212
10103ef0:	2023883a 	mov	r17,r4
10103ef4:	2809883a 	mov	r4,r5
10103ef8:	dfc00215 	stw	ra,8(sp)
10103efc:	80000015 	stw	zero,0(r16)
10103f00:	010f9b40 	call	1010f9b4 <sbrk>
10103f04:	00ffffc4 	movi	r3,-1
10103f08:	10c00526 	beq	r2,r3,10103f20 <_sbrk_r+0x44>
10103f0c:	dfc00217 	ldw	ra,8(sp)
10103f10:	dc400117 	ldw	r17,4(sp)
10103f14:	dc000017 	ldw	r16,0(sp)
10103f18:	dec00304 	addi	sp,sp,12
10103f1c:	f800283a 	ret
10103f20:	80c00017 	ldw	r3,0(r16)
10103f24:	183ff926 	beq	r3,zero,10103f0c <__alt_data_end+0xfffe3f0c>
10103f28:	88c00015 	stw	r3,0(r17)
10103f2c:	003ff706 	br	10103f0c <__alt_data_end+0xfffe3f0c>

10103f30 <__sread>:
10103f30:	defffe04 	addi	sp,sp,-8
10103f34:	dc000015 	stw	r16,0(sp)
10103f38:	2821883a 	mov	r16,r5
10103f3c:	2940038f 	ldh	r5,14(r5)
10103f40:	dfc00115 	stw	ra,4(sp)
10103f44:	01098e00 	call	101098e0 <_read_r>
10103f48:	10000716 	blt	r2,zero,10103f68 <__sread+0x38>
10103f4c:	80c01417 	ldw	r3,80(r16)
10103f50:	1887883a 	add	r3,r3,r2
10103f54:	80c01415 	stw	r3,80(r16)
10103f58:	dfc00117 	ldw	ra,4(sp)
10103f5c:	dc000017 	ldw	r16,0(sp)
10103f60:	dec00204 	addi	sp,sp,8
10103f64:	f800283a 	ret
10103f68:	80c0030b 	ldhu	r3,12(r16)
10103f6c:	18fbffcc 	andi	r3,r3,61439
10103f70:	80c0030d 	sth	r3,12(r16)
10103f74:	dfc00117 	ldw	ra,4(sp)
10103f78:	dc000017 	ldw	r16,0(sp)
10103f7c:	dec00204 	addi	sp,sp,8
10103f80:	f800283a 	ret

10103f84 <__seofread>:
10103f84:	0005883a 	mov	r2,zero
10103f88:	f800283a 	ret

10103f8c <__swrite>:
10103f8c:	2880030b 	ldhu	r2,12(r5)
10103f90:	defffb04 	addi	sp,sp,-20
10103f94:	dcc00315 	stw	r19,12(sp)
10103f98:	dc800215 	stw	r18,8(sp)
10103f9c:	dc400115 	stw	r17,4(sp)
10103fa0:	dc000015 	stw	r16,0(sp)
10103fa4:	dfc00415 	stw	ra,16(sp)
10103fa8:	10c0400c 	andi	r3,r2,256
10103fac:	2821883a 	mov	r16,r5
10103fb0:	2023883a 	mov	r17,r4
10103fb4:	3025883a 	mov	r18,r6
10103fb8:	3827883a 	mov	r19,r7
10103fbc:	18000526 	beq	r3,zero,10103fd4 <__swrite+0x48>
10103fc0:	2940038f 	ldh	r5,14(r5)
10103fc4:	01c00084 	movi	r7,2
10103fc8:	000d883a 	mov	r6,zero
10103fcc:	01084fc0 	call	101084fc <_lseek_r>
10103fd0:	8080030b 	ldhu	r2,12(r16)
10103fd4:	8140038f 	ldh	r5,14(r16)
10103fd8:	10bbffcc 	andi	r2,r2,61439
10103fdc:	980f883a 	mov	r7,r19
10103fe0:	900d883a 	mov	r6,r18
10103fe4:	8809883a 	mov	r4,r17
10103fe8:	8080030d 	sth	r2,12(r16)
10103fec:	dfc00417 	ldw	ra,16(sp)
10103ff0:	dcc00317 	ldw	r19,12(sp)
10103ff4:	dc800217 	ldw	r18,8(sp)
10103ff8:	dc400117 	ldw	r17,4(sp)
10103ffc:	dc000017 	ldw	r16,0(sp)
10104000:	dec00504 	addi	sp,sp,20
10104004:	01063d41 	jmpi	101063d4 <_write_r>

10104008 <__sseek>:
10104008:	defffe04 	addi	sp,sp,-8
1010400c:	dc000015 	stw	r16,0(sp)
10104010:	2821883a 	mov	r16,r5
10104014:	2940038f 	ldh	r5,14(r5)
10104018:	dfc00115 	stw	ra,4(sp)
1010401c:	01084fc0 	call	101084fc <_lseek_r>
10104020:	00ffffc4 	movi	r3,-1
10104024:	10c00826 	beq	r2,r3,10104048 <__sseek+0x40>
10104028:	80c0030b 	ldhu	r3,12(r16)
1010402c:	80801415 	stw	r2,80(r16)
10104030:	18c40014 	ori	r3,r3,4096
10104034:	80c0030d 	sth	r3,12(r16)
10104038:	dfc00117 	ldw	ra,4(sp)
1010403c:	dc000017 	ldw	r16,0(sp)
10104040:	dec00204 	addi	sp,sp,8
10104044:	f800283a 	ret
10104048:	80c0030b 	ldhu	r3,12(r16)
1010404c:	18fbffcc 	andi	r3,r3,61439
10104050:	80c0030d 	sth	r3,12(r16)
10104054:	dfc00117 	ldw	ra,4(sp)
10104058:	dc000017 	ldw	r16,0(sp)
1010405c:	dec00204 	addi	sp,sp,8
10104060:	f800283a 	ret

10104064 <__sclose>:
10104064:	2940038f 	ldh	r5,14(r5)
10104068:	01065881 	jmpi	10106588 <_close_r>

1010406c <strlen>:
1010406c:	208000cc 	andi	r2,r4,3
10104070:	10002026 	beq	r2,zero,101040f4 <strlen+0x88>
10104074:	20800007 	ldb	r2,0(r4)
10104078:	10002026 	beq	r2,zero,101040fc <strlen+0x90>
1010407c:	2005883a 	mov	r2,r4
10104080:	00000206 	br	1010408c <strlen+0x20>
10104084:	10c00007 	ldb	r3,0(r2)
10104088:	18001826 	beq	r3,zero,101040ec <strlen+0x80>
1010408c:	10800044 	addi	r2,r2,1
10104090:	10c000cc 	andi	r3,r2,3
10104094:	183ffb1e 	bne	r3,zero,10104084 <__alt_data_end+0xfffe4084>
10104098:	10c00017 	ldw	r3,0(r2)
1010409c:	01ffbff4 	movhi	r7,65279
101040a0:	39ffbfc4 	addi	r7,r7,-257
101040a4:	00ca303a 	nor	r5,zero,r3
101040a8:	01a02074 	movhi	r6,32897
101040ac:	19c7883a 	add	r3,r3,r7
101040b0:	31a02004 	addi	r6,r6,-32640
101040b4:	1946703a 	and	r3,r3,r5
101040b8:	1986703a 	and	r3,r3,r6
101040bc:	1800091e 	bne	r3,zero,101040e4 <strlen+0x78>
101040c0:	10800104 	addi	r2,r2,4
101040c4:	10c00017 	ldw	r3,0(r2)
101040c8:	19cb883a 	add	r5,r3,r7
101040cc:	00c6303a 	nor	r3,zero,r3
101040d0:	28c6703a 	and	r3,r5,r3
101040d4:	1986703a 	and	r3,r3,r6
101040d8:	183ff926 	beq	r3,zero,101040c0 <__alt_data_end+0xfffe40c0>
101040dc:	00000106 	br	101040e4 <strlen+0x78>
101040e0:	10800044 	addi	r2,r2,1
101040e4:	10c00007 	ldb	r3,0(r2)
101040e8:	183ffd1e 	bne	r3,zero,101040e0 <__alt_data_end+0xfffe40e0>
101040ec:	1105c83a 	sub	r2,r2,r4
101040f0:	f800283a 	ret
101040f4:	2005883a 	mov	r2,r4
101040f8:	003fe706 	br	10104098 <__alt_data_end+0xfffe4098>
101040fc:	0005883a 	mov	r2,zero
10104100:	f800283a 	ret

10104104 <___vfprintf_internal_r>:
10104104:	deffb804 	addi	sp,sp,-288
10104108:	dfc04715 	stw	ra,284(sp)
1010410c:	ddc04515 	stw	r23,276(sp)
10104110:	dd404315 	stw	r21,268(sp)
10104114:	d9002c15 	stw	r4,176(sp)
10104118:	282f883a 	mov	r23,r5
1010411c:	302b883a 	mov	r21,r6
10104120:	d9c02d15 	stw	r7,180(sp)
10104124:	df004615 	stw	fp,280(sp)
10104128:	dd804415 	stw	r22,272(sp)
1010412c:	dd004215 	stw	r20,264(sp)
10104130:	dcc04115 	stw	r19,260(sp)
10104134:	dc804015 	stw	r18,256(sp)
10104138:	dc403f15 	stw	r17,252(sp)
1010413c:	dc003e15 	stw	r16,248(sp)
10104140:	01084cc0 	call	101084cc <_localeconv_r>
10104144:	10800017 	ldw	r2,0(r2)
10104148:	1009883a 	mov	r4,r2
1010414c:	d8803415 	stw	r2,208(sp)
10104150:	010406c0 	call	1010406c <strlen>
10104154:	d8803715 	stw	r2,220(sp)
10104158:	d8802c17 	ldw	r2,176(sp)
1010415c:	10000226 	beq	r2,zero,10104168 <___vfprintf_internal_r+0x64>
10104160:	10800e17 	ldw	r2,56(r2)
10104164:	1000f926 	beq	r2,zero,1010454c <___vfprintf_internal_r+0x448>
10104168:	b880030b 	ldhu	r2,12(r23)
1010416c:	10c8000c 	andi	r3,r2,8192
10104170:	1800061e 	bne	r3,zero,1010418c <___vfprintf_internal_r+0x88>
10104174:	b9001917 	ldw	r4,100(r23)
10104178:	00f7ffc4 	movi	r3,-8193
1010417c:	10880014 	ori	r2,r2,8192
10104180:	20c6703a 	and	r3,r4,r3
10104184:	b880030d 	sth	r2,12(r23)
10104188:	b8c01915 	stw	r3,100(r23)
1010418c:	10c0020c 	andi	r3,r2,8
10104190:	1800c126 	beq	r3,zero,10104498 <___vfprintf_internal_r+0x394>
10104194:	b8c00417 	ldw	r3,16(r23)
10104198:	1800bf26 	beq	r3,zero,10104498 <___vfprintf_internal_r+0x394>
1010419c:	1080068c 	andi	r2,r2,26
101041a0:	00c00284 	movi	r3,10
101041a4:	10c0c426 	beq	r2,r3,101044b8 <___vfprintf_internal_r+0x3b4>
101041a8:	d8c00404 	addi	r3,sp,16
101041ac:	05040474 	movhi	r20,4113
101041b0:	d9001e04 	addi	r4,sp,120
101041b4:	a5059784 	addi	r20,r20,5726
101041b8:	d8c01e15 	stw	r3,120(sp)
101041bc:	d8002015 	stw	zero,128(sp)
101041c0:	d8001f15 	stw	zero,124(sp)
101041c4:	d8003315 	stw	zero,204(sp)
101041c8:	d8003615 	stw	zero,216(sp)
101041cc:	d8003815 	stw	zero,224(sp)
101041d0:	1811883a 	mov	r8,r3
101041d4:	d8003915 	stw	zero,228(sp)
101041d8:	d8003a15 	stw	zero,232(sp)
101041dc:	d8002f15 	stw	zero,188(sp)
101041e0:	d9002815 	stw	r4,160(sp)
101041e4:	a8800007 	ldb	r2,0(r21)
101041e8:	10027b26 	beq	r2,zero,10104bd8 <___vfprintf_internal_r+0xad4>
101041ec:	00c00944 	movi	r3,37
101041f0:	a821883a 	mov	r16,r21
101041f4:	10c0021e 	bne	r2,r3,10104200 <___vfprintf_internal_r+0xfc>
101041f8:	00001406 	br	1010424c <___vfprintf_internal_r+0x148>
101041fc:	10c00326 	beq	r2,r3,1010420c <___vfprintf_internal_r+0x108>
10104200:	84000044 	addi	r16,r16,1
10104204:	80800007 	ldb	r2,0(r16)
10104208:	103ffc1e 	bne	r2,zero,101041fc <__alt_data_end+0xfffe41fc>
1010420c:	8563c83a 	sub	r17,r16,r21
10104210:	88000e26 	beq	r17,zero,1010424c <___vfprintf_internal_r+0x148>
10104214:	d8c02017 	ldw	r3,128(sp)
10104218:	d8801f17 	ldw	r2,124(sp)
1010421c:	45400015 	stw	r21,0(r8)
10104220:	1c47883a 	add	r3,r3,r17
10104224:	10800044 	addi	r2,r2,1
10104228:	d8c02015 	stw	r3,128(sp)
1010422c:	44400115 	stw	r17,4(r8)
10104230:	d8801f15 	stw	r2,124(sp)
10104234:	00c001c4 	movi	r3,7
10104238:	1880a716 	blt	r3,r2,101044d8 <___vfprintf_internal_r+0x3d4>
1010423c:	42000204 	addi	r8,r8,8
10104240:	d9402f17 	ldw	r5,188(sp)
10104244:	2c4b883a 	add	r5,r5,r17
10104248:	d9402f15 	stw	r5,188(sp)
1010424c:	80800007 	ldb	r2,0(r16)
10104250:	1000a826 	beq	r2,zero,101044f4 <___vfprintf_internal_r+0x3f0>
10104254:	84400047 	ldb	r17,1(r16)
10104258:	00bfffc4 	movi	r2,-1
1010425c:	85400044 	addi	r21,r16,1
10104260:	d8002785 	stb	zero,158(sp)
10104264:	0007883a 	mov	r3,zero
10104268:	000f883a 	mov	r7,zero
1010426c:	d8802915 	stw	r2,164(sp)
10104270:	d8003115 	stw	zero,196(sp)
10104274:	0025883a 	mov	r18,zero
10104278:	01401604 	movi	r5,88
1010427c:	01800244 	movi	r6,9
10104280:	02800a84 	movi	r10,42
10104284:	02401b04 	movi	r9,108
10104288:	ad400044 	addi	r21,r21,1
1010428c:	88bff804 	addi	r2,r17,-32
10104290:	28830436 	bltu	r5,r2,10104ea4 <___vfprintf_internal_r+0xda0>
10104294:	100490ba 	slli	r2,r2,2
10104298:	01040434 	movhi	r4,4112
1010429c:	2110ab04 	addi	r4,r4,17068
101042a0:	1105883a 	add	r2,r2,r4
101042a4:	10800017 	ldw	r2,0(r2)
101042a8:	1000683a 	jmp	r2
101042ac:	10104dc4 	addi	zero,r2,16695
101042b0:	10104ea4 	muli	zero,r2,16698
101042b4:	10104ea4 	muli	zero,r2,16698
101042b8:	10104de4 	muli	zero,r2,16695
101042bc:	10104ea4 	muli	zero,r2,16698
101042c0:	10104ea4 	muli	zero,r2,16698
101042c4:	10104ea4 	muli	zero,r2,16698
101042c8:	10104ea4 	muli	zero,r2,16698
101042cc:	10104ea4 	muli	zero,r2,16698
101042d0:	10104ea4 	muli	zero,r2,16698
101042d4:	10104558 	cmpnei	zero,r2,16661
101042d8:	10104d00 	call	110104d0 <__alt_data_end+0xef04d0>
101042dc:	10104ea4 	muli	zero,r2,16698
101042e0:	10104420 	cmpeqi	zero,r2,16656
101042e4:	10104580 	call	11010458 <__alt_data_end+0xef0458>
101042e8:	10104ea4 	muli	zero,r2,16698
101042ec:	101045c0 	call	1101045c <__alt_data_end+0xef045c>
101042f0:	101045cc 	andi	zero,r2,16663
101042f4:	101045cc 	andi	zero,r2,16663
101042f8:	101045cc 	andi	zero,r2,16663
101042fc:	101045cc 	andi	zero,r2,16663
10104300:	101045cc 	andi	zero,r2,16663
10104304:	101045cc 	andi	zero,r2,16663
10104308:	101045cc 	andi	zero,r2,16663
1010430c:	101045cc 	andi	zero,r2,16663
10104310:	101045cc 	andi	zero,r2,16663
10104314:	10104ea4 	muli	zero,r2,16698
10104318:	10104ea4 	muli	zero,r2,16698
1010431c:	10104ea4 	muli	zero,r2,16698
10104320:	10104ea4 	muli	zero,r2,16698
10104324:	10104ea4 	muli	zero,r2,16698
10104328:	10104ea4 	muli	zero,r2,16698
1010432c:	10104ea4 	muli	zero,r2,16698
10104330:	10104ea4 	muli	zero,r2,16698
10104334:	10104ea4 	muli	zero,r2,16698
10104338:	10104ea4 	muli	zero,r2,16698
1010433c:	10104600 	call	11010460 <__alt_data_end+0xef0460>
10104340:	101046bc 	xorhi	zero,r2,16666
10104344:	10104ea4 	muli	zero,r2,16698
10104348:	101046bc 	xorhi	zero,r2,16666
1010434c:	10104ea4 	muli	zero,r2,16698
10104350:	10104ea4 	muli	zero,r2,16698
10104354:	10104ea4 	muli	zero,r2,16698
10104358:	10104ea4 	muli	zero,r2,16698
1010435c:	1010475c 	xori	zero,r2,16669
10104360:	10104ea4 	muli	zero,r2,16698
10104364:	10104ea4 	muli	zero,r2,16698
10104368:	10104768 	cmpgeui	zero,r2,16669
1010436c:	10104ea4 	muli	zero,r2,16698
10104370:	10104ea4 	muli	zero,r2,16698
10104374:	10104ea4 	muli	zero,r2,16698
10104378:	10104ea4 	muli	zero,r2,16698
1010437c:	10104ea4 	muli	zero,r2,16698
10104380:	10104be0 	cmpeqi	zero,r2,16687
10104384:	10104ea4 	muli	zero,r2,16698
10104388:	10104ea4 	muli	zero,r2,16698
1010438c:	10104c40 	call	110104c4 <__alt_data_end+0xef04c4>
10104390:	10104ea4 	muli	zero,r2,16698
10104394:	10104ea4 	muli	zero,r2,16698
10104398:	10104ea4 	muli	zero,r2,16698
1010439c:	10104ea4 	muli	zero,r2,16698
101043a0:	10104ea4 	muli	zero,r2,16698
101043a4:	10104ea4 	muli	zero,r2,16698
101043a8:	10104ea4 	muli	zero,r2,16698
101043ac:	10104ea4 	muli	zero,r2,16698
101043b0:	10104ea4 	muli	zero,r2,16698
101043b4:	10104ea4 	muli	zero,r2,16698
101043b8:	10104e50 	cmplti	zero,r2,16697
101043bc:	10104df0 	cmpltui	zero,r2,16695
101043c0:	101046bc 	xorhi	zero,r2,16666
101043c4:	101046bc 	xorhi	zero,r2,16666
101043c8:	101046bc 	xorhi	zero,r2,16666
101043cc:	10104e00 	call	110104e0 <__alt_data_end+0xef04e0>
101043d0:	10104df0 	cmpltui	zero,r2,16695
101043d4:	10104ea4 	muli	zero,r2,16698
101043d8:	10104ea4 	muli	zero,r2,16698
101043dc:	10104e0c 	andi	zero,r2,16696
101043e0:	10104ea4 	muli	zero,r2,16698
101043e4:	10104e1c 	xori	zero,r2,16696
101043e8:	10104cf0 	cmpltui	zero,r2,16691
101043ec:	1010442c 	andhi	zero,r2,16656
101043f0:	10104d10 	cmplti	zero,r2,16692
101043f4:	10104ea4 	muli	zero,r2,16698
101043f8:	10104d1c 	xori	zero,r2,16692
101043fc:	10104ea4 	muli	zero,r2,16698
10104400:	10104d78 	rdprs	zero,r2,16693
10104404:	10104ea4 	muli	zero,r2,16698
10104408:	10104ea4 	muli	zero,r2,16698
1010440c:	10104d88 	cmpgei	zero,r2,16694
10104410:	d9003117 	ldw	r4,196(sp)
10104414:	d8802d15 	stw	r2,180(sp)
10104418:	0109c83a 	sub	r4,zero,r4
1010441c:	d9003115 	stw	r4,196(sp)
10104420:	94800114 	ori	r18,r18,4
10104424:	ac400007 	ldb	r17,0(r21)
10104428:	003f9706 	br	10104288 <__alt_data_end+0xfffe4288>
1010442c:	00800c04 	movi	r2,48
10104430:	d9002d17 	ldw	r4,180(sp)
10104434:	d9402917 	ldw	r5,164(sp)
10104438:	d8802705 	stb	r2,156(sp)
1010443c:	00801e04 	movi	r2,120
10104440:	d8802745 	stb	r2,157(sp)
10104444:	d8002785 	stb	zero,158(sp)
10104448:	20c00104 	addi	r3,r4,4
1010444c:	24c00017 	ldw	r19,0(r4)
10104450:	002d883a 	mov	r22,zero
10104454:	90800094 	ori	r2,r18,2
10104458:	28029a16 	blt	r5,zero,10104ec4 <___vfprintf_internal_r+0xdc0>
1010445c:	00bfdfc4 	movi	r2,-129
10104460:	90a4703a 	and	r18,r18,r2
10104464:	d8c02d15 	stw	r3,180(sp)
10104468:	94800094 	ori	r18,r18,2
1010446c:	9802871e 	bne	r19,zero,10104e8c <___vfprintf_internal_r+0xd88>
10104470:	00840474 	movhi	r2,4113
10104474:	10859004 	addi	r2,r2,5696
10104478:	d8803915 	stw	r2,228(sp)
1010447c:	04401e04 	movi	r17,120
10104480:	d8802917 	ldw	r2,164(sp)
10104484:	0039883a 	mov	fp,zero
10104488:	1001e926 	beq	r2,zero,10104c30 <___vfprintf_internal_r+0xb2c>
1010448c:	0027883a 	mov	r19,zero
10104490:	002d883a 	mov	r22,zero
10104494:	00020506 	br	10104cac <___vfprintf_internal_r+0xba8>
10104498:	d9002c17 	ldw	r4,176(sp)
1010449c:	b80b883a 	mov	r5,r23
101044a0:	01064340 	call	10106434 <__swsetup_r>
101044a4:	1005ac1e 	bne	r2,zero,10105b58 <___vfprintf_internal_r+0x1a54>
101044a8:	b880030b 	ldhu	r2,12(r23)
101044ac:	00c00284 	movi	r3,10
101044b0:	1080068c 	andi	r2,r2,26
101044b4:	10ff3c1e 	bne	r2,r3,101041a8 <__alt_data_end+0xfffe41a8>
101044b8:	b880038f 	ldh	r2,14(r23)
101044bc:	103f3a16 	blt	r2,zero,101041a8 <__alt_data_end+0xfffe41a8>
101044c0:	d9c02d17 	ldw	r7,180(sp)
101044c4:	d9002c17 	ldw	r4,176(sp)
101044c8:	a80d883a 	mov	r6,r21
101044cc:	b80b883a 	mov	r5,r23
101044d0:	01063180 	call	10106318 <__sbprintf>
101044d4:	00001106 	br	1010451c <___vfprintf_internal_r+0x418>
101044d8:	d9002c17 	ldw	r4,176(sp)
101044dc:	d9801e04 	addi	r6,sp,120
101044e0:	b80b883a 	mov	r5,r23
101044e4:	010a0f00 	call	1010a0f0 <__sprint_r>
101044e8:	1000081e 	bne	r2,zero,1010450c <___vfprintf_internal_r+0x408>
101044ec:	da000404 	addi	r8,sp,16
101044f0:	003f5306 	br	10104240 <__alt_data_end+0xfffe4240>
101044f4:	d8802017 	ldw	r2,128(sp)
101044f8:	10000426 	beq	r2,zero,1010450c <___vfprintf_internal_r+0x408>
101044fc:	d9002c17 	ldw	r4,176(sp)
10104500:	d9801e04 	addi	r6,sp,120
10104504:	b80b883a 	mov	r5,r23
10104508:	010a0f00 	call	1010a0f0 <__sprint_r>
1010450c:	b880030b 	ldhu	r2,12(r23)
10104510:	1080100c 	andi	r2,r2,64
10104514:	1005901e 	bne	r2,zero,10105b58 <___vfprintf_internal_r+0x1a54>
10104518:	d8802f17 	ldw	r2,188(sp)
1010451c:	dfc04717 	ldw	ra,284(sp)
10104520:	df004617 	ldw	fp,280(sp)
10104524:	ddc04517 	ldw	r23,276(sp)
10104528:	dd804417 	ldw	r22,272(sp)
1010452c:	dd404317 	ldw	r21,268(sp)
10104530:	dd004217 	ldw	r20,264(sp)
10104534:	dcc04117 	ldw	r19,260(sp)
10104538:	dc804017 	ldw	r18,256(sp)
1010453c:	dc403f17 	ldw	r17,252(sp)
10104540:	dc003e17 	ldw	r16,248(sp)
10104544:	dec04804 	addi	sp,sp,288
10104548:	f800283a 	ret
1010454c:	d9002c17 	ldw	r4,176(sp)
10104550:	010231c0 	call	1010231c <__sinit>
10104554:	003f0406 	br	10104168 <__alt_data_end+0xfffe4168>
10104558:	d8802d17 	ldw	r2,180(sp)
1010455c:	d9002d17 	ldw	r4,180(sp)
10104560:	10800017 	ldw	r2,0(r2)
10104564:	d8803115 	stw	r2,196(sp)
10104568:	20800104 	addi	r2,r4,4
1010456c:	d9003117 	ldw	r4,196(sp)
10104570:	203fa716 	blt	r4,zero,10104410 <__alt_data_end+0xfffe4410>
10104574:	d8802d15 	stw	r2,180(sp)
10104578:	ac400007 	ldb	r17,0(r21)
1010457c:	003f4206 	br	10104288 <__alt_data_end+0xfffe4288>
10104580:	ac400007 	ldb	r17,0(r21)
10104584:	aac00044 	addi	r11,r21,1
10104588:	8a872826 	beq	r17,r10,1010622c <___vfprintf_internal_r+0x2128>
1010458c:	88bff404 	addi	r2,r17,-48
10104590:	0009883a 	mov	r4,zero
10104594:	30867d36 	bltu	r6,r2,10105f8c <___vfprintf_internal_r+0x1e88>
10104598:	5c400007 	ldb	r17,0(r11)
1010459c:	210002a4 	muli	r4,r4,10
101045a0:	5d400044 	addi	r21,r11,1
101045a4:	a817883a 	mov	r11,r21
101045a8:	2089883a 	add	r4,r4,r2
101045ac:	88bff404 	addi	r2,r17,-48
101045b0:	30bff92e 	bgeu	r6,r2,10104598 <__alt_data_end+0xfffe4598>
101045b4:	2005c916 	blt	r4,zero,10105cdc <___vfprintf_internal_r+0x1bd8>
101045b8:	d9002915 	stw	r4,164(sp)
101045bc:	003f3306 	br	1010428c <__alt_data_end+0xfffe428c>
101045c0:	94802014 	ori	r18,r18,128
101045c4:	ac400007 	ldb	r17,0(r21)
101045c8:	003f2f06 	br	10104288 <__alt_data_end+0xfffe4288>
101045cc:	a809883a 	mov	r4,r21
101045d0:	d8003115 	stw	zero,196(sp)
101045d4:	88bff404 	addi	r2,r17,-48
101045d8:	0017883a 	mov	r11,zero
101045dc:	24400007 	ldb	r17,0(r4)
101045e0:	5ac002a4 	muli	r11,r11,10
101045e4:	ad400044 	addi	r21,r21,1
101045e8:	a809883a 	mov	r4,r21
101045ec:	12d7883a 	add	r11,r2,r11
101045f0:	88bff404 	addi	r2,r17,-48
101045f4:	30bff92e 	bgeu	r6,r2,101045dc <__alt_data_end+0xfffe45dc>
101045f8:	dac03115 	stw	r11,196(sp)
101045fc:	003f2306 	br	1010428c <__alt_data_end+0xfffe428c>
10104600:	18c03fcc 	andi	r3,r3,255
10104604:	18072b1e 	bne	r3,zero,101062b4 <___vfprintf_internal_r+0x21b0>
10104608:	94800414 	ori	r18,r18,16
1010460c:	9080080c 	andi	r2,r18,32
10104610:	10037b26 	beq	r2,zero,10105400 <___vfprintf_internal_r+0x12fc>
10104614:	d9402d17 	ldw	r5,180(sp)
10104618:	28800117 	ldw	r2,4(r5)
1010461c:	2cc00017 	ldw	r19,0(r5)
10104620:	29400204 	addi	r5,r5,8
10104624:	d9402d15 	stw	r5,180(sp)
10104628:	102d883a 	mov	r22,r2
1010462c:	10044b16 	blt	r2,zero,1010575c <___vfprintf_internal_r+0x1658>
10104630:	d9402917 	ldw	r5,164(sp)
10104634:	df002783 	ldbu	fp,158(sp)
10104638:	2803bc16 	blt	r5,zero,1010552c <___vfprintf_internal_r+0x1428>
1010463c:	00ffdfc4 	movi	r3,-129
10104640:	9d84b03a 	or	r2,r19,r22
10104644:	90e4703a 	and	r18,r18,r3
10104648:	10017726 	beq	r2,zero,10104c28 <___vfprintf_internal_r+0xb24>
1010464c:	b0038326 	beq	r22,zero,1010545c <___vfprintf_internal_r+0x1358>
10104650:	dc402a15 	stw	r17,168(sp)
10104654:	dc001e04 	addi	r16,sp,120
10104658:	b023883a 	mov	r17,r22
1010465c:	402d883a 	mov	r22,r8
10104660:	9809883a 	mov	r4,r19
10104664:	880b883a 	mov	r5,r17
10104668:	01800284 	movi	r6,10
1010466c:	000f883a 	mov	r7,zero
10104670:	010c1c00 	call	1010c1c0 <__umoddi3>
10104674:	10800c04 	addi	r2,r2,48
10104678:	843fffc4 	addi	r16,r16,-1
1010467c:	9809883a 	mov	r4,r19
10104680:	880b883a 	mov	r5,r17
10104684:	80800005 	stb	r2,0(r16)
10104688:	01800284 	movi	r6,10
1010468c:	000f883a 	mov	r7,zero
10104690:	010bc480 	call	1010bc48 <__udivdi3>
10104694:	1027883a 	mov	r19,r2
10104698:	10c4b03a 	or	r2,r2,r3
1010469c:	1823883a 	mov	r17,r3
101046a0:	103fef1e 	bne	r2,zero,10104660 <__alt_data_end+0xfffe4660>
101046a4:	d8c02817 	ldw	r3,160(sp)
101046a8:	dc402a17 	ldw	r17,168(sp)
101046ac:	b011883a 	mov	r8,r22
101046b0:	1c07c83a 	sub	r3,r3,r16
101046b4:	d8c02e15 	stw	r3,184(sp)
101046b8:	00005906 	br	10104820 <___vfprintf_internal_r+0x71c>
101046bc:	18c03fcc 	andi	r3,r3,255
101046c0:	1806fa1e 	bne	r3,zero,101062ac <___vfprintf_internal_r+0x21a8>
101046c4:	9080020c 	andi	r2,r18,8
101046c8:	10048a26 	beq	r2,zero,101058f4 <___vfprintf_internal_r+0x17f0>
101046cc:	d8c02d17 	ldw	r3,180(sp)
101046d0:	d9002d17 	ldw	r4,180(sp)
101046d4:	d9402d17 	ldw	r5,180(sp)
101046d8:	18c00017 	ldw	r3,0(r3)
101046dc:	21000117 	ldw	r4,4(r4)
101046e0:	29400204 	addi	r5,r5,8
101046e4:	d8c03615 	stw	r3,216(sp)
101046e8:	d9003815 	stw	r4,224(sp)
101046ec:	d9402d15 	stw	r5,180(sp)
101046f0:	d9003617 	ldw	r4,216(sp)
101046f4:	d9403817 	ldw	r5,224(sp)
101046f8:	da003d15 	stw	r8,244(sp)
101046fc:	04000044 	movi	r16,1
10104700:	0109ea40 	call	10109ea4 <__fpclassifyd>
10104704:	da003d17 	ldw	r8,244(sp)
10104708:	14041f1e 	bne	r2,r16,10105788 <___vfprintf_internal_r+0x1684>
1010470c:	d9003617 	ldw	r4,216(sp)
10104710:	d9403817 	ldw	r5,224(sp)
10104714:	000d883a 	mov	r6,zero
10104718:	000f883a 	mov	r7,zero
1010471c:	010d9f00 	call	1010d9f0 <__ledf2>
10104720:	da003d17 	ldw	r8,244(sp)
10104724:	1005be16 	blt	r2,zero,10105e20 <___vfprintf_internal_r+0x1d1c>
10104728:	df002783 	ldbu	fp,158(sp)
1010472c:	008011c4 	movi	r2,71
10104730:	1445330e 	bge	r2,r17,10105c00 <___vfprintf_internal_r+0x1afc>
10104734:	04040474 	movhi	r16,4113
10104738:	84058804 	addi	r16,r16,5664
1010473c:	00c000c4 	movi	r3,3
10104740:	00bfdfc4 	movi	r2,-129
10104744:	d8c02a15 	stw	r3,168(sp)
10104748:	90a4703a 	and	r18,r18,r2
1010474c:	d8c02e15 	stw	r3,184(sp)
10104750:	d8002915 	stw	zero,164(sp)
10104754:	d8003215 	stw	zero,200(sp)
10104758:	00003706 	br	10104838 <___vfprintf_internal_r+0x734>
1010475c:	94800214 	ori	r18,r18,8
10104760:	ac400007 	ldb	r17,0(r21)
10104764:	003ec806 	br	10104288 <__alt_data_end+0xfffe4288>
10104768:	18c03fcc 	andi	r3,r3,255
1010476c:	1806db1e 	bne	r3,zero,101062dc <___vfprintf_internal_r+0x21d8>
10104770:	94800414 	ori	r18,r18,16
10104774:	9080080c 	andi	r2,r18,32
10104778:	1002d826 	beq	r2,zero,101052dc <___vfprintf_internal_r+0x11d8>
1010477c:	d9402d17 	ldw	r5,180(sp)
10104780:	d8c02917 	ldw	r3,164(sp)
10104784:	d8002785 	stb	zero,158(sp)
10104788:	28800204 	addi	r2,r5,8
1010478c:	2cc00017 	ldw	r19,0(r5)
10104790:	2d800117 	ldw	r22,4(r5)
10104794:	18048f16 	blt	r3,zero,101059d4 <___vfprintf_internal_r+0x18d0>
10104798:	013fdfc4 	movi	r4,-129
1010479c:	9d86b03a 	or	r3,r19,r22
101047a0:	d8802d15 	stw	r2,180(sp)
101047a4:	9124703a 	and	r18,r18,r4
101047a8:	1802d91e 	bne	r3,zero,10105310 <___vfprintf_internal_r+0x120c>
101047ac:	d8c02917 	ldw	r3,164(sp)
101047b0:	0039883a 	mov	fp,zero
101047b4:	1805c326 	beq	r3,zero,10105ec4 <___vfprintf_internal_r+0x1dc0>
101047b8:	0027883a 	mov	r19,zero
101047bc:	002d883a 	mov	r22,zero
101047c0:	dc001e04 	addi	r16,sp,120
101047c4:	9806d0fa 	srli	r3,r19,3
101047c8:	b008977a 	slli	r4,r22,29
101047cc:	b02cd0fa 	srli	r22,r22,3
101047d0:	9cc001cc 	andi	r19,r19,7
101047d4:	98800c04 	addi	r2,r19,48
101047d8:	843fffc4 	addi	r16,r16,-1
101047dc:	20e6b03a 	or	r19,r4,r3
101047e0:	80800005 	stb	r2,0(r16)
101047e4:	9d86b03a 	or	r3,r19,r22
101047e8:	183ff61e 	bne	r3,zero,101047c4 <__alt_data_end+0xfffe47c4>
101047ec:	90c0004c 	andi	r3,r18,1
101047f0:	18013b26 	beq	r3,zero,10104ce0 <___vfprintf_internal_r+0xbdc>
101047f4:	10803fcc 	andi	r2,r2,255
101047f8:	1080201c 	xori	r2,r2,128
101047fc:	10bfe004 	addi	r2,r2,-128
10104800:	00c00c04 	movi	r3,48
10104804:	10c13626 	beq	r2,r3,10104ce0 <___vfprintf_internal_r+0xbdc>
10104808:	80ffffc5 	stb	r3,-1(r16)
1010480c:	d8c02817 	ldw	r3,160(sp)
10104810:	80bfffc4 	addi	r2,r16,-1
10104814:	1021883a 	mov	r16,r2
10104818:	1887c83a 	sub	r3,r3,r2
1010481c:	d8c02e15 	stw	r3,184(sp)
10104820:	d8802e17 	ldw	r2,184(sp)
10104824:	d9002917 	ldw	r4,164(sp)
10104828:	1100010e 	bge	r2,r4,10104830 <___vfprintf_internal_r+0x72c>
1010482c:	2005883a 	mov	r2,r4
10104830:	d8802a15 	stw	r2,168(sp)
10104834:	d8003215 	stw	zero,200(sp)
10104838:	e7003fcc 	andi	fp,fp,255
1010483c:	e700201c 	xori	fp,fp,128
10104840:	e73fe004 	addi	fp,fp,-128
10104844:	e0000326 	beq	fp,zero,10104854 <___vfprintf_internal_r+0x750>
10104848:	d8c02a17 	ldw	r3,168(sp)
1010484c:	18c00044 	addi	r3,r3,1
10104850:	d8c02a15 	stw	r3,168(sp)
10104854:	90c0008c 	andi	r3,r18,2
10104858:	d8c02b15 	stw	r3,172(sp)
1010485c:	18000326 	beq	r3,zero,1010486c <___vfprintf_internal_r+0x768>
10104860:	d8c02a17 	ldw	r3,168(sp)
10104864:	18c00084 	addi	r3,r3,2
10104868:	d8c02a15 	stw	r3,168(sp)
1010486c:	90c0210c 	andi	r3,r18,132
10104870:	d8c03015 	stw	r3,192(sp)
10104874:	1801a31e 	bne	r3,zero,10104f04 <___vfprintf_internal_r+0xe00>
10104878:	d9003117 	ldw	r4,196(sp)
1010487c:	d8c02a17 	ldw	r3,168(sp)
10104880:	20e7c83a 	sub	r19,r4,r3
10104884:	04c19f0e 	bge	zero,r19,10104f04 <___vfprintf_internal_r+0xe00>
10104888:	02400404 	movi	r9,16
1010488c:	d8c02017 	ldw	r3,128(sp)
10104890:	d8801f17 	ldw	r2,124(sp)
10104894:	4cc50d0e 	bge	r9,r19,10105ccc <___vfprintf_internal_r+0x1bc8>
10104898:	01440474 	movhi	r5,4113
1010489c:	29459b84 	addi	r5,r5,5742
101048a0:	dc403b15 	stw	r17,236(sp)
101048a4:	d9403515 	stw	r5,212(sp)
101048a8:	9823883a 	mov	r17,r19
101048ac:	482d883a 	mov	r22,r9
101048b0:	9027883a 	mov	r19,r18
101048b4:	070001c4 	movi	fp,7
101048b8:	8025883a 	mov	r18,r16
101048bc:	dc002c17 	ldw	r16,176(sp)
101048c0:	00000306 	br	101048d0 <___vfprintf_internal_r+0x7cc>
101048c4:	8c7ffc04 	addi	r17,r17,-16
101048c8:	42000204 	addi	r8,r8,8
101048cc:	b440130e 	bge	r22,r17,1010491c <___vfprintf_internal_r+0x818>
101048d0:	01040474 	movhi	r4,4113
101048d4:	18c00404 	addi	r3,r3,16
101048d8:	10800044 	addi	r2,r2,1
101048dc:	21059b84 	addi	r4,r4,5742
101048e0:	41000015 	stw	r4,0(r8)
101048e4:	45800115 	stw	r22,4(r8)
101048e8:	d8c02015 	stw	r3,128(sp)
101048ec:	d8801f15 	stw	r2,124(sp)
101048f0:	e0bff40e 	bge	fp,r2,101048c4 <__alt_data_end+0xfffe48c4>
101048f4:	d9801e04 	addi	r6,sp,120
101048f8:	b80b883a 	mov	r5,r23
101048fc:	8009883a 	mov	r4,r16
10104900:	010a0f00 	call	1010a0f0 <__sprint_r>
10104904:	103f011e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10104908:	8c7ffc04 	addi	r17,r17,-16
1010490c:	d8c02017 	ldw	r3,128(sp)
10104910:	d8801f17 	ldw	r2,124(sp)
10104914:	da000404 	addi	r8,sp,16
10104918:	b47fed16 	blt	r22,r17,101048d0 <__alt_data_end+0xfffe48d0>
1010491c:	9021883a 	mov	r16,r18
10104920:	9825883a 	mov	r18,r19
10104924:	8827883a 	mov	r19,r17
10104928:	dc403b17 	ldw	r17,236(sp)
1010492c:	d9403517 	ldw	r5,212(sp)
10104930:	98c7883a 	add	r3,r19,r3
10104934:	10800044 	addi	r2,r2,1
10104938:	41400015 	stw	r5,0(r8)
1010493c:	44c00115 	stw	r19,4(r8)
10104940:	d8c02015 	stw	r3,128(sp)
10104944:	d8801f15 	stw	r2,124(sp)
10104948:	010001c4 	movi	r4,7
1010494c:	2082a316 	blt	r4,r2,101053dc <___vfprintf_internal_r+0x12d8>
10104950:	df002787 	ldb	fp,158(sp)
10104954:	42000204 	addi	r8,r8,8
10104958:	e0000c26 	beq	fp,zero,1010498c <___vfprintf_internal_r+0x888>
1010495c:	d8801f17 	ldw	r2,124(sp)
10104960:	d9002784 	addi	r4,sp,158
10104964:	18c00044 	addi	r3,r3,1
10104968:	10800044 	addi	r2,r2,1
1010496c:	41000015 	stw	r4,0(r8)
10104970:	01000044 	movi	r4,1
10104974:	41000115 	stw	r4,4(r8)
10104978:	d8c02015 	stw	r3,128(sp)
1010497c:	d8801f15 	stw	r2,124(sp)
10104980:	010001c4 	movi	r4,7
10104984:	20823c16 	blt	r4,r2,10105278 <___vfprintf_internal_r+0x1174>
10104988:	42000204 	addi	r8,r8,8
1010498c:	d8802b17 	ldw	r2,172(sp)
10104990:	10000c26 	beq	r2,zero,101049c4 <___vfprintf_internal_r+0x8c0>
10104994:	d8801f17 	ldw	r2,124(sp)
10104998:	d9002704 	addi	r4,sp,156
1010499c:	18c00084 	addi	r3,r3,2
101049a0:	10800044 	addi	r2,r2,1
101049a4:	41000015 	stw	r4,0(r8)
101049a8:	01000084 	movi	r4,2
101049ac:	41000115 	stw	r4,4(r8)
101049b0:	d8c02015 	stw	r3,128(sp)
101049b4:	d8801f15 	stw	r2,124(sp)
101049b8:	010001c4 	movi	r4,7
101049bc:	20823616 	blt	r4,r2,10105298 <___vfprintf_internal_r+0x1194>
101049c0:	42000204 	addi	r8,r8,8
101049c4:	d9003017 	ldw	r4,192(sp)
101049c8:	00802004 	movi	r2,128
101049cc:	20819926 	beq	r4,r2,10105034 <___vfprintf_internal_r+0xf30>
101049d0:	d9402917 	ldw	r5,164(sp)
101049d4:	d8802e17 	ldw	r2,184(sp)
101049d8:	28adc83a 	sub	r22,r5,r2
101049dc:	0580310e 	bge	zero,r22,10104aa4 <___vfprintf_internal_r+0x9a0>
101049e0:	07000404 	movi	fp,16
101049e4:	d8801f17 	ldw	r2,124(sp)
101049e8:	e584140e 	bge	fp,r22,10105a3c <___vfprintf_internal_r+0x1938>
101049ec:	01440474 	movhi	r5,4113
101049f0:	29459784 	addi	r5,r5,5726
101049f4:	dc402915 	stw	r17,164(sp)
101049f8:	d9402b15 	stw	r5,172(sp)
101049fc:	b023883a 	mov	r17,r22
10104a00:	04c001c4 	movi	r19,7
10104a04:	a82d883a 	mov	r22,r21
10104a08:	902b883a 	mov	r21,r18
10104a0c:	8025883a 	mov	r18,r16
10104a10:	dc002c17 	ldw	r16,176(sp)
10104a14:	00000306 	br	10104a24 <___vfprintf_internal_r+0x920>
10104a18:	8c7ffc04 	addi	r17,r17,-16
10104a1c:	42000204 	addi	r8,r8,8
10104a20:	e440110e 	bge	fp,r17,10104a68 <___vfprintf_internal_r+0x964>
10104a24:	18c00404 	addi	r3,r3,16
10104a28:	10800044 	addi	r2,r2,1
10104a2c:	45000015 	stw	r20,0(r8)
10104a30:	47000115 	stw	fp,4(r8)
10104a34:	d8c02015 	stw	r3,128(sp)
10104a38:	d8801f15 	stw	r2,124(sp)
10104a3c:	98bff60e 	bge	r19,r2,10104a18 <__alt_data_end+0xfffe4a18>
10104a40:	d9801e04 	addi	r6,sp,120
10104a44:	b80b883a 	mov	r5,r23
10104a48:	8009883a 	mov	r4,r16
10104a4c:	010a0f00 	call	1010a0f0 <__sprint_r>
10104a50:	103eae1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10104a54:	8c7ffc04 	addi	r17,r17,-16
10104a58:	d8c02017 	ldw	r3,128(sp)
10104a5c:	d8801f17 	ldw	r2,124(sp)
10104a60:	da000404 	addi	r8,sp,16
10104a64:	e47fef16 	blt	fp,r17,10104a24 <__alt_data_end+0xfffe4a24>
10104a68:	9021883a 	mov	r16,r18
10104a6c:	a825883a 	mov	r18,r21
10104a70:	b02b883a 	mov	r21,r22
10104a74:	882d883a 	mov	r22,r17
10104a78:	dc402917 	ldw	r17,164(sp)
10104a7c:	d9002b17 	ldw	r4,172(sp)
10104a80:	1d87883a 	add	r3,r3,r22
10104a84:	10800044 	addi	r2,r2,1
10104a88:	41000015 	stw	r4,0(r8)
10104a8c:	45800115 	stw	r22,4(r8)
10104a90:	d8c02015 	stw	r3,128(sp)
10104a94:	d8801f15 	stw	r2,124(sp)
10104a98:	010001c4 	movi	r4,7
10104a9c:	2081ee16 	blt	r4,r2,10105258 <___vfprintf_internal_r+0x1154>
10104aa0:	42000204 	addi	r8,r8,8
10104aa4:	9080400c 	andi	r2,r18,256
10104aa8:	1001181e 	bne	r2,zero,10104f0c <___vfprintf_internal_r+0xe08>
10104aac:	d9402e17 	ldw	r5,184(sp)
10104ab0:	d8801f17 	ldw	r2,124(sp)
10104ab4:	44000015 	stw	r16,0(r8)
10104ab8:	1947883a 	add	r3,r3,r5
10104abc:	10800044 	addi	r2,r2,1
10104ac0:	41400115 	stw	r5,4(r8)
10104ac4:	d8c02015 	stw	r3,128(sp)
10104ac8:	d8801f15 	stw	r2,124(sp)
10104acc:	010001c4 	movi	r4,7
10104ad0:	2081d316 	blt	r4,r2,10105220 <___vfprintf_internal_r+0x111c>
10104ad4:	42000204 	addi	r8,r8,8
10104ad8:	9480010c 	andi	r18,r18,4
10104adc:	90003226 	beq	r18,zero,10104ba8 <___vfprintf_internal_r+0xaa4>
10104ae0:	d9403117 	ldw	r5,196(sp)
10104ae4:	d8802a17 	ldw	r2,168(sp)
10104ae8:	28a1c83a 	sub	r16,r5,r2
10104aec:	04002e0e 	bge	zero,r16,10104ba8 <___vfprintf_internal_r+0xaa4>
10104af0:	04400404 	movi	r17,16
10104af4:	d8801f17 	ldw	r2,124(sp)
10104af8:	8c04a20e 	bge	r17,r16,10105d84 <___vfprintf_internal_r+0x1c80>
10104afc:	01440474 	movhi	r5,4113
10104b00:	29459b84 	addi	r5,r5,5742
10104b04:	d9403515 	stw	r5,212(sp)
10104b08:	048001c4 	movi	r18,7
10104b0c:	dcc02c17 	ldw	r19,176(sp)
10104b10:	00000306 	br	10104b20 <___vfprintf_internal_r+0xa1c>
10104b14:	843ffc04 	addi	r16,r16,-16
10104b18:	42000204 	addi	r8,r8,8
10104b1c:	8c00130e 	bge	r17,r16,10104b6c <___vfprintf_internal_r+0xa68>
10104b20:	01040474 	movhi	r4,4113
10104b24:	18c00404 	addi	r3,r3,16
10104b28:	10800044 	addi	r2,r2,1
10104b2c:	21059b84 	addi	r4,r4,5742
10104b30:	41000015 	stw	r4,0(r8)
10104b34:	44400115 	stw	r17,4(r8)
10104b38:	d8c02015 	stw	r3,128(sp)
10104b3c:	d8801f15 	stw	r2,124(sp)
10104b40:	90bff40e 	bge	r18,r2,10104b14 <__alt_data_end+0xfffe4b14>
10104b44:	d9801e04 	addi	r6,sp,120
10104b48:	b80b883a 	mov	r5,r23
10104b4c:	9809883a 	mov	r4,r19
10104b50:	010a0f00 	call	1010a0f0 <__sprint_r>
10104b54:	103e6d1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10104b58:	843ffc04 	addi	r16,r16,-16
10104b5c:	d8c02017 	ldw	r3,128(sp)
10104b60:	d8801f17 	ldw	r2,124(sp)
10104b64:	da000404 	addi	r8,sp,16
10104b68:	8c3fed16 	blt	r17,r16,10104b20 <__alt_data_end+0xfffe4b20>
10104b6c:	d9403517 	ldw	r5,212(sp)
10104b70:	1c07883a 	add	r3,r3,r16
10104b74:	10800044 	addi	r2,r2,1
10104b78:	41400015 	stw	r5,0(r8)
10104b7c:	44000115 	stw	r16,4(r8)
10104b80:	d8c02015 	stw	r3,128(sp)
10104b84:	d8801f15 	stw	r2,124(sp)
10104b88:	010001c4 	movi	r4,7
10104b8c:	2080060e 	bge	r4,r2,10104ba8 <___vfprintf_internal_r+0xaa4>
10104b90:	d9002c17 	ldw	r4,176(sp)
10104b94:	d9801e04 	addi	r6,sp,120
10104b98:	b80b883a 	mov	r5,r23
10104b9c:	010a0f00 	call	1010a0f0 <__sprint_r>
10104ba0:	103e5a1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10104ba4:	d8c02017 	ldw	r3,128(sp)
10104ba8:	d8803117 	ldw	r2,196(sp)
10104bac:	d9002a17 	ldw	r4,168(sp)
10104bb0:	1100010e 	bge	r2,r4,10104bb8 <___vfprintf_internal_r+0xab4>
10104bb4:	2005883a 	mov	r2,r4
10104bb8:	d9402f17 	ldw	r5,188(sp)
10104bbc:	288b883a 	add	r5,r5,r2
10104bc0:	d9402f15 	stw	r5,188(sp)
10104bc4:	18019e1e 	bne	r3,zero,10105240 <___vfprintf_internal_r+0x113c>
10104bc8:	a8800007 	ldb	r2,0(r21)
10104bcc:	d8001f15 	stw	zero,124(sp)
10104bd0:	da000404 	addi	r8,sp,16
10104bd4:	103d851e 	bne	r2,zero,101041ec <__alt_data_end+0xfffe41ec>
10104bd8:	a821883a 	mov	r16,r21
10104bdc:	003d9b06 	br	1010424c <__alt_data_end+0xfffe424c>
10104be0:	18c03fcc 	andi	r3,r3,255
10104be4:	1805c11e 	bne	r3,zero,101062ec <___vfprintf_internal_r+0x21e8>
10104be8:	94800414 	ori	r18,r18,16
10104bec:	9080080c 	andi	r2,r18,32
10104bf0:	10020c26 	beq	r2,zero,10105424 <___vfprintf_internal_r+0x1320>
10104bf4:	d8802d17 	ldw	r2,180(sp)
10104bf8:	d9002917 	ldw	r4,164(sp)
10104bfc:	d8002785 	stb	zero,158(sp)
10104c00:	10c00204 	addi	r3,r2,8
10104c04:	14c00017 	ldw	r19,0(r2)
10104c08:	15800117 	ldw	r22,4(r2)
10104c0c:	20040f16 	blt	r4,zero,10105c4c <___vfprintf_internal_r+0x1b48>
10104c10:	013fdfc4 	movi	r4,-129
10104c14:	9d84b03a 	or	r2,r19,r22
10104c18:	d8c02d15 	stw	r3,180(sp)
10104c1c:	9124703a 	and	r18,r18,r4
10104c20:	0039883a 	mov	fp,zero
10104c24:	103e891e 	bne	r2,zero,1010464c <__alt_data_end+0xfffe464c>
10104c28:	d9002917 	ldw	r4,164(sp)
10104c2c:	2002c11e 	bne	r4,zero,10105734 <___vfprintf_internal_r+0x1630>
10104c30:	d8002915 	stw	zero,164(sp)
10104c34:	d8002e15 	stw	zero,184(sp)
10104c38:	dc001e04 	addi	r16,sp,120
10104c3c:	003ef806 	br	10104820 <__alt_data_end+0xfffe4820>
10104c40:	18c03fcc 	andi	r3,r3,255
10104c44:	18059d1e 	bne	r3,zero,101062bc <___vfprintf_internal_r+0x21b8>
10104c48:	01440474 	movhi	r5,4113
10104c4c:	29458b04 	addi	r5,r5,5676
10104c50:	d9403915 	stw	r5,228(sp)
10104c54:	9080080c 	andi	r2,r18,32
10104c58:	10005226 	beq	r2,zero,10104da4 <___vfprintf_internal_r+0xca0>
10104c5c:	d8802d17 	ldw	r2,180(sp)
10104c60:	14c00017 	ldw	r19,0(r2)
10104c64:	15800117 	ldw	r22,4(r2)
10104c68:	10800204 	addi	r2,r2,8
10104c6c:	d8802d15 	stw	r2,180(sp)
10104c70:	9080004c 	andi	r2,r18,1
10104c74:	10019026 	beq	r2,zero,101052b8 <___vfprintf_internal_r+0x11b4>
10104c78:	9d84b03a 	or	r2,r19,r22
10104c7c:	10036926 	beq	r2,zero,10105a24 <___vfprintf_internal_r+0x1920>
10104c80:	d8c02917 	ldw	r3,164(sp)
10104c84:	00800c04 	movi	r2,48
10104c88:	d8802705 	stb	r2,156(sp)
10104c8c:	dc402745 	stb	r17,157(sp)
10104c90:	d8002785 	stb	zero,158(sp)
10104c94:	90800094 	ori	r2,r18,2
10104c98:	18045d16 	blt	r3,zero,10105e10 <___vfprintf_internal_r+0x1d0c>
10104c9c:	00bfdfc4 	movi	r2,-129
10104ca0:	90a4703a 	and	r18,r18,r2
10104ca4:	94800094 	ori	r18,r18,2
10104ca8:	0039883a 	mov	fp,zero
10104cac:	d9003917 	ldw	r4,228(sp)
10104cb0:	dc001e04 	addi	r16,sp,120
10104cb4:	988003cc 	andi	r2,r19,15
10104cb8:	b006973a 	slli	r3,r22,28
10104cbc:	2085883a 	add	r2,r4,r2
10104cc0:	9826d13a 	srli	r19,r19,4
10104cc4:	10800003 	ldbu	r2,0(r2)
10104cc8:	b02cd13a 	srli	r22,r22,4
10104ccc:	843fffc4 	addi	r16,r16,-1
10104cd0:	1ce6b03a 	or	r19,r3,r19
10104cd4:	80800005 	stb	r2,0(r16)
10104cd8:	9d84b03a 	or	r2,r19,r22
10104cdc:	103ff51e 	bne	r2,zero,10104cb4 <__alt_data_end+0xfffe4cb4>
10104ce0:	d8c02817 	ldw	r3,160(sp)
10104ce4:	1c07c83a 	sub	r3,r3,r16
10104ce8:	d8c02e15 	stw	r3,184(sp)
10104cec:	003ecc06 	br	10104820 <__alt_data_end+0xfffe4820>
10104cf0:	18c03fcc 	andi	r3,r3,255
10104cf4:	183e9f26 	beq	r3,zero,10104774 <__alt_data_end+0xfffe4774>
10104cf8:	d9c02785 	stb	r7,158(sp)
10104cfc:	003e9d06 	br	10104774 <__alt_data_end+0xfffe4774>
10104d00:	00c00044 	movi	r3,1
10104d04:	01c00ac4 	movi	r7,43
10104d08:	ac400007 	ldb	r17,0(r21)
10104d0c:	003d5e06 	br	10104288 <__alt_data_end+0xfffe4288>
10104d10:	94800814 	ori	r18,r18,32
10104d14:	ac400007 	ldb	r17,0(r21)
10104d18:	003d5b06 	br	10104288 <__alt_data_end+0xfffe4288>
10104d1c:	d8c02d17 	ldw	r3,180(sp)
10104d20:	d8002785 	stb	zero,158(sp)
10104d24:	1c000017 	ldw	r16,0(r3)
10104d28:	1cc00104 	addi	r19,r3,4
10104d2c:	80041926 	beq	r16,zero,10105d94 <___vfprintf_internal_r+0x1c90>
10104d30:	d9002917 	ldw	r4,164(sp)
10104d34:	2003d016 	blt	r4,zero,10105c78 <___vfprintf_internal_r+0x1b74>
10104d38:	200d883a 	mov	r6,r4
10104d3c:	000b883a 	mov	r5,zero
10104d40:	8009883a 	mov	r4,r16
10104d44:	da003d15 	stw	r8,244(sp)
10104d48:	010855c0 	call	1010855c <memchr>
10104d4c:	da003d17 	ldw	r8,244(sp)
10104d50:	10045426 	beq	r2,zero,10105ea4 <___vfprintf_internal_r+0x1da0>
10104d54:	1405c83a 	sub	r2,r2,r16
10104d58:	d8802e15 	stw	r2,184(sp)
10104d5c:	1003cc16 	blt	r2,zero,10105c90 <___vfprintf_internal_r+0x1b8c>
10104d60:	df002783 	ldbu	fp,158(sp)
10104d64:	d8802a15 	stw	r2,168(sp)
10104d68:	dcc02d15 	stw	r19,180(sp)
10104d6c:	d8002915 	stw	zero,164(sp)
10104d70:	d8003215 	stw	zero,200(sp)
10104d74:	003eb006 	br	10104838 <__alt_data_end+0xfffe4838>
10104d78:	18c03fcc 	andi	r3,r3,255
10104d7c:	183f9b26 	beq	r3,zero,10104bec <__alt_data_end+0xfffe4bec>
10104d80:	d9c02785 	stb	r7,158(sp)
10104d84:	003f9906 	br	10104bec <__alt_data_end+0xfffe4bec>
10104d88:	18c03fcc 	andi	r3,r3,255
10104d8c:	1805551e 	bne	r3,zero,101062e4 <___vfprintf_internal_r+0x21e0>
10104d90:	01440474 	movhi	r5,4113
10104d94:	29459004 	addi	r5,r5,5696
10104d98:	d9403915 	stw	r5,228(sp)
10104d9c:	9080080c 	andi	r2,r18,32
10104da0:	103fae1e 	bne	r2,zero,10104c5c <__alt_data_end+0xfffe4c5c>
10104da4:	9080040c 	andi	r2,r18,16
10104da8:	1002de26 	beq	r2,zero,10105924 <___vfprintf_internal_r+0x1820>
10104dac:	d8c02d17 	ldw	r3,180(sp)
10104db0:	002d883a 	mov	r22,zero
10104db4:	1cc00017 	ldw	r19,0(r3)
10104db8:	18c00104 	addi	r3,r3,4
10104dbc:	d8c02d15 	stw	r3,180(sp)
10104dc0:	003fab06 	br	10104c70 <__alt_data_end+0xfffe4c70>
10104dc4:	38803fcc 	andi	r2,r7,255
10104dc8:	1080201c 	xori	r2,r2,128
10104dcc:	10bfe004 	addi	r2,r2,-128
10104dd0:	1002d21e 	bne	r2,zero,1010591c <___vfprintf_internal_r+0x1818>
10104dd4:	00c00044 	movi	r3,1
10104dd8:	01c00804 	movi	r7,32
10104ddc:	ac400007 	ldb	r17,0(r21)
10104de0:	003d2906 	br	10104288 <__alt_data_end+0xfffe4288>
10104de4:	94800054 	ori	r18,r18,1
10104de8:	ac400007 	ldb	r17,0(r21)
10104dec:	003d2606 	br	10104288 <__alt_data_end+0xfffe4288>
10104df0:	18c03fcc 	andi	r3,r3,255
10104df4:	183e0526 	beq	r3,zero,1010460c <__alt_data_end+0xfffe460c>
10104df8:	d9c02785 	stb	r7,158(sp)
10104dfc:	003e0306 	br	1010460c <__alt_data_end+0xfffe460c>
10104e00:	94801014 	ori	r18,r18,64
10104e04:	ac400007 	ldb	r17,0(r21)
10104e08:	003d1f06 	br	10104288 <__alt_data_end+0xfffe4288>
10104e0c:	ac400007 	ldb	r17,0(r21)
10104e10:	8a438726 	beq	r17,r9,10105c30 <___vfprintf_internal_r+0x1b2c>
10104e14:	94800414 	ori	r18,r18,16
10104e18:	003d1b06 	br	10104288 <__alt_data_end+0xfffe4288>
10104e1c:	18c03fcc 	andi	r3,r3,255
10104e20:	1805341e 	bne	r3,zero,101062f4 <___vfprintf_internal_r+0x21f0>
10104e24:	9080080c 	andi	r2,r18,32
10104e28:	1002cd26 	beq	r2,zero,10105960 <___vfprintf_internal_r+0x185c>
10104e2c:	d9402d17 	ldw	r5,180(sp)
10104e30:	d9002f17 	ldw	r4,188(sp)
10104e34:	28800017 	ldw	r2,0(r5)
10104e38:	2007d7fa 	srai	r3,r4,31
10104e3c:	29400104 	addi	r5,r5,4
10104e40:	d9402d15 	stw	r5,180(sp)
10104e44:	11000015 	stw	r4,0(r2)
10104e48:	10c00115 	stw	r3,4(r2)
10104e4c:	003ce506 	br	101041e4 <__alt_data_end+0xfffe41e4>
10104e50:	d8c02d17 	ldw	r3,180(sp)
10104e54:	d9002d17 	ldw	r4,180(sp)
10104e58:	d8002785 	stb	zero,158(sp)
10104e5c:	18800017 	ldw	r2,0(r3)
10104e60:	21000104 	addi	r4,r4,4
10104e64:	00c00044 	movi	r3,1
10104e68:	d8c02a15 	stw	r3,168(sp)
10104e6c:	d8801405 	stb	r2,80(sp)
10104e70:	d9002d15 	stw	r4,180(sp)
10104e74:	d8c02e15 	stw	r3,184(sp)
10104e78:	d8002915 	stw	zero,164(sp)
10104e7c:	d8003215 	stw	zero,200(sp)
10104e80:	dc001404 	addi	r16,sp,80
10104e84:	0039883a 	mov	fp,zero
10104e88:	003e7206 	br	10104854 <__alt_data_end+0xfffe4854>
10104e8c:	01040474 	movhi	r4,4113
10104e90:	21059004 	addi	r4,r4,5696
10104e94:	0039883a 	mov	fp,zero
10104e98:	d9003915 	stw	r4,228(sp)
10104e9c:	04401e04 	movi	r17,120
10104ea0:	003f8206 	br	10104cac <__alt_data_end+0xfffe4cac>
10104ea4:	18c03fcc 	andi	r3,r3,255
10104ea8:	1805061e 	bne	r3,zero,101062c4 <___vfprintf_internal_r+0x21c0>
10104eac:	883d9126 	beq	r17,zero,101044f4 <__alt_data_end+0xfffe44f4>
10104eb0:	00c00044 	movi	r3,1
10104eb4:	d8c02a15 	stw	r3,168(sp)
10104eb8:	dc401405 	stb	r17,80(sp)
10104ebc:	d8002785 	stb	zero,158(sp)
10104ec0:	003fec06 	br	10104e74 <__alt_data_end+0xfffe4e74>
10104ec4:	01440474 	movhi	r5,4113
10104ec8:	29459004 	addi	r5,r5,5696
10104ecc:	d9403915 	stw	r5,228(sp)
10104ed0:	d8c02d15 	stw	r3,180(sp)
10104ed4:	1025883a 	mov	r18,r2
10104ed8:	04401e04 	movi	r17,120
10104edc:	9d84b03a 	or	r2,r19,r22
10104ee0:	1000fc1e 	bne	r2,zero,101052d4 <___vfprintf_internal_r+0x11d0>
10104ee4:	0039883a 	mov	fp,zero
10104ee8:	00800084 	movi	r2,2
10104eec:	10803fcc 	andi	r2,r2,255
10104ef0:	00c00044 	movi	r3,1
10104ef4:	10c20f26 	beq	r2,r3,10105734 <___vfprintf_internal_r+0x1630>
10104ef8:	00c00084 	movi	r3,2
10104efc:	10fd6326 	beq	r2,r3,1010448c <__alt_data_end+0xfffe448c>
10104f00:	003e2d06 	br	101047b8 <__alt_data_end+0xfffe47b8>
10104f04:	d8c02017 	ldw	r3,128(sp)
10104f08:	003e9306 	br	10104958 <__alt_data_end+0xfffe4958>
10104f0c:	00801944 	movi	r2,101
10104f10:	14407e0e 	bge	r2,r17,1010510c <___vfprintf_internal_r+0x1008>
10104f14:	d9003617 	ldw	r4,216(sp)
10104f18:	d9403817 	ldw	r5,224(sp)
10104f1c:	000d883a 	mov	r6,zero
10104f20:	000f883a 	mov	r7,zero
10104f24:	d8c03c15 	stw	r3,240(sp)
10104f28:	da003d15 	stw	r8,244(sp)
10104f2c:	010d88c0 	call	1010d88c <__eqdf2>
10104f30:	d8c03c17 	ldw	r3,240(sp)
10104f34:	da003d17 	ldw	r8,244(sp)
10104f38:	1000f71e 	bne	r2,zero,10105318 <___vfprintf_internal_r+0x1214>
10104f3c:	d8801f17 	ldw	r2,124(sp)
10104f40:	01040474 	movhi	r4,4113
10104f44:	21059704 	addi	r4,r4,5724
10104f48:	18c00044 	addi	r3,r3,1
10104f4c:	10800044 	addi	r2,r2,1
10104f50:	41000015 	stw	r4,0(r8)
10104f54:	01000044 	movi	r4,1
10104f58:	41000115 	stw	r4,4(r8)
10104f5c:	d8c02015 	stw	r3,128(sp)
10104f60:	d8801f15 	stw	r2,124(sp)
10104f64:	010001c4 	movi	r4,7
10104f68:	2082b816 	blt	r4,r2,10105a4c <___vfprintf_internal_r+0x1948>
10104f6c:	42000204 	addi	r8,r8,8
10104f70:	d8802617 	ldw	r2,152(sp)
10104f74:	d9403317 	ldw	r5,204(sp)
10104f78:	11400216 	blt	r2,r5,10104f84 <___vfprintf_internal_r+0xe80>
10104f7c:	9080004c 	andi	r2,r18,1
10104f80:	103ed526 	beq	r2,zero,10104ad8 <__alt_data_end+0xfffe4ad8>
10104f84:	d8803717 	ldw	r2,220(sp)
10104f88:	d9003417 	ldw	r4,208(sp)
10104f8c:	d9403717 	ldw	r5,220(sp)
10104f90:	1887883a 	add	r3,r3,r2
10104f94:	d8801f17 	ldw	r2,124(sp)
10104f98:	41000015 	stw	r4,0(r8)
10104f9c:	41400115 	stw	r5,4(r8)
10104fa0:	10800044 	addi	r2,r2,1
10104fa4:	d8c02015 	stw	r3,128(sp)
10104fa8:	d8801f15 	stw	r2,124(sp)
10104fac:	010001c4 	movi	r4,7
10104fb0:	20832916 	blt	r4,r2,10105c58 <___vfprintf_internal_r+0x1b54>
10104fb4:	42000204 	addi	r8,r8,8
10104fb8:	d8803317 	ldw	r2,204(sp)
10104fbc:	143fffc4 	addi	r16,r2,-1
10104fc0:	043ec50e 	bge	zero,r16,10104ad8 <__alt_data_end+0xfffe4ad8>
10104fc4:	04400404 	movi	r17,16
10104fc8:	d8801f17 	ldw	r2,124(sp)
10104fcc:	8c00880e 	bge	r17,r16,101051f0 <___vfprintf_internal_r+0x10ec>
10104fd0:	01440474 	movhi	r5,4113
10104fd4:	29459784 	addi	r5,r5,5726
10104fd8:	d9402b15 	stw	r5,172(sp)
10104fdc:	058001c4 	movi	r22,7
10104fe0:	dcc02c17 	ldw	r19,176(sp)
10104fe4:	00000306 	br	10104ff4 <___vfprintf_internal_r+0xef0>
10104fe8:	42000204 	addi	r8,r8,8
10104fec:	843ffc04 	addi	r16,r16,-16
10104ff0:	8c00820e 	bge	r17,r16,101051fc <___vfprintf_internal_r+0x10f8>
10104ff4:	18c00404 	addi	r3,r3,16
10104ff8:	10800044 	addi	r2,r2,1
10104ffc:	45000015 	stw	r20,0(r8)
10105000:	44400115 	stw	r17,4(r8)
10105004:	d8c02015 	stw	r3,128(sp)
10105008:	d8801f15 	stw	r2,124(sp)
1010500c:	b0bff60e 	bge	r22,r2,10104fe8 <__alt_data_end+0xfffe4fe8>
10105010:	d9801e04 	addi	r6,sp,120
10105014:	b80b883a 	mov	r5,r23
10105018:	9809883a 	mov	r4,r19
1010501c:	010a0f00 	call	1010a0f0 <__sprint_r>
10105020:	103d3a1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105024:	d8c02017 	ldw	r3,128(sp)
10105028:	d8801f17 	ldw	r2,124(sp)
1010502c:	da000404 	addi	r8,sp,16
10105030:	003fee06 	br	10104fec <__alt_data_end+0xfffe4fec>
10105034:	d9403117 	ldw	r5,196(sp)
10105038:	d8802a17 	ldw	r2,168(sp)
1010503c:	28adc83a 	sub	r22,r5,r2
10105040:	05be630e 	bge	zero,r22,101049d0 <__alt_data_end+0xfffe49d0>
10105044:	07000404 	movi	fp,16
10105048:	d8801f17 	ldw	r2,124(sp)
1010504c:	e5838f0e 	bge	fp,r22,10105e8c <___vfprintf_internal_r+0x1d88>
10105050:	01440474 	movhi	r5,4113
10105054:	29459784 	addi	r5,r5,5726
10105058:	dc403015 	stw	r17,192(sp)
1010505c:	d9402b15 	stw	r5,172(sp)
10105060:	b023883a 	mov	r17,r22
10105064:	04c001c4 	movi	r19,7
10105068:	a82d883a 	mov	r22,r21
1010506c:	902b883a 	mov	r21,r18
10105070:	8025883a 	mov	r18,r16
10105074:	dc002c17 	ldw	r16,176(sp)
10105078:	00000306 	br	10105088 <___vfprintf_internal_r+0xf84>
1010507c:	8c7ffc04 	addi	r17,r17,-16
10105080:	42000204 	addi	r8,r8,8
10105084:	e440110e 	bge	fp,r17,101050cc <___vfprintf_internal_r+0xfc8>
10105088:	18c00404 	addi	r3,r3,16
1010508c:	10800044 	addi	r2,r2,1
10105090:	45000015 	stw	r20,0(r8)
10105094:	47000115 	stw	fp,4(r8)
10105098:	d8c02015 	stw	r3,128(sp)
1010509c:	d8801f15 	stw	r2,124(sp)
101050a0:	98bff60e 	bge	r19,r2,1010507c <__alt_data_end+0xfffe507c>
101050a4:	d9801e04 	addi	r6,sp,120
101050a8:	b80b883a 	mov	r5,r23
101050ac:	8009883a 	mov	r4,r16
101050b0:	010a0f00 	call	1010a0f0 <__sprint_r>
101050b4:	103d151e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
101050b8:	8c7ffc04 	addi	r17,r17,-16
101050bc:	d8c02017 	ldw	r3,128(sp)
101050c0:	d8801f17 	ldw	r2,124(sp)
101050c4:	da000404 	addi	r8,sp,16
101050c8:	e47fef16 	blt	fp,r17,10105088 <__alt_data_end+0xfffe5088>
101050cc:	9021883a 	mov	r16,r18
101050d0:	a825883a 	mov	r18,r21
101050d4:	b02b883a 	mov	r21,r22
101050d8:	882d883a 	mov	r22,r17
101050dc:	dc403017 	ldw	r17,192(sp)
101050e0:	d9002b17 	ldw	r4,172(sp)
101050e4:	1d87883a 	add	r3,r3,r22
101050e8:	10800044 	addi	r2,r2,1
101050ec:	41000015 	stw	r4,0(r8)
101050f0:	45800115 	stw	r22,4(r8)
101050f4:	d8c02015 	stw	r3,128(sp)
101050f8:	d8801f15 	stw	r2,124(sp)
101050fc:	010001c4 	movi	r4,7
10105100:	20818e16 	blt	r4,r2,1010573c <___vfprintf_internal_r+0x1638>
10105104:	42000204 	addi	r8,r8,8
10105108:	003e3106 	br	101049d0 <__alt_data_end+0xfffe49d0>
1010510c:	d9403317 	ldw	r5,204(sp)
10105110:	00800044 	movi	r2,1
10105114:	18c00044 	addi	r3,r3,1
10105118:	1141530e 	bge	r2,r5,10105668 <___vfprintf_internal_r+0x1564>
1010511c:	dc401f17 	ldw	r17,124(sp)
10105120:	00800044 	movi	r2,1
10105124:	40800115 	stw	r2,4(r8)
10105128:	8c400044 	addi	r17,r17,1
1010512c:	44000015 	stw	r16,0(r8)
10105130:	d8c02015 	stw	r3,128(sp)
10105134:	dc401f15 	stw	r17,124(sp)
10105138:	008001c4 	movi	r2,7
1010513c:	14416b16 	blt	r2,r17,101056ec <___vfprintf_internal_r+0x15e8>
10105140:	42000204 	addi	r8,r8,8
10105144:	d8803717 	ldw	r2,220(sp)
10105148:	d9003417 	ldw	r4,208(sp)
1010514c:	8c400044 	addi	r17,r17,1
10105150:	10c7883a 	add	r3,r2,r3
10105154:	40800115 	stw	r2,4(r8)
10105158:	41000015 	stw	r4,0(r8)
1010515c:	d8c02015 	stw	r3,128(sp)
10105160:	dc401f15 	stw	r17,124(sp)
10105164:	008001c4 	movi	r2,7
10105168:	14416916 	blt	r2,r17,10105710 <___vfprintf_internal_r+0x160c>
1010516c:	45800204 	addi	r22,r8,8
10105170:	d9003617 	ldw	r4,216(sp)
10105174:	d9403817 	ldw	r5,224(sp)
10105178:	000d883a 	mov	r6,zero
1010517c:	000f883a 	mov	r7,zero
10105180:	d8c03c15 	stw	r3,240(sp)
10105184:	010d88c0 	call	1010d88c <__eqdf2>
10105188:	d8c03c17 	ldw	r3,240(sp)
1010518c:	1000bc26 	beq	r2,zero,10105480 <___vfprintf_internal_r+0x137c>
10105190:	d9403317 	ldw	r5,204(sp)
10105194:	84000044 	addi	r16,r16,1
10105198:	8c400044 	addi	r17,r17,1
1010519c:	28bfffc4 	addi	r2,r5,-1
101051a0:	1887883a 	add	r3,r3,r2
101051a4:	b0800115 	stw	r2,4(r22)
101051a8:	b4000015 	stw	r16,0(r22)
101051ac:	d8c02015 	stw	r3,128(sp)
101051b0:	dc401f15 	stw	r17,124(sp)
101051b4:	008001c4 	movi	r2,7
101051b8:	14414316 	blt	r2,r17,101056c8 <___vfprintf_internal_r+0x15c4>
101051bc:	b5800204 	addi	r22,r22,8
101051c0:	d9003a17 	ldw	r4,232(sp)
101051c4:	df0022c4 	addi	fp,sp,139
101051c8:	8c400044 	addi	r17,r17,1
101051cc:	20c7883a 	add	r3,r4,r3
101051d0:	b7000015 	stw	fp,0(r22)
101051d4:	b1000115 	stw	r4,4(r22)
101051d8:	d8c02015 	stw	r3,128(sp)
101051dc:	dc401f15 	stw	r17,124(sp)
101051e0:	008001c4 	movi	r2,7
101051e4:	14400e16 	blt	r2,r17,10105220 <___vfprintf_internal_r+0x111c>
101051e8:	b2000204 	addi	r8,r22,8
101051ec:	003e3a06 	br	10104ad8 <__alt_data_end+0xfffe4ad8>
101051f0:	01040474 	movhi	r4,4113
101051f4:	21059784 	addi	r4,r4,5726
101051f8:	d9002b15 	stw	r4,172(sp)
101051fc:	d9002b17 	ldw	r4,172(sp)
10105200:	1c07883a 	add	r3,r3,r16
10105204:	44000115 	stw	r16,4(r8)
10105208:	41000015 	stw	r4,0(r8)
1010520c:	10800044 	addi	r2,r2,1
10105210:	d8c02015 	stw	r3,128(sp)
10105214:	d8801f15 	stw	r2,124(sp)
10105218:	010001c4 	movi	r4,7
1010521c:	20be2d0e 	bge	r4,r2,10104ad4 <__alt_data_end+0xfffe4ad4>
10105220:	d9002c17 	ldw	r4,176(sp)
10105224:	d9801e04 	addi	r6,sp,120
10105228:	b80b883a 	mov	r5,r23
1010522c:	010a0f00 	call	1010a0f0 <__sprint_r>
10105230:	103cb61e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105234:	d8c02017 	ldw	r3,128(sp)
10105238:	da000404 	addi	r8,sp,16
1010523c:	003e2606 	br	10104ad8 <__alt_data_end+0xfffe4ad8>
10105240:	d9002c17 	ldw	r4,176(sp)
10105244:	d9801e04 	addi	r6,sp,120
10105248:	b80b883a 	mov	r5,r23
1010524c:	010a0f00 	call	1010a0f0 <__sprint_r>
10105250:	103e5d26 	beq	r2,zero,10104bc8 <__alt_data_end+0xfffe4bc8>
10105254:	003cad06 	br	1010450c <__alt_data_end+0xfffe450c>
10105258:	d9002c17 	ldw	r4,176(sp)
1010525c:	d9801e04 	addi	r6,sp,120
10105260:	b80b883a 	mov	r5,r23
10105264:	010a0f00 	call	1010a0f0 <__sprint_r>
10105268:	103ca81e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
1010526c:	d8c02017 	ldw	r3,128(sp)
10105270:	da000404 	addi	r8,sp,16
10105274:	003e0b06 	br	10104aa4 <__alt_data_end+0xfffe4aa4>
10105278:	d9002c17 	ldw	r4,176(sp)
1010527c:	d9801e04 	addi	r6,sp,120
10105280:	b80b883a 	mov	r5,r23
10105284:	010a0f00 	call	1010a0f0 <__sprint_r>
10105288:	103ca01e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
1010528c:	d8c02017 	ldw	r3,128(sp)
10105290:	da000404 	addi	r8,sp,16
10105294:	003dbd06 	br	1010498c <__alt_data_end+0xfffe498c>
10105298:	d9002c17 	ldw	r4,176(sp)
1010529c:	d9801e04 	addi	r6,sp,120
101052a0:	b80b883a 	mov	r5,r23
101052a4:	010a0f00 	call	1010a0f0 <__sprint_r>
101052a8:	103c981e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
101052ac:	d8c02017 	ldw	r3,128(sp)
101052b0:	da000404 	addi	r8,sp,16
101052b4:	003dc306 	br	101049c4 <__alt_data_end+0xfffe49c4>
101052b8:	d8802917 	ldw	r2,164(sp)
101052bc:	d8002785 	stb	zero,158(sp)
101052c0:	103f0616 	blt	r2,zero,10104edc <__alt_data_end+0xfffe4edc>
101052c4:	00ffdfc4 	movi	r3,-129
101052c8:	9d84b03a 	or	r2,r19,r22
101052cc:	90e4703a 	and	r18,r18,r3
101052d0:	103c6b26 	beq	r2,zero,10104480 <__alt_data_end+0xfffe4480>
101052d4:	0039883a 	mov	fp,zero
101052d8:	003e7406 	br	10104cac <__alt_data_end+0xfffe4cac>
101052dc:	9080040c 	andi	r2,r18,16
101052e0:	1001b326 	beq	r2,zero,101059b0 <___vfprintf_internal_r+0x18ac>
101052e4:	d9002d17 	ldw	r4,180(sp)
101052e8:	d9402917 	ldw	r5,164(sp)
101052ec:	d8002785 	stb	zero,158(sp)
101052f0:	20800104 	addi	r2,r4,4
101052f4:	24c00017 	ldw	r19,0(r4)
101052f8:	002d883a 	mov	r22,zero
101052fc:	2801b516 	blt	r5,zero,101059d4 <___vfprintf_internal_r+0x18d0>
10105300:	00ffdfc4 	movi	r3,-129
10105304:	d8802d15 	stw	r2,180(sp)
10105308:	90e4703a 	and	r18,r18,r3
1010530c:	983d2726 	beq	r19,zero,101047ac <__alt_data_end+0xfffe47ac>
10105310:	0039883a 	mov	fp,zero
10105314:	003d2a06 	br	101047c0 <__alt_data_end+0xfffe47c0>
10105318:	dc402617 	ldw	r17,152(sp)
1010531c:	0441d30e 	bge	zero,r17,10105a6c <___vfprintf_internal_r+0x1968>
10105320:	dc403217 	ldw	r17,200(sp)
10105324:	d8803317 	ldw	r2,204(sp)
10105328:	1440010e 	bge	r2,r17,10105330 <___vfprintf_internal_r+0x122c>
1010532c:	1023883a 	mov	r17,r2
10105330:	04400a0e 	bge	zero,r17,1010535c <___vfprintf_internal_r+0x1258>
10105334:	d8801f17 	ldw	r2,124(sp)
10105338:	1c47883a 	add	r3,r3,r17
1010533c:	44000015 	stw	r16,0(r8)
10105340:	10800044 	addi	r2,r2,1
10105344:	44400115 	stw	r17,4(r8)
10105348:	d8c02015 	stw	r3,128(sp)
1010534c:	d8801f15 	stw	r2,124(sp)
10105350:	010001c4 	movi	r4,7
10105354:	20826516 	blt	r4,r2,10105cec <___vfprintf_internal_r+0x1be8>
10105358:	42000204 	addi	r8,r8,8
1010535c:	88026116 	blt	r17,zero,10105ce4 <___vfprintf_internal_r+0x1be0>
10105360:	d9003217 	ldw	r4,200(sp)
10105364:	2463c83a 	sub	r17,r4,r17
10105368:	04407b0e 	bge	zero,r17,10105558 <___vfprintf_internal_r+0x1454>
1010536c:	05800404 	movi	r22,16
10105370:	d8801f17 	ldw	r2,124(sp)
10105374:	b4419d0e 	bge	r22,r17,101059ec <___vfprintf_internal_r+0x18e8>
10105378:	01040474 	movhi	r4,4113
1010537c:	21059784 	addi	r4,r4,5726
10105380:	d9002b15 	stw	r4,172(sp)
10105384:	070001c4 	movi	fp,7
10105388:	dcc02c17 	ldw	r19,176(sp)
1010538c:	00000306 	br	1010539c <___vfprintf_internal_r+0x1298>
10105390:	42000204 	addi	r8,r8,8
10105394:	8c7ffc04 	addi	r17,r17,-16
10105398:	b441970e 	bge	r22,r17,101059f8 <___vfprintf_internal_r+0x18f4>
1010539c:	18c00404 	addi	r3,r3,16
101053a0:	10800044 	addi	r2,r2,1
101053a4:	45000015 	stw	r20,0(r8)
101053a8:	45800115 	stw	r22,4(r8)
101053ac:	d8c02015 	stw	r3,128(sp)
101053b0:	d8801f15 	stw	r2,124(sp)
101053b4:	e0bff60e 	bge	fp,r2,10105390 <__alt_data_end+0xfffe5390>
101053b8:	d9801e04 	addi	r6,sp,120
101053bc:	b80b883a 	mov	r5,r23
101053c0:	9809883a 	mov	r4,r19
101053c4:	010a0f00 	call	1010a0f0 <__sprint_r>
101053c8:	103c501e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
101053cc:	d8c02017 	ldw	r3,128(sp)
101053d0:	d8801f17 	ldw	r2,124(sp)
101053d4:	da000404 	addi	r8,sp,16
101053d8:	003fee06 	br	10105394 <__alt_data_end+0xfffe5394>
101053dc:	d9002c17 	ldw	r4,176(sp)
101053e0:	d9801e04 	addi	r6,sp,120
101053e4:	b80b883a 	mov	r5,r23
101053e8:	010a0f00 	call	1010a0f0 <__sprint_r>
101053ec:	103c471e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
101053f0:	d8c02017 	ldw	r3,128(sp)
101053f4:	df002787 	ldb	fp,158(sp)
101053f8:	da000404 	addi	r8,sp,16
101053fc:	003d5606 	br	10104958 <__alt_data_end+0xfffe4958>
10105400:	9080040c 	andi	r2,r18,16
10105404:	10016126 	beq	r2,zero,1010598c <___vfprintf_internal_r+0x1888>
10105408:	d8802d17 	ldw	r2,180(sp)
1010540c:	14c00017 	ldw	r19,0(r2)
10105410:	10800104 	addi	r2,r2,4
10105414:	d8802d15 	stw	r2,180(sp)
10105418:	982dd7fa 	srai	r22,r19,31
1010541c:	b005883a 	mov	r2,r22
10105420:	003c8206 	br	1010462c <__alt_data_end+0xfffe462c>
10105424:	9080040c 	andi	r2,r18,16
10105428:	10003526 	beq	r2,zero,10105500 <___vfprintf_internal_r+0x13fc>
1010542c:	d9402d17 	ldw	r5,180(sp)
10105430:	d8c02917 	ldw	r3,164(sp)
10105434:	d8002785 	stb	zero,158(sp)
10105438:	28800104 	addi	r2,r5,4
1010543c:	2cc00017 	ldw	r19,0(r5)
10105440:	002d883a 	mov	r22,zero
10105444:	18003716 	blt	r3,zero,10105524 <___vfprintf_internal_r+0x1420>
10105448:	00ffdfc4 	movi	r3,-129
1010544c:	d8802d15 	stw	r2,180(sp)
10105450:	90e4703a 	and	r18,r18,r3
10105454:	0039883a 	mov	fp,zero
10105458:	983df326 	beq	r19,zero,10104c28 <__alt_data_end+0xfffe4c28>
1010545c:	00800244 	movi	r2,9
10105460:	14fc7b36 	bltu	r2,r19,10104650 <__alt_data_end+0xfffe4650>
10105464:	d8c02817 	ldw	r3,160(sp)
10105468:	dc001dc4 	addi	r16,sp,119
1010546c:	9cc00c04 	addi	r19,r19,48
10105470:	1c07c83a 	sub	r3,r3,r16
10105474:	dcc01dc5 	stb	r19,119(sp)
10105478:	d8c02e15 	stw	r3,184(sp)
1010547c:	003ce806 	br	10104820 <__alt_data_end+0xfffe4820>
10105480:	d8803317 	ldw	r2,204(sp)
10105484:	143fffc4 	addi	r16,r2,-1
10105488:	043f4d0e 	bge	zero,r16,101051c0 <__alt_data_end+0xfffe51c0>
1010548c:	07000404 	movi	fp,16
10105490:	e400810e 	bge	fp,r16,10105698 <___vfprintf_internal_r+0x1594>
10105494:	01440474 	movhi	r5,4113
10105498:	29459784 	addi	r5,r5,5726
1010549c:	d9402b15 	stw	r5,172(sp)
101054a0:	01c001c4 	movi	r7,7
101054a4:	dcc02c17 	ldw	r19,176(sp)
101054a8:	00000306 	br	101054b8 <___vfprintf_internal_r+0x13b4>
101054ac:	b5800204 	addi	r22,r22,8
101054b0:	843ffc04 	addi	r16,r16,-16
101054b4:	e4007b0e 	bge	fp,r16,101056a4 <___vfprintf_internal_r+0x15a0>
101054b8:	18c00404 	addi	r3,r3,16
101054bc:	8c400044 	addi	r17,r17,1
101054c0:	b5000015 	stw	r20,0(r22)
101054c4:	b7000115 	stw	fp,4(r22)
101054c8:	d8c02015 	stw	r3,128(sp)
101054cc:	dc401f15 	stw	r17,124(sp)
101054d0:	3c7ff60e 	bge	r7,r17,101054ac <__alt_data_end+0xfffe54ac>
101054d4:	d9801e04 	addi	r6,sp,120
101054d8:	b80b883a 	mov	r5,r23
101054dc:	9809883a 	mov	r4,r19
101054e0:	d9c03c15 	stw	r7,240(sp)
101054e4:	010a0f00 	call	1010a0f0 <__sprint_r>
101054e8:	d9c03c17 	ldw	r7,240(sp)
101054ec:	103c071e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
101054f0:	d8c02017 	ldw	r3,128(sp)
101054f4:	dc401f17 	ldw	r17,124(sp)
101054f8:	dd800404 	addi	r22,sp,16
101054fc:	003fec06 	br	101054b0 <__alt_data_end+0xfffe54b0>
10105500:	9080100c 	andi	r2,r18,64
10105504:	d8002785 	stb	zero,158(sp)
10105508:	10010e26 	beq	r2,zero,10105944 <___vfprintf_internal_r+0x1840>
1010550c:	d9002d17 	ldw	r4,180(sp)
10105510:	d9402917 	ldw	r5,164(sp)
10105514:	002d883a 	mov	r22,zero
10105518:	20800104 	addi	r2,r4,4
1010551c:	24c0000b 	ldhu	r19,0(r4)
10105520:	283fc90e 	bge	r5,zero,10105448 <__alt_data_end+0xfffe5448>
10105524:	d8802d15 	stw	r2,180(sp)
10105528:	0039883a 	mov	fp,zero
1010552c:	9d84b03a 	or	r2,r19,r22
10105530:	103c461e 	bne	r2,zero,1010464c <__alt_data_end+0xfffe464c>
10105534:	00800044 	movi	r2,1
10105538:	003e6c06 	br	10104eec <__alt_data_end+0xfffe4eec>
1010553c:	d9002c17 	ldw	r4,176(sp)
10105540:	d9801e04 	addi	r6,sp,120
10105544:	b80b883a 	mov	r5,r23
10105548:	010a0f00 	call	1010a0f0 <__sprint_r>
1010554c:	103bef1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105550:	d8c02017 	ldw	r3,128(sp)
10105554:	da000404 	addi	r8,sp,16
10105558:	d9003217 	ldw	r4,200(sp)
1010555c:	d8802617 	ldw	r2,152(sp)
10105560:	d9403317 	ldw	r5,204(sp)
10105564:	8123883a 	add	r17,r16,r4
10105568:	11400216 	blt	r2,r5,10105574 <___vfprintf_internal_r+0x1470>
1010556c:	9100004c 	andi	r4,r18,1
10105570:	20000d26 	beq	r4,zero,101055a8 <___vfprintf_internal_r+0x14a4>
10105574:	d9003717 	ldw	r4,220(sp)
10105578:	d9403417 	ldw	r5,208(sp)
1010557c:	1907883a 	add	r3,r3,r4
10105580:	d9001f17 	ldw	r4,124(sp)
10105584:	41400015 	stw	r5,0(r8)
10105588:	d9403717 	ldw	r5,220(sp)
1010558c:	21000044 	addi	r4,r4,1
10105590:	d8c02015 	stw	r3,128(sp)
10105594:	41400115 	stw	r5,4(r8)
10105598:	d9001f15 	stw	r4,124(sp)
1010559c:	014001c4 	movi	r5,7
101055a0:	2901e816 	blt	r5,r4,10105d44 <___vfprintf_internal_r+0x1c40>
101055a4:	42000204 	addi	r8,r8,8
101055a8:	d9003317 	ldw	r4,204(sp)
101055ac:	8121883a 	add	r16,r16,r4
101055b0:	2085c83a 	sub	r2,r4,r2
101055b4:	8461c83a 	sub	r16,r16,r17
101055b8:	1400010e 	bge	r2,r16,101055c0 <___vfprintf_internal_r+0x14bc>
101055bc:	1021883a 	mov	r16,r2
101055c0:	04000a0e 	bge	zero,r16,101055ec <___vfprintf_internal_r+0x14e8>
101055c4:	d9001f17 	ldw	r4,124(sp)
101055c8:	1c07883a 	add	r3,r3,r16
101055cc:	44400015 	stw	r17,0(r8)
101055d0:	21000044 	addi	r4,r4,1
101055d4:	44000115 	stw	r16,4(r8)
101055d8:	d8c02015 	stw	r3,128(sp)
101055dc:	d9001f15 	stw	r4,124(sp)
101055e0:	014001c4 	movi	r5,7
101055e4:	2901fb16 	blt	r5,r4,10105dd4 <___vfprintf_internal_r+0x1cd0>
101055e8:	42000204 	addi	r8,r8,8
101055ec:	8001f716 	blt	r16,zero,10105dcc <___vfprintf_internal_r+0x1cc8>
101055f0:	1421c83a 	sub	r16,r2,r16
101055f4:	043d380e 	bge	zero,r16,10104ad8 <__alt_data_end+0xfffe4ad8>
101055f8:	04400404 	movi	r17,16
101055fc:	d8801f17 	ldw	r2,124(sp)
10105600:	8c3efb0e 	bge	r17,r16,101051f0 <__alt_data_end+0xfffe51f0>
10105604:	01440474 	movhi	r5,4113
10105608:	29459784 	addi	r5,r5,5726
1010560c:	d9402b15 	stw	r5,172(sp)
10105610:	058001c4 	movi	r22,7
10105614:	dcc02c17 	ldw	r19,176(sp)
10105618:	00000306 	br	10105628 <___vfprintf_internal_r+0x1524>
1010561c:	42000204 	addi	r8,r8,8
10105620:	843ffc04 	addi	r16,r16,-16
10105624:	8c3ef50e 	bge	r17,r16,101051fc <__alt_data_end+0xfffe51fc>
10105628:	18c00404 	addi	r3,r3,16
1010562c:	10800044 	addi	r2,r2,1
10105630:	45000015 	stw	r20,0(r8)
10105634:	44400115 	stw	r17,4(r8)
10105638:	d8c02015 	stw	r3,128(sp)
1010563c:	d8801f15 	stw	r2,124(sp)
10105640:	b0bff60e 	bge	r22,r2,1010561c <__alt_data_end+0xfffe561c>
10105644:	d9801e04 	addi	r6,sp,120
10105648:	b80b883a 	mov	r5,r23
1010564c:	9809883a 	mov	r4,r19
10105650:	010a0f00 	call	1010a0f0 <__sprint_r>
10105654:	103bad1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105658:	d8c02017 	ldw	r3,128(sp)
1010565c:	d8801f17 	ldw	r2,124(sp)
10105660:	da000404 	addi	r8,sp,16
10105664:	003fee06 	br	10105620 <__alt_data_end+0xfffe5620>
10105668:	9088703a 	and	r4,r18,r2
1010566c:	203eab1e 	bne	r4,zero,1010511c <__alt_data_end+0xfffe511c>
10105670:	dc401f17 	ldw	r17,124(sp)
10105674:	40800115 	stw	r2,4(r8)
10105678:	44000015 	stw	r16,0(r8)
1010567c:	8c400044 	addi	r17,r17,1
10105680:	d8c02015 	stw	r3,128(sp)
10105684:	dc401f15 	stw	r17,124(sp)
10105688:	008001c4 	movi	r2,7
1010568c:	14400e16 	blt	r2,r17,101056c8 <___vfprintf_internal_r+0x15c4>
10105690:	45800204 	addi	r22,r8,8
10105694:	003eca06 	br	101051c0 <__alt_data_end+0xfffe51c0>
10105698:	01040474 	movhi	r4,4113
1010569c:	21059784 	addi	r4,r4,5726
101056a0:	d9002b15 	stw	r4,172(sp)
101056a4:	d8802b17 	ldw	r2,172(sp)
101056a8:	1c07883a 	add	r3,r3,r16
101056ac:	8c400044 	addi	r17,r17,1
101056b0:	b0800015 	stw	r2,0(r22)
101056b4:	b4000115 	stw	r16,4(r22)
101056b8:	d8c02015 	stw	r3,128(sp)
101056bc:	dc401f15 	stw	r17,124(sp)
101056c0:	008001c4 	movi	r2,7
101056c4:	147ebd0e 	bge	r2,r17,101051bc <__alt_data_end+0xfffe51bc>
101056c8:	d9002c17 	ldw	r4,176(sp)
101056cc:	d9801e04 	addi	r6,sp,120
101056d0:	b80b883a 	mov	r5,r23
101056d4:	010a0f00 	call	1010a0f0 <__sprint_r>
101056d8:	103b8c1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
101056dc:	d8c02017 	ldw	r3,128(sp)
101056e0:	dc401f17 	ldw	r17,124(sp)
101056e4:	dd800404 	addi	r22,sp,16
101056e8:	003eb506 	br	101051c0 <__alt_data_end+0xfffe51c0>
101056ec:	d9002c17 	ldw	r4,176(sp)
101056f0:	d9801e04 	addi	r6,sp,120
101056f4:	b80b883a 	mov	r5,r23
101056f8:	010a0f00 	call	1010a0f0 <__sprint_r>
101056fc:	103b831e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105700:	d8c02017 	ldw	r3,128(sp)
10105704:	dc401f17 	ldw	r17,124(sp)
10105708:	da000404 	addi	r8,sp,16
1010570c:	003e8d06 	br	10105144 <__alt_data_end+0xfffe5144>
10105710:	d9002c17 	ldw	r4,176(sp)
10105714:	d9801e04 	addi	r6,sp,120
10105718:	b80b883a 	mov	r5,r23
1010571c:	010a0f00 	call	1010a0f0 <__sprint_r>
10105720:	103b7a1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105724:	d8c02017 	ldw	r3,128(sp)
10105728:	dc401f17 	ldw	r17,124(sp)
1010572c:	dd800404 	addi	r22,sp,16
10105730:	003e8f06 	br	10105170 <__alt_data_end+0xfffe5170>
10105734:	0027883a 	mov	r19,zero
10105738:	003f4a06 	br	10105464 <__alt_data_end+0xfffe5464>
1010573c:	d9002c17 	ldw	r4,176(sp)
10105740:	d9801e04 	addi	r6,sp,120
10105744:	b80b883a 	mov	r5,r23
10105748:	010a0f00 	call	1010a0f0 <__sprint_r>
1010574c:	103b6f1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105750:	d8c02017 	ldw	r3,128(sp)
10105754:	da000404 	addi	r8,sp,16
10105758:	003c9d06 	br	101049d0 <__alt_data_end+0xfffe49d0>
1010575c:	04e7c83a 	sub	r19,zero,r19
10105760:	9804c03a 	cmpne	r2,r19,zero
10105764:	05adc83a 	sub	r22,zero,r22
10105768:	b0adc83a 	sub	r22,r22,r2
1010576c:	d8802917 	ldw	r2,164(sp)
10105770:	07000b44 	movi	fp,45
10105774:	df002785 	stb	fp,158(sp)
10105778:	10017b16 	blt	r2,zero,10105d68 <___vfprintf_internal_r+0x1c64>
1010577c:	00bfdfc4 	movi	r2,-129
10105780:	90a4703a 	and	r18,r18,r2
10105784:	003bb106 	br	1010464c <__alt_data_end+0xfffe464c>
10105788:	d9003617 	ldw	r4,216(sp)
1010578c:	d9403817 	ldw	r5,224(sp)
10105790:	da003d15 	stw	r8,244(sp)
10105794:	0109ea40 	call	10109ea4 <__fpclassifyd>
10105798:	da003d17 	ldw	r8,244(sp)
1010579c:	1000f026 	beq	r2,zero,10105b60 <___vfprintf_internal_r+0x1a5c>
101057a0:	d9002917 	ldw	r4,164(sp)
101057a4:	05bff7c4 	movi	r22,-33
101057a8:	00bfffc4 	movi	r2,-1
101057ac:	8dac703a 	and	r22,r17,r22
101057b0:	20820026 	beq	r4,r2,10105fb4 <___vfprintf_internal_r+0x1eb0>
101057b4:	008011c4 	movi	r2,71
101057b8:	b081f726 	beq	r22,r2,10105f98 <___vfprintf_internal_r+0x1e94>
101057bc:	d9003817 	ldw	r4,224(sp)
101057c0:	90c04014 	ori	r3,r18,256
101057c4:	d8c02b15 	stw	r3,172(sp)
101057c8:	20021516 	blt	r4,zero,10106020 <___vfprintf_internal_r+0x1f1c>
101057cc:	dcc03817 	ldw	r19,224(sp)
101057d0:	d8002a05 	stb	zero,168(sp)
101057d4:	00801984 	movi	r2,102
101057d8:	8881f926 	beq	r17,r2,10105fc0 <___vfprintf_internal_r+0x1ebc>
101057dc:	00801184 	movi	r2,70
101057e0:	88821c26 	beq	r17,r2,10106054 <___vfprintf_internal_r+0x1f50>
101057e4:	00801144 	movi	r2,69
101057e8:	b081ef26 	beq	r22,r2,10105fa8 <___vfprintf_internal_r+0x1ea4>
101057ec:	d8c02917 	ldw	r3,164(sp)
101057f0:	d8802104 	addi	r2,sp,132
101057f4:	d8800315 	stw	r2,12(sp)
101057f8:	d9403617 	ldw	r5,216(sp)
101057fc:	d8802504 	addi	r2,sp,148
10105800:	d9002c17 	ldw	r4,176(sp)
10105804:	d8800215 	stw	r2,8(sp)
10105808:	d8802604 	addi	r2,sp,152
1010580c:	d8c00015 	stw	r3,0(sp)
10105810:	d8800115 	stw	r2,4(sp)
10105814:	01c00084 	movi	r7,2
10105818:	980d883a 	mov	r6,r19
1010581c:	d8c03c15 	stw	r3,240(sp)
10105820:	da003d15 	stw	r8,244(sp)
10105824:	01067dc0 	call	101067dc <_dtoa_r>
10105828:	1021883a 	mov	r16,r2
1010582c:	008019c4 	movi	r2,103
10105830:	d8c03c17 	ldw	r3,240(sp)
10105834:	da003d17 	ldw	r8,244(sp)
10105838:	88817126 	beq	r17,r2,10105e00 <___vfprintf_internal_r+0x1cfc>
1010583c:	008011c4 	movi	r2,71
10105840:	88829226 	beq	r17,r2,1010628c <___vfprintf_internal_r+0x2188>
10105844:	80f9883a 	add	fp,r16,r3
10105848:	d9003617 	ldw	r4,216(sp)
1010584c:	000d883a 	mov	r6,zero
10105850:	000f883a 	mov	r7,zero
10105854:	980b883a 	mov	r5,r19
10105858:	da003d15 	stw	r8,244(sp)
1010585c:	010d88c0 	call	1010d88c <__eqdf2>
10105860:	da003d17 	ldw	r8,244(sp)
10105864:	10018d26 	beq	r2,zero,10105e9c <___vfprintf_internal_r+0x1d98>
10105868:	d8802117 	ldw	r2,132(sp)
1010586c:	1700062e 	bgeu	r2,fp,10105888 <___vfprintf_internal_r+0x1784>
10105870:	01000c04 	movi	r4,48
10105874:	10c00044 	addi	r3,r2,1
10105878:	d8c02115 	stw	r3,132(sp)
1010587c:	11000005 	stb	r4,0(r2)
10105880:	d8802117 	ldw	r2,132(sp)
10105884:	173ffb36 	bltu	r2,fp,10105874 <__alt_data_end+0xfffe5874>
10105888:	1405c83a 	sub	r2,r2,r16
1010588c:	d8803315 	stw	r2,204(sp)
10105890:	008011c4 	movi	r2,71
10105894:	b0817626 	beq	r22,r2,10105e70 <___vfprintf_internal_r+0x1d6c>
10105898:	00801944 	movi	r2,101
1010589c:	1442810e 	bge	r2,r17,101062a4 <___vfprintf_internal_r+0x21a0>
101058a0:	d8c02617 	ldw	r3,152(sp)
101058a4:	00801984 	movi	r2,102
101058a8:	d8c03215 	stw	r3,200(sp)
101058ac:	8881fe26 	beq	r17,r2,101060a8 <___vfprintf_internal_r+0x1fa4>
101058b0:	d8c03217 	ldw	r3,200(sp)
101058b4:	d9003317 	ldw	r4,204(sp)
101058b8:	1901dd16 	blt	r3,r4,10106030 <___vfprintf_internal_r+0x1f2c>
101058bc:	9480004c 	andi	r18,r18,1
101058c0:	90022b1e 	bne	r18,zero,10106170 <___vfprintf_internal_r+0x206c>
101058c4:	1805883a 	mov	r2,r3
101058c8:	18028016 	blt	r3,zero,101062cc <___vfprintf_internal_r+0x21c8>
101058cc:	d8c03217 	ldw	r3,200(sp)
101058d0:	044019c4 	movi	r17,103
101058d4:	d8c02e15 	stw	r3,184(sp)
101058d8:	df002a07 	ldb	fp,168(sp)
101058dc:	e001531e 	bne	fp,zero,10105e2c <___vfprintf_internal_r+0x1d28>
101058e0:	df002783 	ldbu	fp,158(sp)
101058e4:	d8802a15 	stw	r2,168(sp)
101058e8:	dc802b17 	ldw	r18,172(sp)
101058ec:	d8002915 	stw	zero,164(sp)
101058f0:	003bd106 	br	10104838 <__alt_data_end+0xfffe4838>
101058f4:	d8802d17 	ldw	r2,180(sp)
101058f8:	d8c02d17 	ldw	r3,180(sp)
101058fc:	d9002d17 	ldw	r4,180(sp)
10105900:	10800017 	ldw	r2,0(r2)
10105904:	18c00117 	ldw	r3,4(r3)
10105908:	21000204 	addi	r4,r4,8
1010590c:	d8803615 	stw	r2,216(sp)
10105910:	d8c03815 	stw	r3,224(sp)
10105914:	d9002d15 	stw	r4,180(sp)
10105918:	003b7506 	br	101046f0 <__alt_data_end+0xfffe46f0>
1010591c:	ac400007 	ldb	r17,0(r21)
10105920:	003a5906 	br	10104288 <__alt_data_end+0xfffe4288>
10105924:	9080100c 	andi	r2,r18,64
10105928:	1000a826 	beq	r2,zero,10105bcc <___vfprintf_internal_r+0x1ac8>
1010592c:	d9002d17 	ldw	r4,180(sp)
10105930:	002d883a 	mov	r22,zero
10105934:	24c0000b 	ldhu	r19,0(r4)
10105938:	21000104 	addi	r4,r4,4
1010593c:	d9002d15 	stw	r4,180(sp)
10105940:	003ccb06 	br	10104c70 <__alt_data_end+0xfffe4c70>
10105944:	d8c02d17 	ldw	r3,180(sp)
10105948:	d9002917 	ldw	r4,164(sp)
1010594c:	002d883a 	mov	r22,zero
10105950:	18800104 	addi	r2,r3,4
10105954:	1cc00017 	ldw	r19,0(r3)
10105958:	203ebb0e 	bge	r4,zero,10105448 <__alt_data_end+0xfffe5448>
1010595c:	003ef106 	br	10105524 <__alt_data_end+0xfffe5524>
10105960:	9080040c 	andi	r2,r18,16
10105964:	1000921e 	bne	r2,zero,10105bb0 <___vfprintf_internal_r+0x1aac>
10105968:	9480100c 	andi	r18,r18,64
1010596c:	90013926 	beq	r18,zero,10105e54 <___vfprintf_internal_r+0x1d50>
10105970:	d9002d17 	ldw	r4,180(sp)
10105974:	d9402f17 	ldw	r5,188(sp)
10105978:	20800017 	ldw	r2,0(r4)
1010597c:	21000104 	addi	r4,r4,4
10105980:	d9002d15 	stw	r4,180(sp)
10105984:	1140000d 	sth	r5,0(r2)
10105988:	003a1606 	br	101041e4 <__alt_data_end+0xfffe41e4>
1010598c:	9080100c 	andi	r2,r18,64
10105990:	10008026 	beq	r2,zero,10105b94 <___vfprintf_internal_r+0x1a90>
10105994:	d8c02d17 	ldw	r3,180(sp)
10105998:	1cc0000f 	ldh	r19,0(r3)
1010599c:	18c00104 	addi	r3,r3,4
101059a0:	d8c02d15 	stw	r3,180(sp)
101059a4:	982dd7fa 	srai	r22,r19,31
101059a8:	b005883a 	mov	r2,r22
101059ac:	003b1f06 	br	1010462c <__alt_data_end+0xfffe462c>
101059b0:	9080100c 	andi	r2,r18,64
101059b4:	d8002785 	stb	zero,158(sp)
101059b8:	10008a1e 	bne	r2,zero,10105be4 <___vfprintf_internal_r+0x1ae0>
101059bc:	d9402d17 	ldw	r5,180(sp)
101059c0:	d8c02917 	ldw	r3,164(sp)
101059c4:	002d883a 	mov	r22,zero
101059c8:	28800104 	addi	r2,r5,4
101059cc:	2cc00017 	ldw	r19,0(r5)
101059d0:	183e4b0e 	bge	r3,zero,10105300 <__alt_data_end+0xfffe5300>
101059d4:	9d86b03a 	or	r3,r19,r22
101059d8:	d8802d15 	stw	r2,180(sp)
101059dc:	183e4c1e 	bne	r3,zero,10105310 <__alt_data_end+0xfffe5310>
101059e0:	0039883a 	mov	fp,zero
101059e4:	0005883a 	mov	r2,zero
101059e8:	003d4006 	br	10104eec <__alt_data_end+0xfffe4eec>
101059ec:	01440474 	movhi	r5,4113
101059f0:	29459784 	addi	r5,r5,5726
101059f4:	d9402b15 	stw	r5,172(sp)
101059f8:	d9402b17 	ldw	r5,172(sp)
101059fc:	1c47883a 	add	r3,r3,r17
10105a00:	10800044 	addi	r2,r2,1
10105a04:	41400015 	stw	r5,0(r8)
10105a08:	44400115 	stw	r17,4(r8)
10105a0c:	d8c02015 	stw	r3,128(sp)
10105a10:	d8801f15 	stw	r2,124(sp)
10105a14:	010001c4 	movi	r4,7
10105a18:	20bec816 	blt	r4,r2,1010553c <__alt_data_end+0xfffe553c>
10105a1c:	42000204 	addi	r8,r8,8
10105a20:	003ecd06 	br	10105558 <__alt_data_end+0xfffe5558>
10105a24:	d9002917 	ldw	r4,164(sp)
10105a28:	d8002785 	stb	zero,158(sp)
10105a2c:	203d2d16 	blt	r4,zero,10104ee4 <__alt_data_end+0xfffe4ee4>
10105a30:	00bfdfc4 	movi	r2,-129
10105a34:	90a4703a 	and	r18,r18,r2
10105a38:	003a9106 	br	10104480 <__alt_data_end+0xfffe4480>
10105a3c:	01040474 	movhi	r4,4113
10105a40:	21059784 	addi	r4,r4,5726
10105a44:	d9002b15 	stw	r4,172(sp)
10105a48:	003c0c06 	br	10104a7c <__alt_data_end+0xfffe4a7c>
10105a4c:	d9002c17 	ldw	r4,176(sp)
10105a50:	d9801e04 	addi	r6,sp,120
10105a54:	b80b883a 	mov	r5,r23
10105a58:	010a0f00 	call	1010a0f0 <__sprint_r>
10105a5c:	103aab1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105a60:	d8c02017 	ldw	r3,128(sp)
10105a64:	da000404 	addi	r8,sp,16
10105a68:	003d4106 	br	10104f70 <__alt_data_end+0xfffe4f70>
10105a6c:	d8801f17 	ldw	r2,124(sp)
10105a70:	01440474 	movhi	r5,4113
10105a74:	01000044 	movi	r4,1
10105a78:	18c00044 	addi	r3,r3,1
10105a7c:	10800044 	addi	r2,r2,1
10105a80:	29459704 	addi	r5,r5,5724
10105a84:	41000115 	stw	r4,4(r8)
10105a88:	41400015 	stw	r5,0(r8)
10105a8c:	d8c02015 	stw	r3,128(sp)
10105a90:	d8801f15 	stw	r2,124(sp)
10105a94:	010001c4 	movi	r4,7
10105a98:	20805c16 	blt	r4,r2,10105c0c <___vfprintf_internal_r+0x1b08>
10105a9c:	42000204 	addi	r8,r8,8
10105aa0:	8800041e 	bne	r17,zero,10105ab4 <___vfprintf_internal_r+0x19b0>
10105aa4:	d8803317 	ldw	r2,204(sp)
10105aa8:	1000021e 	bne	r2,zero,10105ab4 <___vfprintf_internal_r+0x19b0>
10105aac:	9080004c 	andi	r2,r18,1
10105ab0:	103c0926 	beq	r2,zero,10104ad8 <__alt_data_end+0xfffe4ad8>
10105ab4:	d9003717 	ldw	r4,220(sp)
10105ab8:	d8801f17 	ldw	r2,124(sp)
10105abc:	d9403417 	ldw	r5,208(sp)
10105ac0:	20c7883a 	add	r3,r4,r3
10105ac4:	10800044 	addi	r2,r2,1
10105ac8:	41000115 	stw	r4,4(r8)
10105acc:	41400015 	stw	r5,0(r8)
10105ad0:	d8c02015 	stw	r3,128(sp)
10105ad4:	d8801f15 	stw	r2,124(sp)
10105ad8:	010001c4 	movi	r4,7
10105adc:	20812116 	blt	r4,r2,10105f64 <___vfprintf_internal_r+0x1e60>
10105ae0:	42000204 	addi	r8,r8,8
10105ae4:	0463c83a 	sub	r17,zero,r17
10105ae8:	0440730e 	bge	zero,r17,10105cb8 <___vfprintf_internal_r+0x1bb4>
10105aec:	05800404 	movi	r22,16
10105af0:	b440860e 	bge	r22,r17,10105d0c <___vfprintf_internal_r+0x1c08>
10105af4:	01440474 	movhi	r5,4113
10105af8:	29459784 	addi	r5,r5,5726
10105afc:	d9402b15 	stw	r5,172(sp)
10105b00:	070001c4 	movi	fp,7
10105b04:	dcc02c17 	ldw	r19,176(sp)
10105b08:	00000306 	br	10105b18 <___vfprintf_internal_r+0x1a14>
10105b0c:	42000204 	addi	r8,r8,8
10105b10:	8c7ffc04 	addi	r17,r17,-16
10105b14:	b440800e 	bge	r22,r17,10105d18 <___vfprintf_internal_r+0x1c14>
10105b18:	18c00404 	addi	r3,r3,16
10105b1c:	10800044 	addi	r2,r2,1
10105b20:	45000015 	stw	r20,0(r8)
10105b24:	45800115 	stw	r22,4(r8)
10105b28:	d8c02015 	stw	r3,128(sp)
10105b2c:	d8801f15 	stw	r2,124(sp)
10105b30:	e0bff60e 	bge	fp,r2,10105b0c <__alt_data_end+0xfffe5b0c>
10105b34:	d9801e04 	addi	r6,sp,120
10105b38:	b80b883a 	mov	r5,r23
10105b3c:	9809883a 	mov	r4,r19
10105b40:	010a0f00 	call	1010a0f0 <__sprint_r>
10105b44:	103a711e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105b48:	d8c02017 	ldw	r3,128(sp)
10105b4c:	d8801f17 	ldw	r2,124(sp)
10105b50:	da000404 	addi	r8,sp,16
10105b54:	003fee06 	br	10105b10 <__alt_data_end+0xfffe5b10>
10105b58:	00bfffc4 	movi	r2,-1
10105b5c:	003a6f06 	br	1010451c <__alt_data_end+0xfffe451c>
10105b60:	008011c4 	movi	r2,71
10105b64:	1440b816 	blt	r2,r17,10105e48 <___vfprintf_internal_r+0x1d44>
10105b68:	04040474 	movhi	r16,4113
10105b6c:	84058904 	addi	r16,r16,5668
10105b70:	00c000c4 	movi	r3,3
10105b74:	00bfdfc4 	movi	r2,-129
10105b78:	d8c02a15 	stw	r3,168(sp)
10105b7c:	90a4703a 	and	r18,r18,r2
10105b80:	df002783 	ldbu	fp,158(sp)
10105b84:	d8c02e15 	stw	r3,184(sp)
10105b88:	d8002915 	stw	zero,164(sp)
10105b8c:	d8003215 	stw	zero,200(sp)
10105b90:	003b2906 	br	10104838 <__alt_data_end+0xfffe4838>
10105b94:	d9002d17 	ldw	r4,180(sp)
10105b98:	24c00017 	ldw	r19,0(r4)
10105b9c:	21000104 	addi	r4,r4,4
10105ba0:	d9002d15 	stw	r4,180(sp)
10105ba4:	982dd7fa 	srai	r22,r19,31
10105ba8:	b005883a 	mov	r2,r22
10105bac:	003a9f06 	br	1010462c <__alt_data_end+0xfffe462c>
10105bb0:	d9402d17 	ldw	r5,180(sp)
10105bb4:	d8c02f17 	ldw	r3,188(sp)
10105bb8:	28800017 	ldw	r2,0(r5)
10105bbc:	29400104 	addi	r5,r5,4
10105bc0:	d9402d15 	stw	r5,180(sp)
10105bc4:	10c00015 	stw	r3,0(r2)
10105bc8:	00398606 	br	101041e4 <__alt_data_end+0xfffe41e4>
10105bcc:	d9402d17 	ldw	r5,180(sp)
10105bd0:	002d883a 	mov	r22,zero
10105bd4:	2cc00017 	ldw	r19,0(r5)
10105bd8:	29400104 	addi	r5,r5,4
10105bdc:	d9402d15 	stw	r5,180(sp)
10105be0:	003c2306 	br	10104c70 <__alt_data_end+0xfffe4c70>
10105be4:	d8c02d17 	ldw	r3,180(sp)
10105be8:	d9002917 	ldw	r4,164(sp)
10105bec:	002d883a 	mov	r22,zero
10105bf0:	18800104 	addi	r2,r3,4
10105bf4:	1cc0000b 	ldhu	r19,0(r3)
10105bf8:	203dc10e 	bge	r4,zero,10105300 <__alt_data_end+0xfffe5300>
10105bfc:	003f7506 	br	101059d4 <__alt_data_end+0xfffe59d4>
10105c00:	04040474 	movhi	r16,4113
10105c04:	84058704 	addi	r16,r16,5660
10105c08:	003acc06 	br	1010473c <__alt_data_end+0xfffe473c>
10105c0c:	d9002c17 	ldw	r4,176(sp)
10105c10:	d9801e04 	addi	r6,sp,120
10105c14:	b80b883a 	mov	r5,r23
10105c18:	010a0f00 	call	1010a0f0 <__sprint_r>
10105c1c:	103a3b1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105c20:	dc402617 	ldw	r17,152(sp)
10105c24:	d8c02017 	ldw	r3,128(sp)
10105c28:	da000404 	addi	r8,sp,16
10105c2c:	003f9c06 	br	10105aa0 <__alt_data_end+0xfffe5aa0>
10105c30:	ac400043 	ldbu	r17,1(r21)
10105c34:	94800814 	ori	r18,r18,32
10105c38:	ad400044 	addi	r21,r21,1
10105c3c:	8c403fcc 	andi	r17,r17,255
10105c40:	8c40201c 	xori	r17,r17,128
10105c44:	8c7fe004 	addi	r17,r17,-128
10105c48:	00398f06 	br	10104288 <__alt_data_end+0xfffe4288>
10105c4c:	d8c02d15 	stw	r3,180(sp)
10105c50:	0039883a 	mov	fp,zero
10105c54:	003e3506 	br	1010552c <__alt_data_end+0xfffe552c>
10105c58:	d9002c17 	ldw	r4,176(sp)
10105c5c:	d9801e04 	addi	r6,sp,120
10105c60:	b80b883a 	mov	r5,r23
10105c64:	010a0f00 	call	1010a0f0 <__sprint_r>
10105c68:	103a281e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105c6c:	d8c02017 	ldw	r3,128(sp)
10105c70:	da000404 	addi	r8,sp,16
10105c74:	003cd006 	br	10104fb8 <__alt_data_end+0xfffe4fb8>
10105c78:	8009883a 	mov	r4,r16
10105c7c:	da003d15 	stw	r8,244(sp)
10105c80:	010406c0 	call	1010406c <strlen>
10105c84:	d8802e15 	stw	r2,184(sp)
10105c88:	da003d17 	ldw	r8,244(sp)
10105c8c:	103c340e 	bge	r2,zero,10104d60 <__alt_data_end+0xfffe4d60>
10105c90:	0005883a 	mov	r2,zero
10105c94:	003c3206 	br	10104d60 <__alt_data_end+0xfffe4d60>
10105c98:	d9002c17 	ldw	r4,176(sp)
10105c9c:	d9801e04 	addi	r6,sp,120
10105ca0:	b80b883a 	mov	r5,r23
10105ca4:	010a0f00 	call	1010a0f0 <__sprint_r>
10105ca8:	103a181e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105cac:	d8c02017 	ldw	r3,128(sp)
10105cb0:	d8801f17 	ldw	r2,124(sp)
10105cb4:	da000404 	addi	r8,sp,16
10105cb8:	d9403317 	ldw	r5,204(sp)
10105cbc:	10800044 	addi	r2,r2,1
10105cc0:	44000015 	stw	r16,0(r8)
10105cc4:	28c7883a 	add	r3,r5,r3
10105cc8:	003b7d06 	br	10104ac0 <__alt_data_end+0xfffe4ac0>
10105ccc:	01040474 	movhi	r4,4113
10105cd0:	21059b84 	addi	r4,r4,5742
10105cd4:	d9003515 	stw	r4,212(sp)
10105cd8:	003b1406 	br	1010492c <__alt_data_end+0xfffe492c>
10105cdc:	013fffc4 	movi	r4,-1
10105ce0:	003a3506 	br	101045b8 <__alt_data_end+0xfffe45b8>
10105ce4:	0023883a 	mov	r17,zero
10105ce8:	003d9d06 	br	10105360 <__alt_data_end+0xfffe5360>
10105cec:	d9002c17 	ldw	r4,176(sp)
10105cf0:	d9801e04 	addi	r6,sp,120
10105cf4:	b80b883a 	mov	r5,r23
10105cf8:	010a0f00 	call	1010a0f0 <__sprint_r>
10105cfc:	103a031e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105d00:	d8c02017 	ldw	r3,128(sp)
10105d04:	da000404 	addi	r8,sp,16
10105d08:	003d9406 	br	1010535c <__alt_data_end+0xfffe535c>
10105d0c:	01040474 	movhi	r4,4113
10105d10:	21059784 	addi	r4,r4,5726
10105d14:	d9002b15 	stw	r4,172(sp)
10105d18:	d9002b17 	ldw	r4,172(sp)
10105d1c:	1c47883a 	add	r3,r3,r17
10105d20:	10800044 	addi	r2,r2,1
10105d24:	41000015 	stw	r4,0(r8)
10105d28:	44400115 	stw	r17,4(r8)
10105d2c:	d8c02015 	stw	r3,128(sp)
10105d30:	d8801f15 	stw	r2,124(sp)
10105d34:	010001c4 	movi	r4,7
10105d38:	20bfd716 	blt	r4,r2,10105c98 <__alt_data_end+0xfffe5c98>
10105d3c:	42000204 	addi	r8,r8,8
10105d40:	003fdd06 	br	10105cb8 <__alt_data_end+0xfffe5cb8>
10105d44:	d9002c17 	ldw	r4,176(sp)
10105d48:	d9801e04 	addi	r6,sp,120
10105d4c:	b80b883a 	mov	r5,r23
10105d50:	010a0f00 	call	1010a0f0 <__sprint_r>
10105d54:	1039ed1e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105d58:	d8802617 	ldw	r2,152(sp)
10105d5c:	d8c02017 	ldw	r3,128(sp)
10105d60:	da000404 	addi	r8,sp,16
10105d64:	003e1006 	br	101055a8 <__alt_data_end+0xfffe55a8>
10105d68:	00800044 	movi	r2,1
10105d6c:	10803fcc 	andi	r2,r2,255
10105d70:	00c00044 	movi	r3,1
10105d74:	10fa3526 	beq	r2,r3,1010464c <__alt_data_end+0xfffe464c>
10105d78:	00c00084 	movi	r3,2
10105d7c:	10fbcb26 	beq	r2,r3,10104cac <__alt_data_end+0xfffe4cac>
10105d80:	003a8f06 	br	101047c0 <__alt_data_end+0xfffe47c0>
10105d84:	01040474 	movhi	r4,4113
10105d88:	21059b84 	addi	r4,r4,5742
10105d8c:	d9003515 	stw	r4,212(sp)
10105d90:	003b7606 	br	10104b6c <__alt_data_end+0xfffe4b6c>
10105d94:	d8802917 	ldw	r2,164(sp)
10105d98:	00c00184 	movi	r3,6
10105d9c:	1880012e 	bgeu	r3,r2,10105da4 <___vfprintf_internal_r+0x1ca0>
10105da0:	1805883a 	mov	r2,r3
10105da4:	d8802e15 	stw	r2,184(sp)
10105da8:	1000ef16 	blt	r2,zero,10106168 <___vfprintf_internal_r+0x2064>
10105dac:	04040474 	movhi	r16,4113
10105db0:	d8802a15 	stw	r2,168(sp)
10105db4:	dcc02d15 	stw	r19,180(sp)
10105db8:	d8002915 	stw	zero,164(sp)
10105dbc:	d8003215 	stw	zero,200(sp)
10105dc0:	84059504 	addi	r16,r16,5716
10105dc4:	0039883a 	mov	fp,zero
10105dc8:	003aa206 	br	10104854 <__alt_data_end+0xfffe4854>
10105dcc:	0021883a 	mov	r16,zero
10105dd0:	003e0706 	br	101055f0 <__alt_data_end+0xfffe55f0>
10105dd4:	d9002c17 	ldw	r4,176(sp)
10105dd8:	d9801e04 	addi	r6,sp,120
10105ddc:	b80b883a 	mov	r5,r23
10105de0:	010a0f00 	call	1010a0f0 <__sprint_r>
10105de4:	1039c91e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105de8:	d8802617 	ldw	r2,152(sp)
10105dec:	d9403317 	ldw	r5,204(sp)
10105df0:	d8c02017 	ldw	r3,128(sp)
10105df4:	da000404 	addi	r8,sp,16
10105df8:	2885c83a 	sub	r2,r5,r2
10105dfc:	003dfb06 	br	101055ec <__alt_data_end+0xfffe55ec>
10105e00:	9080004c 	andi	r2,r18,1
10105e04:	103e8f1e 	bne	r2,zero,10105844 <__alt_data_end+0xfffe5844>
10105e08:	d8802117 	ldw	r2,132(sp)
10105e0c:	003e9e06 	br	10105888 <__alt_data_end+0xfffe5888>
10105e10:	1025883a 	mov	r18,r2
10105e14:	0039883a 	mov	fp,zero
10105e18:	00800084 	movi	r2,2
10105e1c:	003fd306 	br	10105d6c <__alt_data_end+0xfffe5d6c>
10105e20:	07000b44 	movi	fp,45
10105e24:	df002785 	stb	fp,158(sp)
10105e28:	003a4006 	br	1010472c <__alt_data_end+0xfffe472c>
10105e2c:	00c00b44 	movi	r3,45
10105e30:	d8c02785 	stb	r3,158(sp)
10105e34:	d8802a15 	stw	r2,168(sp)
10105e38:	dc802b17 	ldw	r18,172(sp)
10105e3c:	d8002915 	stw	zero,164(sp)
10105e40:	07000b44 	movi	fp,45
10105e44:	003a8006 	br	10104848 <__alt_data_end+0xfffe4848>
10105e48:	04040474 	movhi	r16,4113
10105e4c:	84058a04 	addi	r16,r16,5672
10105e50:	003f4706 	br	10105b70 <__alt_data_end+0xfffe5b70>
10105e54:	d8c02d17 	ldw	r3,180(sp)
10105e58:	d9002f17 	ldw	r4,188(sp)
10105e5c:	18800017 	ldw	r2,0(r3)
10105e60:	18c00104 	addi	r3,r3,4
10105e64:	d8c02d15 	stw	r3,180(sp)
10105e68:	11000015 	stw	r4,0(r2)
10105e6c:	0038dd06 	br	101041e4 <__alt_data_end+0xfffe41e4>
10105e70:	dd802617 	ldw	r22,152(sp)
10105e74:	00bfff44 	movi	r2,-3
10105e78:	b0801c16 	blt	r22,r2,10105eec <___vfprintf_internal_r+0x1de8>
10105e7c:	d9402917 	ldw	r5,164(sp)
10105e80:	2d801a16 	blt	r5,r22,10105eec <___vfprintf_internal_r+0x1de8>
10105e84:	dd803215 	stw	r22,200(sp)
10105e88:	003e8906 	br	101058b0 <__alt_data_end+0xfffe58b0>
10105e8c:	01040474 	movhi	r4,4113
10105e90:	21059784 	addi	r4,r4,5726
10105e94:	d9002b15 	stw	r4,172(sp)
10105e98:	003c9106 	br	101050e0 <__alt_data_end+0xfffe50e0>
10105e9c:	e005883a 	mov	r2,fp
10105ea0:	003e7906 	br	10105888 <__alt_data_end+0xfffe5888>
10105ea4:	d9402917 	ldw	r5,164(sp)
10105ea8:	df002783 	ldbu	fp,158(sp)
10105eac:	dcc02d15 	stw	r19,180(sp)
10105eb0:	d9402a15 	stw	r5,168(sp)
10105eb4:	d9402e15 	stw	r5,184(sp)
10105eb8:	d8002915 	stw	zero,164(sp)
10105ebc:	d8003215 	stw	zero,200(sp)
10105ec0:	003a5d06 	br	10104838 <__alt_data_end+0xfffe4838>
10105ec4:	9080004c 	andi	r2,r18,1
10105ec8:	0039883a 	mov	fp,zero
10105ecc:	10000426 	beq	r2,zero,10105ee0 <___vfprintf_internal_r+0x1ddc>
10105ed0:	00800c04 	movi	r2,48
10105ed4:	dc001dc4 	addi	r16,sp,119
10105ed8:	d8801dc5 	stb	r2,119(sp)
10105edc:	003b8006 	br	10104ce0 <__alt_data_end+0xfffe4ce0>
10105ee0:	d8002e15 	stw	zero,184(sp)
10105ee4:	dc001e04 	addi	r16,sp,120
10105ee8:	003a4d06 	br	10104820 <__alt_data_end+0xfffe4820>
10105eec:	8c7fff84 	addi	r17,r17,-2
10105ef0:	b5bfffc4 	addi	r22,r22,-1
10105ef4:	dd802615 	stw	r22,152(sp)
10105ef8:	dc4022c5 	stb	r17,139(sp)
10105efc:	b000bf16 	blt	r22,zero,101061fc <___vfprintf_internal_r+0x20f8>
10105f00:	00800ac4 	movi	r2,43
10105f04:	d8802305 	stb	r2,140(sp)
10105f08:	00800244 	movi	r2,9
10105f0c:	15807016 	blt	r2,r22,101060d0 <___vfprintf_internal_r+0x1fcc>
10105f10:	00800c04 	movi	r2,48
10105f14:	b5800c04 	addi	r22,r22,48
10105f18:	d8802345 	stb	r2,141(sp)
10105f1c:	dd802385 	stb	r22,142(sp)
10105f20:	d88023c4 	addi	r2,sp,143
10105f24:	df0022c4 	addi	fp,sp,139
10105f28:	d8c03317 	ldw	r3,204(sp)
10105f2c:	1739c83a 	sub	fp,r2,fp
10105f30:	d9003317 	ldw	r4,204(sp)
10105f34:	e0c7883a 	add	r3,fp,r3
10105f38:	df003a15 	stw	fp,232(sp)
10105f3c:	d8c02e15 	stw	r3,184(sp)
10105f40:	00800044 	movi	r2,1
10105f44:	1100b30e 	bge	r2,r4,10106214 <___vfprintf_internal_r+0x2110>
10105f48:	d8c02e17 	ldw	r3,184(sp)
10105f4c:	18c00044 	addi	r3,r3,1
10105f50:	d8c02e15 	stw	r3,184(sp)
10105f54:	1805883a 	mov	r2,r3
10105f58:	1800ac16 	blt	r3,zero,1010620c <___vfprintf_internal_r+0x2108>
10105f5c:	d8003215 	stw	zero,200(sp)
10105f60:	003e5d06 	br	101058d8 <__alt_data_end+0xfffe58d8>
10105f64:	d9002c17 	ldw	r4,176(sp)
10105f68:	d9801e04 	addi	r6,sp,120
10105f6c:	b80b883a 	mov	r5,r23
10105f70:	010a0f00 	call	1010a0f0 <__sprint_r>
10105f74:	1039651e 	bne	r2,zero,1010450c <__alt_data_end+0xfffe450c>
10105f78:	dc402617 	ldw	r17,152(sp)
10105f7c:	d8c02017 	ldw	r3,128(sp)
10105f80:	d8801f17 	ldw	r2,124(sp)
10105f84:	da000404 	addi	r8,sp,16
10105f88:	003ed606 	br	10105ae4 <__alt_data_end+0xfffe5ae4>
10105f8c:	582b883a 	mov	r21,r11
10105f90:	d8002915 	stw	zero,164(sp)
10105f94:	0038bd06 	br	1010428c <__alt_data_end+0xfffe428c>
10105f98:	d8802917 	ldw	r2,164(sp)
10105f9c:	103e071e 	bne	r2,zero,101057bc <__alt_data_end+0xfffe57bc>
10105fa0:	dc002915 	stw	r16,164(sp)
10105fa4:	003e0506 	br	101057bc <__alt_data_end+0xfffe57bc>
10105fa8:	d9002917 	ldw	r4,164(sp)
10105fac:	20c00044 	addi	r3,r4,1
10105fb0:	003e0f06 	br	101057f0 <__alt_data_end+0xfffe57f0>
10105fb4:	01400184 	movi	r5,6
10105fb8:	d9402915 	stw	r5,164(sp)
10105fbc:	003dff06 	br	101057bc <__alt_data_end+0xfffe57bc>
10105fc0:	d8802104 	addi	r2,sp,132
10105fc4:	d8800315 	stw	r2,12(sp)
10105fc8:	d8802504 	addi	r2,sp,148
10105fcc:	d8800215 	stw	r2,8(sp)
10105fd0:	d8802604 	addi	r2,sp,152
10105fd4:	d8800115 	stw	r2,4(sp)
10105fd8:	d8802917 	ldw	r2,164(sp)
10105fdc:	d9403617 	ldw	r5,216(sp)
10105fe0:	d9002c17 	ldw	r4,176(sp)
10105fe4:	d8800015 	stw	r2,0(sp)
10105fe8:	01c000c4 	movi	r7,3
10105fec:	980d883a 	mov	r6,r19
10105ff0:	da003d15 	stw	r8,244(sp)
10105ff4:	01067dc0 	call	101067dc <_dtoa_r>
10105ff8:	d8c02917 	ldw	r3,164(sp)
10105ffc:	da003d17 	ldw	r8,244(sp)
10106000:	1021883a 	mov	r16,r2
10106004:	10f9883a 	add	fp,r2,r3
10106008:	81000007 	ldb	r4,0(r16)
1010600c:	00800c04 	movi	r2,48
10106010:	20805e26 	beq	r4,r2,1010618c <___vfprintf_internal_r+0x2088>
10106014:	d8c02617 	ldw	r3,152(sp)
10106018:	e0f9883a 	add	fp,fp,r3
1010601c:	003e0a06 	br	10105848 <__alt_data_end+0xfffe5848>
10106020:	00c00b44 	movi	r3,45
10106024:	24e0003c 	xorhi	r19,r4,32768
10106028:	d8c02a05 	stb	r3,168(sp)
1010602c:	003de906 	br	101057d4 <__alt_data_end+0xfffe57d4>
10106030:	d8c03217 	ldw	r3,200(sp)
10106034:	00c07a0e 	bge	zero,r3,10106220 <___vfprintf_internal_r+0x211c>
10106038:	00800044 	movi	r2,1
1010603c:	d9003317 	ldw	r4,204(sp)
10106040:	1105883a 	add	r2,r2,r4
10106044:	d8802e15 	stw	r2,184(sp)
10106048:	10004e16 	blt	r2,zero,10106184 <___vfprintf_internal_r+0x2080>
1010604c:	044019c4 	movi	r17,103
10106050:	003e2106 	br	101058d8 <__alt_data_end+0xfffe58d8>
10106054:	d9002917 	ldw	r4,164(sp)
10106058:	d8802104 	addi	r2,sp,132
1010605c:	d8800315 	stw	r2,12(sp)
10106060:	d9000015 	stw	r4,0(sp)
10106064:	d8802504 	addi	r2,sp,148
10106068:	d9403617 	ldw	r5,216(sp)
1010606c:	d9002c17 	ldw	r4,176(sp)
10106070:	d8800215 	stw	r2,8(sp)
10106074:	d8802604 	addi	r2,sp,152
10106078:	d8800115 	stw	r2,4(sp)
1010607c:	01c000c4 	movi	r7,3
10106080:	980d883a 	mov	r6,r19
10106084:	da003d15 	stw	r8,244(sp)
10106088:	01067dc0 	call	101067dc <_dtoa_r>
1010608c:	d8c02917 	ldw	r3,164(sp)
10106090:	da003d17 	ldw	r8,244(sp)
10106094:	1021883a 	mov	r16,r2
10106098:	00801184 	movi	r2,70
1010609c:	80f9883a 	add	fp,r16,r3
101060a0:	88bfd926 	beq	r17,r2,10106008 <__alt_data_end+0xfffe6008>
101060a4:	003de806 	br	10105848 <__alt_data_end+0xfffe5848>
101060a8:	d9002917 	ldw	r4,164(sp)
101060ac:	00c04d0e 	bge	zero,r3,101061e4 <___vfprintf_internal_r+0x20e0>
101060b0:	2000441e 	bne	r4,zero,101061c4 <___vfprintf_internal_r+0x20c0>
101060b4:	9480004c 	andi	r18,r18,1
101060b8:	9000421e 	bne	r18,zero,101061c4 <___vfprintf_internal_r+0x20c0>
101060bc:	1805883a 	mov	r2,r3
101060c0:	18007016 	blt	r3,zero,10106284 <___vfprintf_internal_r+0x2180>
101060c4:	d8c03217 	ldw	r3,200(sp)
101060c8:	d8c02e15 	stw	r3,184(sp)
101060cc:	003e0206 	br	101058d8 <__alt_data_end+0xfffe58d8>
101060d0:	df0022c4 	addi	fp,sp,139
101060d4:	dc002915 	stw	r16,164(sp)
101060d8:	4027883a 	mov	r19,r8
101060dc:	e021883a 	mov	r16,fp
101060e0:	b009883a 	mov	r4,r22
101060e4:	01400284 	movi	r5,10
101060e8:	0101af00 	call	10101af0 <__modsi3>
101060ec:	10800c04 	addi	r2,r2,48
101060f0:	843fffc4 	addi	r16,r16,-1
101060f4:	b009883a 	mov	r4,r22
101060f8:	01400284 	movi	r5,10
101060fc:	80800005 	stb	r2,0(r16)
10106100:	0101a6c0 	call	10101a6c <__divsi3>
10106104:	102d883a 	mov	r22,r2
10106108:	00800244 	movi	r2,9
1010610c:	15bff416 	blt	r2,r22,101060e0 <__alt_data_end+0xfffe60e0>
10106110:	9811883a 	mov	r8,r19
10106114:	b0800c04 	addi	r2,r22,48
10106118:	8027883a 	mov	r19,r16
1010611c:	997fffc4 	addi	r5,r19,-1
10106120:	98bfffc5 	stb	r2,-1(r19)
10106124:	dc002917 	ldw	r16,164(sp)
10106128:	2f006a2e 	bgeu	r5,fp,101062d4 <___vfprintf_internal_r+0x21d0>
1010612c:	d9c02384 	addi	r7,sp,142
10106130:	3ccfc83a 	sub	r7,r7,r19
10106134:	d9002344 	addi	r4,sp,141
10106138:	e1cf883a 	add	r7,fp,r7
1010613c:	00000106 	br	10106144 <___vfprintf_internal_r+0x2040>
10106140:	28800003 	ldbu	r2,0(r5)
10106144:	20800005 	stb	r2,0(r4)
10106148:	21000044 	addi	r4,r4,1
1010614c:	29400044 	addi	r5,r5,1
10106150:	393ffb1e 	bne	r7,r4,10106140 <__alt_data_end+0xfffe6140>
10106154:	d8802304 	addi	r2,sp,140
10106158:	14c5c83a 	sub	r2,r2,r19
1010615c:	d8c02344 	addi	r3,sp,141
10106160:	1885883a 	add	r2,r3,r2
10106164:	003f7006 	br	10105f28 <__alt_data_end+0xfffe5f28>
10106168:	0005883a 	mov	r2,zero
1010616c:	003f0f06 	br	10105dac <__alt_data_end+0xfffe5dac>
10106170:	d8c03217 	ldw	r3,200(sp)
10106174:	18c00044 	addi	r3,r3,1
10106178:	d8c02e15 	stw	r3,184(sp)
1010617c:	1805883a 	mov	r2,r3
10106180:	183fb20e 	bge	r3,zero,1010604c <__alt_data_end+0xfffe604c>
10106184:	0005883a 	mov	r2,zero
10106188:	003fb006 	br	1010604c <__alt_data_end+0xfffe604c>
1010618c:	d9003617 	ldw	r4,216(sp)
10106190:	000d883a 	mov	r6,zero
10106194:	000f883a 	mov	r7,zero
10106198:	980b883a 	mov	r5,r19
1010619c:	d8c03c15 	stw	r3,240(sp)
101061a0:	da003d15 	stw	r8,244(sp)
101061a4:	010d88c0 	call	1010d88c <__eqdf2>
101061a8:	d8c03c17 	ldw	r3,240(sp)
101061ac:	da003d17 	ldw	r8,244(sp)
101061b0:	103f9826 	beq	r2,zero,10106014 <__alt_data_end+0xfffe6014>
101061b4:	00800044 	movi	r2,1
101061b8:	10c7c83a 	sub	r3,r2,r3
101061bc:	d8c02615 	stw	r3,152(sp)
101061c0:	003f9506 	br	10106018 <__alt_data_end+0xfffe6018>
101061c4:	d9002917 	ldw	r4,164(sp)
101061c8:	d8c03217 	ldw	r3,200(sp)
101061cc:	20800044 	addi	r2,r4,1
101061d0:	1885883a 	add	r2,r3,r2
101061d4:	d8802e15 	stw	r2,184(sp)
101061d8:	103dbf0e 	bge	r2,zero,101058d8 <__alt_data_end+0xfffe58d8>
101061dc:	0005883a 	mov	r2,zero
101061e0:	003dbd06 	br	101058d8 <__alt_data_end+0xfffe58d8>
101061e4:	2000211e 	bne	r4,zero,1010626c <___vfprintf_internal_r+0x2168>
101061e8:	9480004c 	andi	r18,r18,1
101061ec:	90001f1e 	bne	r18,zero,1010626c <___vfprintf_internal_r+0x2168>
101061f0:	00800044 	movi	r2,1
101061f4:	d8802e15 	stw	r2,184(sp)
101061f8:	003db706 	br	101058d8 <__alt_data_end+0xfffe58d8>
101061fc:	00800b44 	movi	r2,45
10106200:	05adc83a 	sub	r22,zero,r22
10106204:	d8802305 	stb	r2,140(sp)
10106208:	003f3f06 	br	10105f08 <__alt_data_end+0xfffe5f08>
1010620c:	0005883a 	mov	r2,zero
10106210:	003f5206 	br	10105f5c <__alt_data_end+0xfffe5f5c>
10106214:	90a4703a 	and	r18,r18,r2
10106218:	903f4e26 	beq	r18,zero,10105f54 <__alt_data_end+0xfffe5f54>
1010621c:	003f4a06 	br	10105f48 <__alt_data_end+0xfffe5f48>
10106220:	00800084 	movi	r2,2
10106224:	10c5c83a 	sub	r2,r2,r3
10106228:	003f8406 	br	1010603c <__alt_data_end+0xfffe603c>
1010622c:	d8802d17 	ldw	r2,180(sp)
10106230:	d9002d17 	ldw	r4,180(sp)
10106234:	ac400043 	ldbu	r17,1(r21)
10106238:	10800017 	ldw	r2,0(r2)
1010623c:	582b883a 	mov	r21,r11
10106240:	d8802915 	stw	r2,164(sp)
10106244:	20800104 	addi	r2,r4,4
10106248:	d9002917 	ldw	r4,164(sp)
1010624c:	d8802d15 	stw	r2,180(sp)
10106250:	203e7a0e 	bge	r4,zero,10105c3c <__alt_data_end+0xfffe5c3c>
10106254:	8c403fcc 	andi	r17,r17,255
10106258:	00bfffc4 	movi	r2,-1
1010625c:	8c40201c 	xori	r17,r17,128
10106260:	d8802915 	stw	r2,164(sp)
10106264:	8c7fe004 	addi	r17,r17,-128
10106268:	00380706 	br	10104288 <__alt_data_end+0xfffe4288>
1010626c:	d8c02917 	ldw	r3,164(sp)
10106270:	18c00084 	addi	r3,r3,2
10106274:	d8c02e15 	stw	r3,184(sp)
10106278:	1805883a 	mov	r2,r3
1010627c:	183d960e 	bge	r3,zero,101058d8 <__alt_data_end+0xfffe58d8>
10106280:	003fd606 	br	101061dc <__alt_data_end+0xfffe61dc>
10106284:	0005883a 	mov	r2,zero
10106288:	003f8e06 	br	101060c4 <__alt_data_end+0xfffe60c4>
1010628c:	9080004c 	andi	r2,r18,1
10106290:	103f811e 	bne	r2,zero,10106098 <__alt_data_end+0xfffe6098>
10106294:	d8802117 	ldw	r2,132(sp)
10106298:	1405c83a 	sub	r2,r2,r16
1010629c:	d8803315 	stw	r2,204(sp)
101062a0:	b47ef326 	beq	r22,r17,10105e70 <__alt_data_end+0xfffe5e70>
101062a4:	dd802617 	ldw	r22,152(sp)
101062a8:	003f1106 	br	10105ef0 <__alt_data_end+0xfffe5ef0>
101062ac:	d9c02785 	stb	r7,158(sp)
101062b0:	00390406 	br	101046c4 <__alt_data_end+0xfffe46c4>
101062b4:	d9c02785 	stb	r7,158(sp)
101062b8:	0038d306 	br	10104608 <__alt_data_end+0xfffe4608>
101062bc:	d9c02785 	stb	r7,158(sp)
101062c0:	003a6106 	br	10104c48 <__alt_data_end+0xfffe4c48>
101062c4:	d9c02785 	stb	r7,158(sp)
101062c8:	003af806 	br	10104eac <__alt_data_end+0xfffe4eac>
101062cc:	0005883a 	mov	r2,zero
101062d0:	003d7e06 	br	101058cc <__alt_data_end+0xfffe58cc>
101062d4:	d8802344 	addi	r2,sp,141
101062d8:	003f1306 	br	10105f28 <__alt_data_end+0xfffe5f28>
101062dc:	d9c02785 	stb	r7,158(sp)
101062e0:	00392306 	br	10104770 <__alt_data_end+0xfffe4770>
101062e4:	d9c02785 	stb	r7,158(sp)
101062e8:	003aa906 	br	10104d90 <__alt_data_end+0xfffe4d90>
101062ec:	d9c02785 	stb	r7,158(sp)
101062f0:	003a3d06 	br	10104be8 <__alt_data_end+0xfffe4be8>
101062f4:	d9c02785 	stb	r7,158(sp)
101062f8:	003aca06 	br	10104e24 <__alt_data_end+0xfffe4e24>

101062fc <__vfprintf_internal>:
101062fc:	00840474 	movhi	r2,4113
10106300:	108cf104 	addi	r2,r2,13252
10106304:	300f883a 	mov	r7,r6
10106308:	280d883a 	mov	r6,r5
1010630c:	200b883a 	mov	r5,r4
10106310:	11000017 	ldw	r4,0(r2)
10106314:	01041041 	jmpi	10104104 <___vfprintf_internal_r>

10106318 <__sbprintf>:
10106318:	2880030b 	ldhu	r2,12(r5)
1010631c:	2ac01917 	ldw	r11,100(r5)
10106320:	2a80038b 	ldhu	r10,14(r5)
10106324:	2a400717 	ldw	r9,28(r5)
10106328:	2a000917 	ldw	r8,36(r5)
1010632c:	defee204 	addi	sp,sp,-1144
10106330:	00c10004 	movi	r3,1024
10106334:	dc011a15 	stw	r16,1128(sp)
10106338:	10bfff4c 	andi	r2,r2,65533
1010633c:	2821883a 	mov	r16,r5
10106340:	d8cb883a 	add	r5,sp,r3
10106344:	dc811c15 	stw	r18,1136(sp)
10106348:	dc411b15 	stw	r17,1132(sp)
1010634c:	dfc11d15 	stw	ra,1140(sp)
10106350:	2025883a 	mov	r18,r4
10106354:	d881030d 	sth	r2,1036(sp)
10106358:	dac11915 	stw	r11,1124(sp)
1010635c:	da81038d 	sth	r10,1038(sp)
10106360:	da410715 	stw	r9,1052(sp)
10106364:	da010915 	stw	r8,1060(sp)
10106368:	dec10015 	stw	sp,1024(sp)
1010636c:	dec10415 	stw	sp,1040(sp)
10106370:	d8c10215 	stw	r3,1032(sp)
10106374:	d8c10515 	stw	r3,1044(sp)
10106378:	d8010615 	stw	zero,1048(sp)
1010637c:	01041040 	call	10104104 <___vfprintf_internal_r>
10106380:	1023883a 	mov	r17,r2
10106384:	10000416 	blt	r2,zero,10106398 <__sbprintf+0x80>
10106388:	d9410004 	addi	r5,sp,1024
1010638c:	9009883a 	mov	r4,r18
10106390:	0101f400 	call	10101f40 <_fflush_r>
10106394:	10000d1e 	bne	r2,zero,101063cc <__sbprintf+0xb4>
10106398:	d881030b 	ldhu	r2,1036(sp)
1010639c:	1080100c 	andi	r2,r2,64
101063a0:	10000326 	beq	r2,zero,101063b0 <__sbprintf+0x98>
101063a4:	8080030b 	ldhu	r2,12(r16)
101063a8:	10801014 	ori	r2,r2,64
101063ac:	8080030d 	sth	r2,12(r16)
101063b0:	8805883a 	mov	r2,r17
101063b4:	dfc11d17 	ldw	ra,1140(sp)
101063b8:	dc811c17 	ldw	r18,1136(sp)
101063bc:	dc411b17 	ldw	r17,1132(sp)
101063c0:	dc011a17 	ldw	r16,1128(sp)
101063c4:	dec11e04 	addi	sp,sp,1144
101063c8:	f800283a 	ret
101063cc:	047fffc4 	movi	r17,-1
101063d0:	003ff106 	br	10106398 <__alt_data_end+0xfffe6398>

101063d4 <_write_r>:
101063d4:	defffd04 	addi	sp,sp,-12
101063d8:	2805883a 	mov	r2,r5
101063dc:	dc000015 	stw	r16,0(sp)
101063e0:	04040474 	movhi	r16,4113
101063e4:	dc400115 	stw	r17,4(sp)
101063e8:	300b883a 	mov	r5,r6
101063ec:	8413bd04 	addi	r16,r16,20212
101063f0:	2023883a 	mov	r17,r4
101063f4:	380d883a 	mov	r6,r7
101063f8:	1009883a 	mov	r4,r2
101063fc:	dfc00215 	stw	ra,8(sp)
10106400:	80000015 	stw	zero,0(r16)
10106404:	010fad00 	call	1010fad0 <write>
10106408:	00ffffc4 	movi	r3,-1
1010640c:	10c00526 	beq	r2,r3,10106424 <_write_r+0x50>
10106410:	dfc00217 	ldw	ra,8(sp)
10106414:	dc400117 	ldw	r17,4(sp)
10106418:	dc000017 	ldw	r16,0(sp)
1010641c:	dec00304 	addi	sp,sp,12
10106420:	f800283a 	ret
10106424:	80c00017 	ldw	r3,0(r16)
10106428:	183ff926 	beq	r3,zero,10106410 <__alt_data_end+0xfffe6410>
1010642c:	88c00015 	stw	r3,0(r17)
10106430:	003ff706 	br	10106410 <__alt_data_end+0xfffe6410>

10106434 <__swsetup_r>:
10106434:	00840474 	movhi	r2,4113
10106438:	defffd04 	addi	sp,sp,-12
1010643c:	108cf104 	addi	r2,r2,13252
10106440:	dc400115 	stw	r17,4(sp)
10106444:	2023883a 	mov	r17,r4
10106448:	11000017 	ldw	r4,0(r2)
1010644c:	dc000015 	stw	r16,0(sp)
10106450:	dfc00215 	stw	ra,8(sp)
10106454:	2821883a 	mov	r16,r5
10106458:	20000226 	beq	r4,zero,10106464 <__swsetup_r+0x30>
1010645c:	20800e17 	ldw	r2,56(r4)
10106460:	10003126 	beq	r2,zero,10106528 <__swsetup_r+0xf4>
10106464:	8080030b 	ldhu	r2,12(r16)
10106468:	10c0020c 	andi	r3,r2,8
1010646c:	1009883a 	mov	r4,r2
10106470:	18000f26 	beq	r3,zero,101064b0 <__swsetup_r+0x7c>
10106474:	80c00417 	ldw	r3,16(r16)
10106478:	18001526 	beq	r3,zero,101064d0 <__swsetup_r+0x9c>
1010647c:	1100004c 	andi	r4,r2,1
10106480:	20001c1e 	bne	r4,zero,101064f4 <__swsetup_r+0xc0>
10106484:	1080008c 	andi	r2,r2,2
10106488:	1000291e 	bne	r2,zero,10106530 <__swsetup_r+0xfc>
1010648c:	80800517 	ldw	r2,20(r16)
10106490:	80800215 	stw	r2,8(r16)
10106494:	18001c26 	beq	r3,zero,10106508 <__swsetup_r+0xd4>
10106498:	0005883a 	mov	r2,zero
1010649c:	dfc00217 	ldw	ra,8(sp)
101064a0:	dc400117 	ldw	r17,4(sp)
101064a4:	dc000017 	ldw	r16,0(sp)
101064a8:	dec00304 	addi	sp,sp,12
101064ac:	f800283a 	ret
101064b0:	2080040c 	andi	r2,r4,16
101064b4:	10002e26 	beq	r2,zero,10106570 <__swsetup_r+0x13c>
101064b8:	2080010c 	andi	r2,r4,4
101064bc:	10001e1e 	bne	r2,zero,10106538 <__swsetup_r+0x104>
101064c0:	80c00417 	ldw	r3,16(r16)
101064c4:	20800214 	ori	r2,r4,8
101064c8:	8080030d 	sth	r2,12(r16)
101064cc:	183feb1e 	bne	r3,zero,1010647c <__alt_data_end+0xfffe647c>
101064d0:	1100a00c 	andi	r4,r2,640
101064d4:	01408004 	movi	r5,512
101064d8:	217fe826 	beq	r4,r5,1010647c <__alt_data_end+0xfffe647c>
101064dc:	800b883a 	mov	r5,r16
101064e0:	8809883a 	mov	r4,r17
101064e4:	010305c0 	call	1010305c <__smakebuf_r>
101064e8:	8080030b 	ldhu	r2,12(r16)
101064ec:	80c00417 	ldw	r3,16(r16)
101064f0:	003fe206 	br	1010647c <__alt_data_end+0xfffe647c>
101064f4:	80800517 	ldw	r2,20(r16)
101064f8:	80000215 	stw	zero,8(r16)
101064fc:	0085c83a 	sub	r2,zero,r2
10106500:	80800615 	stw	r2,24(r16)
10106504:	183fe41e 	bne	r3,zero,10106498 <__alt_data_end+0xfffe6498>
10106508:	80c0030b 	ldhu	r3,12(r16)
1010650c:	0005883a 	mov	r2,zero
10106510:	1900200c 	andi	r4,r3,128
10106514:	203fe126 	beq	r4,zero,1010649c <__alt_data_end+0xfffe649c>
10106518:	18c01014 	ori	r3,r3,64
1010651c:	80c0030d 	sth	r3,12(r16)
10106520:	00bfffc4 	movi	r2,-1
10106524:	003fdd06 	br	1010649c <__alt_data_end+0xfffe649c>
10106528:	010231c0 	call	1010231c <__sinit>
1010652c:	003fcd06 	br	10106464 <__alt_data_end+0xfffe6464>
10106530:	0005883a 	mov	r2,zero
10106534:	003fd606 	br	10106490 <__alt_data_end+0xfffe6490>
10106538:	81400c17 	ldw	r5,48(r16)
1010653c:	28000626 	beq	r5,zero,10106558 <__swsetup_r+0x124>
10106540:	80801004 	addi	r2,r16,64
10106544:	28800326 	beq	r5,r2,10106554 <__swsetup_r+0x120>
10106548:	8809883a 	mov	r4,r17
1010654c:	01025e80 	call	101025e8 <_free_r>
10106550:	8100030b 	ldhu	r4,12(r16)
10106554:	80000c15 	stw	zero,48(r16)
10106558:	80c00417 	ldw	r3,16(r16)
1010655c:	00bff6c4 	movi	r2,-37
10106560:	1108703a 	and	r4,r2,r4
10106564:	80000115 	stw	zero,4(r16)
10106568:	80c00015 	stw	r3,0(r16)
1010656c:	003fd506 	br	101064c4 <__alt_data_end+0xfffe64c4>
10106570:	00800244 	movi	r2,9
10106574:	88800015 	stw	r2,0(r17)
10106578:	20801014 	ori	r2,r4,64
1010657c:	8080030d 	sth	r2,12(r16)
10106580:	00bfffc4 	movi	r2,-1
10106584:	003fc506 	br	1010649c <__alt_data_end+0xfffe649c>

10106588 <_close_r>:
10106588:	defffd04 	addi	sp,sp,-12
1010658c:	dc000015 	stw	r16,0(sp)
10106590:	04040474 	movhi	r16,4113
10106594:	dc400115 	stw	r17,4(sp)
10106598:	8413bd04 	addi	r16,r16,20212
1010659c:	2023883a 	mov	r17,r4
101065a0:	2809883a 	mov	r4,r5
101065a4:	dfc00215 	stw	ra,8(sp)
101065a8:	80000015 	stw	zero,0(r16)
101065ac:	010ed9c0 	call	1010ed9c <close>
101065b0:	00ffffc4 	movi	r3,-1
101065b4:	10c00526 	beq	r2,r3,101065cc <_close_r+0x44>
101065b8:	dfc00217 	ldw	ra,8(sp)
101065bc:	dc400117 	ldw	r17,4(sp)
101065c0:	dc000017 	ldw	r16,0(sp)
101065c4:	dec00304 	addi	sp,sp,12
101065c8:	f800283a 	ret
101065cc:	80c00017 	ldw	r3,0(r16)
101065d0:	183ff926 	beq	r3,zero,101065b8 <__alt_data_end+0xfffe65b8>
101065d4:	88c00015 	stw	r3,0(r17)
101065d8:	003ff706 	br	101065b8 <__alt_data_end+0xfffe65b8>

101065dc <quorem>:
101065dc:	defff704 	addi	sp,sp,-36
101065e0:	dc800215 	stw	r18,8(sp)
101065e4:	20800417 	ldw	r2,16(r4)
101065e8:	2c800417 	ldw	r18,16(r5)
101065ec:	dfc00815 	stw	ra,32(sp)
101065f0:	ddc00715 	stw	r23,28(sp)
101065f4:	dd800615 	stw	r22,24(sp)
101065f8:	dd400515 	stw	r21,20(sp)
101065fc:	dd000415 	stw	r20,16(sp)
10106600:	dcc00315 	stw	r19,12(sp)
10106604:	dc400115 	stw	r17,4(sp)
10106608:	dc000015 	stw	r16,0(sp)
1010660c:	14807116 	blt	r2,r18,101067d4 <quorem+0x1f8>
10106610:	94bfffc4 	addi	r18,r18,-1
10106614:	94ad883a 	add	r22,r18,r18
10106618:	b5ad883a 	add	r22,r22,r22
1010661c:	2c400504 	addi	r17,r5,20
10106620:	8da9883a 	add	r20,r17,r22
10106624:	25400504 	addi	r21,r4,20
10106628:	282f883a 	mov	r23,r5
1010662c:	adad883a 	add	r22,r21,r22
10106630:	a1400017 	ldw	r5,0(r20)
10106634:	2021883a 	mov	r16,r4
10106638:	b1000017 	ldw	r4,0(r22)
1010663c:	29400044 	addi	r5,r5,1
10106640:	0101b640 	call	10101b64 <__udivsi3>
10106644:	1027883a 	mov	r19,r2
10106648:	10002c26 	beq	r2,zero,101066fc <quorem+0x120>
1010664c:	a813883a 	mov	r9,r21
10106650:	880b883a 	mov	r5,r17
10106654:	0009883a 	mov	r4,zero
10106658:	000d883a 	mov	r6,zero
1010665c:	2a000017 	ldw	r8,0(r5)
10106660:	49c00017 	ldw	r7,0(r9)
10106664:	29400104 	addi	r5,r5,4
10106668:	40bfffcc 	andi	r2,r8,65535
1010666c:	14c5383a 	mul	r2,r2,r19
10106670:	4010d43a 	srli	r8,r8,16
10106674:	38ffffcc 	andi	r3,r7,65535
10106678:	1105883a 	add	r2,r2,r4
1010667c:	1008d43a 	srli	r4,r2,16
10106680:	44d1383a 	mul	r8,r8,r19
10106684:	198d883a 	add	r6,r3,r6
10106688:	10ffffcc 	andi	r3,r2,65535
1010668c:	30c7c83a 	sub	r3,r6,r3
10106690:	380ed43a 	srli	r7,r7,16
10106694:	4105883a 	add	r2,r8,r4
10106698:	180dd43a 	srai	r6,r3,16
1010669c:	113fffcc 	andi	r4,r2,65535
101066a0:	390fc83a 	sub	r7,r7,r4
101066a4:	398d883a 	add	r6,r7,r6
101066a8:	300e943a 	slli	r7,r6,16
101066ac:	18ffffcc 	andi	r3,r3,65535
101066b0:	1008d43a 	srli	r4,r2,16
101066b4:	38ceb03a 	or	r7,r7,r3
101066b8:	49c00015 	stw	r7,0(r9)
101066bc:	300dd43a 	srai	r6,r6,16
101066c0:	4a400104 	addi	r9,r9,4
101066c4:	a17fe52e 	bgeu	r20,r5,1010665c <__alt_data_end+0xfffe665c>
101066c8:	b0800017 	ldw	r2,0(r22)
101066cc:	10000b1e 	bne	r2,zero,101066fc <quorem+0x120>
101066d0:	b0bfff04 	addi	r2,r22,-4
101066d4:	a880082e 	bgeu	r21,r2,101066f8 <quorem+0x11c>
101066d8:	b0ffff17 	ldw	r3,-4(r22)
101066dc:	18000326 	beq	r3,zero,101066ec <quorem+0x110>
101066e0:	00000506 	br	101066f8 <quorem+0x11c>
101066e4:	10c00017 	ldw	r3,0(r2)
101066e8:	1800031e 	bne	r3,zero,101066f8 <quorem+0x11c>
101066ec:	10bfff04 	addi	r2,r2,-4
101066f0:	94bfffc4 	addi	r18,r18,-1
101066f4:	a8bffb36 	bltu	r21,r2,101066e4 <__alt_data_end+0xfffe66e4>
101066f8:	84800415 	stw	r18,16(r16)
101066fc:	b80b883a 	mov	r5,r23
10106700:	8009883a 	mov	r4,r16
10106704:	01091ac0 	call	101091ac <__mcmp>
10106708:	10002616 	blt	r2,zero,101067a4 <quorem+0x1c8>
1010670c:	9cc00044 	addi	r19,r19,1
10106710:	a805883a 	mov	r2,r21
10106714:	000b883a 	mov	r5,zero
10106718:	11000017 	ldw	r4,0(r2)
1010671c:	89800017 	ldw	r6,0(r17)
10106720:	10800104 	addi	r2,r2,4
10106724:	20ffffcc 	andi	r3,r4,65535
10106728:	194b883a 	add	r5,r3,r5
1010672c:	30ffffcc 	andi	r3,r6,65535
10106730:	28c7c83a 	sub	r3,r5,r3
10106734:	300cd43a 	srli	r6,r6,16
10106738:	2008d43a 	srli	r4,r4,16
1010673c:	180bd43a 	srai	r5,r3,16
10106740:	18ffffcc 	andi	r3,r3,65535
10106744:	2189c83a 	sub	r4,r4,r6
10106748:	2149883a 	add	r4,r4,r5
1010674c:	200c943a 	slli	r6,r4,16
10106750:	8c400104 	addi	r17,r17,4
10106754:	200bd43a 	srai	r5,r4,16
10106758:	30c6b03a 	or	r3,r6,r3
1010675c:	10ffff15 	stw	r3,-4(r2)
10106760:	a47fed2e 	bgeu	r20,r17,10106718 <__alt_data_end+0xfffe6718>
10106764:	9485883a 	add	r2,r18,r18
10106768:	1085883a 	add	r2,r2,r2
1010676c:	a887883a 	add	r3,r21,r2
10106770:	18800017 	ldw	r2,0(r3)
10106774:	10000b1e 	bne	r2,zero,101067a4 <quorem+0x1c8>
10106778:	18bfff04 	addi	r2,r3,-4
1010677c:	a880082e 	bgeu	r21,r2,101067a0 <quorem+0x1c4>
10106780:	18ffff17 	ldw	r3,-4(r3)
10106784:	18000326 	beq	r3,zero,10106794 <quorem+0x1b8>
10106788:	00000506 	br	101067a0 <quorem+0x1c4>
1010678c:	10c00017 	ldw	r3,0(r2)
10106790:	1800031e 	bne	r3,zero,101067a0 <quorem+0x1c4>
10106794:	10bfff04 	addi	r2,r2,-4
10106798:	94bfffc4 	addi	r18,r18,-1
1010679c:	a8bffb36 	bltu	r21,r2,1010678c <__alt_data_end+0xfffe678c>
101067a0:	84800415 	stw	r18,16(r16)
101067a4:	9805883a 	mov	r2,r19
101067a8:	dfc00817 	ldw	ra,32(sp)
101067ac:	ddc00717 	ldw	r23,28(sp)
101067b0:	dd800617 	ldw	r22,24(sp)
101067b4:	dd400517 	ldw	r21,20(sp)
101067b8:	dd000417 	ldw	r20,16(sp)
101067bc:	dcc00317 	ldw	r19,12(sp)
101067c0:	dc800217 	ldw	r18,8(sp)
101067c4:	dc400117 	ldw	r17,4(sp)
101067c8:	dc000017 	ldw	r16,0(sp)
101067cc:	dec00904 	addi	sp,sp,36
101067d0:	f800283a 	ret
101067d4:	0005883a 	mov	r2,zero
101067d8:	003ff306 	br	101067a8 <__alt_data_end+0xfffe67a8>

101067dc <_dtoa_r>:
101067dc:	20801017 	ldw	r2,64(r4)
101067e0:	deffde04 	addi	sp,sp,-136
101067e4:	df002015 	stw	fp,128(sp)
101067e8:	dcc01b15 	stw	r19,108(sp)
101067ec:	dc801a15 	stw	r18,104(sp)
101067f0:	dc401915 	stw	r17,100(sp)
101067f4:	dc001815 	stw	r16,96(sp)
101067f8:	dfc02115 	stw	ra,132(sp)
101067fc:	ddc01f15 	stw	r23,124(sp)
10106800:	dd801e15 	stw	r22,120(sp)
10106804:	dd401d15 	stw	r21,116(sp)
10106808:	dd001c15 	stw	r20,112(sp)
1010680c:	d9c00315 	stw	r7,12(sp)
10106810:	2039883a 	mov	fp,r4
10106814:	3023883a 	mov	r17,r6
10106818:	2825883a 	mov	r18,r5
1010681c:	dc002417 	ldw	r16,144(sp)
10106820:	3027883a 	mov	r19,r6
10106824:	10000826 	beq	r2,zero,10106848 <_dtoa_r+0x6c>
10106828:	21801117 	ldw	r6,68(r4)
1010682c:	00c00044 	movi	r3,1
10106830:	100b883a 	mov	r5,r2
10106834:	1986983a 	sll	r3,r3,r6
10106838:	11800115 	stw	r6,4(r2)
1010683c:	10c00215 	stw	r3,8(r2)
10106840:	010898c0 	call	1010898c <_Bfree>
10106844:	e0001015 	stw	zero,64(fp)
10106848:	88002e16 	blt	r17,zero,10106904 <_dtoa_r+0x128>
1010684c:	80000015 	stw	zero,0(r16)
10106850:	889ffc2c 	andhi	r2,r17,32752
10106854:	00dffc34 	movhi	r3,32752
10106858:	10c01c26 	beq	r2,r3,101068cc <_dtoa_r+0xf0>
1010685c:	000d883a 	mov	r6,zero
10106860:	000f883a 	mov	r7,zero
10106864:	9009883a 	mov	r4,r18
10106868:	980b883a 	mov	r5,r19
1010686c:	010d88c0 	call	1010d88c <__eqdf2>
10106870:	10002b1e 	bne	r2,zero,10106920 <_dtoa_r+0x144>
10106874:	d9c02317 	ldw	r7,140(sp)
10106878:	00800044 	movi	r2,1
1010687c:	38800015 	stw	r2,0(r7)
10106880:	d8802517 	ldw	r2,148(sp)
10106884:	10019e26 	beq	r2,zero,10106f00 <_dtoa_r+0x724>
10106888:	d8c02517 	ldw	r3,148(sp)
1010688c:	00840474 	movhi	r2,4113
10106890:	10859744 	addi	r2,r2,5725
10106894:	18800015 	stw	r2,0(r3)
10106898:	10bfffc4 	addi	r2,r2,-1
1010689c:	dfc02117 	ldw	ra,132(sp)
101068a0:	df002017 	ldw	fp,128(sp)
101068a4:	ddc01f17 	ldw	r23,124(sp)
101068a8:	dd801e17 	ldw	r22,120(sp)
101068ac:	dd401d17 	ldw	r21,116(sp)
101068b0:	dd001c17 	ldw	r20,112(sp)
101068b4:	dcc01b17 	ldw	r19,108(sp)
101068b8:	dc801a17 	ldw	r18,104(sp)
101068bc:	dc401917 	ldw	r17,100(sp)
101068c0:	dc001817 	ldw	r16,96(sp)
101068c4:	dec02204 	addi	sp,sp,136
101068c8:	f800283a 	ret
101068cc:	d8c02317 	ldw	r3,140(sp)
101068d0:	0089c3c4 	movi	r2,9999
101068d4:	18800015 	stw	r2,0(r3)
101068d8:	90017726 	beq	r18,zero,10106eb8 <_dtoa_r+0x6dc>
101068dc:	00840474 	movhi	r2,4113
101068e0:	1085a304 	addi	r2,r2,5772
101068e4:	d9002517 	ldw	r4,148(sp)
101068e8:	203fec26 	beq	r4,zero,1010689c <__alt_data_end+0xfffe689c>
101068ec:	10c000c7 	ldb	r3,3(r2)
101068f0:	1801781e 	bne	r3,zero,10106ed4 <_dtoa_r+0x6f8>
101068f4:	10c000c4 	addi	r3,r2,3
101068f8:	d9802517 	ldw	r6,148(sp)
101068fc:	30c00015 	stw	r3,0(r6)
10106900:	003fe606 	br	1010689c <__alt_data_end+0xfffe689c>
10106904:	04e00034 	movhi	r19,32768
10106908:	9cffffc4 	addi	r19,r19,-1
1010690c:	00800044 	movi	r2,1
10106910:	8ce6703a 	and	r19,r17,r19
10106914:	80800015 	stw	r2,0(r16)
10106918:	9823883a 	mov	r17,r19
1010691c:	003fcc06 	br	10106850 <__alt_data_end+0xfffe6850>
10106920:	d8800204 	addi	r2,sp,8
10106924:	d8800015 	stw	r2,0(sp)
10106928:	d9c00104 	addi	r7,sp,4
1010692c:	900b883a 	mov	r5,r18
10106930:	980d883a 	mov	r6,r19
10106934:	e009883a 	mov	r4,fp
10106938:	8820d53a 	srli	r16,r17,20
1010693c:	01095780 	call	10109578 <__d2b>
10106940:	d8800915 	stw	r2,36(sp)
10106944:	8001651e 	bne	r16,zero,10106edc <_dtoa_r+0x700>
10106948:	dd800217 	ldw	r22,8(sp)
1010694c:	dc000117 	ldw	r16,4(sp)
10106950:	00800804 	movi	r2,32
10106954:	b421883a 	add	r16,r22,r16
10106958:	80c10c84 	addi	r3,r16,1074
1010695c:	10c2d10e 	bge	r2,r3,101074a4 <_dtoa_r+0xcc8>
10106960:	00801004 	movi	r2,64
10106964:	81010484 	addi	r4,r16,1042
10106968:	10c7c83a 	sub	r3,r2,r3
1010696c:	9108d83a 	srl	r4,r18,r4
10106970:	88e2983a 	sll	r17,r17,r3
10106974:	2448b03a 	or	r4,r4,r17
10106978:	010ec540 	call	1010ec54 <__floatunsidf>
1010697c:	017f8434 	movhi	r5,65040
10106980:	01800044 	movi	r6,1
10106984:	1009883a 	mov	r4,r2
10106988:	194b883a 	add	r5,r3,r5
1010698c:	843fffc4 	addi	r16,r16,-1
10106990:	d9801115 	stw	r6,68(sp)
10106994:	000d883a 	mov	r6,zero
10106998:	01cffe34 	movhi	r7,16376
1010699c:	010e1fc0 	call	1010e1fc <__subdf3>
101069a0:	0198dbf4 	movhi	r6,25455
101069a4:	01cff4f4 	movhi	r7,16339
101069a8:	3190d844 	addi	r6,r6,17249
101069ac:	39e1e9c4 	addi	r7,r7,-30809
101069b0:	1009883a 	mov	r4,r2
101069b4:	180b883a 	mov	r5,r3
101069b8:	010dae40 	call	1010dae4 <__muldf3>
101069bc:	01a2d874 	movhi	r6,35681
101069c0:	01cff1f4 	movhi	r7,16327
101069c4:	31b22cc4 	addi	r6,r6,-14157
101069c8:	39e28a04 	addi	r7,r7,-30168
101069cc:	180b883a 	mov	r5,r3
101069d0:	1009883a 	mov	r4,r2
101069d4:	010c6f80 	call	1010c6f8 <__adddf3>
101069d8:	8009883a 	mov	r4,r16
101069dc:	1029883a 	mov	r20,r2
101069e0:	1823883a 	mov	r17,r3
101069e4:	010eb780 	call	1010eb78 <__floatsidf>
101069e8:	019427f4 	movhi	r6,20639
101069ec:	01cff4f4 	movhi	r7,16339
101069f0:	319e7ec4 	addi	r6,r6,31227
101069f4:	39d104c4 	addi	r7,r7,17427
101069f8:	1009883a 	mov	r4,r2
101069fc:	180b883a 	mov	r5,r3
10106a00:	010dae40 	call	1010dae4 <__muldf3>
10106a04:	100d883a 	mov	r6,r2
10106a08:	180f883a 	mov	r7,r3
10106a0c:	a009883a 	mov	r4,r20
10106a10:	880b883a 	mov	r5,r17
10106a14:	010c6f80 	call	1010c6f8 <__adddf3>
10106a18:	1009883a 	mov	r4,r2
10106a1c:	180b883a 	mov	r5,r3
10106a20:	1029883a 	mov	r20,r2
10106a24:	1823883a 	mov	r17,r3
10106a28:	010eaf80 	call	1010eaf8 <__fixdfsi>
10106a2c:	000d883a 	mov	r6,zero
10106a30:	000f883a 	mov	r7,zero
10106a34:	a009883a 	mov	r4,r20
10106a38:	880b883a 	mov	r5,r17
10106a3c:	d8800515 	stw	r2,20(sp)
10106a40:	010d9f00 	call	1010d9f0 <__ledf2>
10106a44:	10028716 	blt	r2,zero,10107464 <_dtoa_r+0xc88>
10106a48:	d8c00517 	ldw	r3,20(sp)
10106a4c:	00800584 	movi	r2,22
10106a50:	10c27536 	bltu	r2,r3,10107428 <_dtoa_r+0xc4c>
10106a54:	180490fa 	slli	r2,r3,3
10106a58:	00c40474 	movhi	r3,4113
10106a5c:	18c5be04 	addi	r3,r3,5880
10106a60:	1885883a 	add	r2,r3,r2
10106a64:	11000017 	ldw	r4,0(r2)
10106a68:	11400117 	ldw	r5,4(r2)
10106a6c:	900d883a 	mov	r6,r18
10106a70:	980f883a 	mov	r7,r19
10106a74:	010d9140 	call	1010d914 <__gedf2>
10106a78:	00828d0e 	bge	zero,r2,101074b0 <_dtoa_r+0xcd4>
10106a7c:	d9000517 	ldw	r4,20(sp)
10106a80:	d8000e15 	stw	zero,56(sp)
10106a84:	213fffc4 	addi	r4,r4,-1
10106a88:	d9000515 	stw	r4,20(sp)
10106a8c:	b42dc83a 	sub	r22,r22,r16
10106a90:	b5bfffc4 	addi	r22,r22,-1
10106a94:	b0026f16 	blt	r22,zero,10107454 <_dtoa_r+0xc78>
10106a98:	d8000815 	stw	zero,32(sp)
10106a9c:	d9c00517 	ldw	r7,20(sp)
10106aa0:	38026416 	blt	r7,zero,10107434 <_dtoa_r+0xc58>
10106aa4:	b1ed883a 	add	r22,r22,r7
10106aa8:	d9c00d15 	stw	r7,52(sp)
10106aac:	d8000a15 	stw	zero,40(sp)
10106ab0:	d9800317 	ldw	r6,12(sp)
10106ab4:	00800244 	movi	r2,9
10106ab8:	11811436 	bltu	r2,r6,10106f0c <_dtoa_r+0x730>
10106abc:	00800144 	movi	r2,5
10106ac0:	1184e10e 	bge	r2,r6,10107e48 <_dtoa_r+0x166c>
10106ac4:	31bfff04 	addi	r6,r6,-4
10106ac8:	d9800315 	stw	r6,12(sp)
10106acc:	0023883a 	mov	r17,zero
10106ad0:	d9800317 	ldw	r6,12(sp)
10106ad4:	008000c4 	movi	r2,3
10106ad8:	30836726 	beq	r6,r2,10107878 <_dtoa_r+0x109c>
10106adc:	1183410e 	bge	r2,r6,101077e4 <_dtoa_r+0x1008>
10106ae0:	d9c00317 	ldw	r7,12(sp)
10106ae4:	00800104 	movi	r2,4
10106ae8:	38827c26 	beq	r7,r2,101074dc <_dtoa_r+0xd00>
10106aec:	00800144 	movi	r2,5
10106af0:	3884c41e 	bne	r7,r2,10107e04 <_dtoa_r+0x1628>
10106af4:	00800044 	movi	r2,1
10106af8:	d8800b15 	stw	r2,44(sp)
10106afc:	d8c00517 	ldw	r3,20(sp)
10106b00:	d9002217 	ldw	r4,136(sp)
10106b04:	1907883a 	add	r3,r3,r4
10106b08:	19800044 	addi	r6,r3,1
10106b0c:	d8c00c15 	stw	r3,48(sp)
10106b10:	d9800615 	stw	r6,24(sp)
10106b14:	0183a40e 	bge	zero,r6,101079a8 <_dtoa_r+0x11cc>
10106b18:	d9800617 	ldw	r6,24(sp)
10106b1c:	3021883a 	mov	r16,r6
10106b20:	e0001115 	stw	zero,68(fp)
10106b24:	008005c4 	movi	r2,23
10106b28:	1184c92e 	bgeu	r2,r6,10107e50 <_dtoa_r+0x1674>
10106b2c:	00c00044 	movi	r3,1
10106b30:	00800104 	movi	r2,4
10106b34:	1085883a 	add	r2,r2,r2
10106b38:	11000504 	addi	r4,r2,20
10106b3c:	180b883a 	mov	r5,r3
10106b40:	18c00044 	addi	r3,r3,1
10106b44:	313ffb2e 	bgeu	r6,r4,10106b34 <__alt_data_end+0xfffe6b34>
10106b48:	e1401115 	stw	r5,68(fp)
10106b4c:	e009883a 	mov	r4,fp
10106b50:	01088e40 	call	101088e4 <_Balloc>
10106b54:	d8800715 	stw	r2,28(sp)
10106b58:	e0801015 	stw	r2,64(fp)
10106b5c:	00800384 	movi	r2,14
10106b60:	1400f736 	bltu	r2,r16,10106f40 <_dtoa_r+0x764>
10106b64:	8800f626 	beq	r17,zero,10106f40 <_dtoa_r+0x764>
10106b68:	d9c00517 	ldw	r7,20(sp)
10106b6c:	01c39a0e 	bge	zero,r7,101079d8 <_dtoa_r+0x11fc>
10106b70:	388003cc 	andi	r2,r7,15
10106b74:	100490fa 	slli	r2,r2,3
10106b78:	382bd13a 	srai	r21,r7,4
10106b7c:	00c40474 	movhi	r3,4113
10106b80:	18c5be04 	addi	r3,r3,5880
10106b84:	1885883a 	add	r2,r3,r2
10106b88:	a8c0040c 	andi	r3,r21,16
10106b8c:	12400017 	ldw	r9,0(r2)
10106b90:	12000117 	ldw	r8,4(r2)
10106b94:	18037926 	beq	r3,zero,1010797c <_dtoa_r+0x11a0>
10106b98:	00840474 	movhi	r2,4113
10106b9c:	1085b404 	addi	r2,r2,5840
10106ba0:	11800817 	ldw	r6,32(r2)
10106ba4:	11c00917 	ldw	r7,36(r2)
10106ba8:	9009883a 	mov	r4,r18
10106bac:	980b883a 	mov	r5,r19
10106bb0:	da001715 	stw	r8,92(sp)
10106bb4:	da401615 	stw	r9,88(sp)
10106bb8:	010cfa40 	call	1010cfa4 <__divdf3>
10106bbc:	da001717 	ldw	r8,92(sp)
10106bc0:	da401617 	ldw	r9,88(sp)
10106bc4:	ad4003cc 	andi	r21,r21,15
10106bc8:	040000c4 	movi	r16,3
10106bcc:	1023883a 	mov	r17,r2
10106bd0:	1829883a 	mov	r20,r3
10106bd4:	a8001126 	beq	r21,zero,10106c1c <_dtoa_r+0x440>
10106bd8:	05c40474 	movhi	r23,4113
10106bdc:	bdc5b404 	addi	r23,r23,5840
10106be0:	4805883a 	mov	r2,r9
10106be4:	4007883a 	mov	r3,r8
10106be8:	a980004c 	andi	r6,r21,1
10106bec:	1009883a 	mov	r4,r2
10106bf0:	a82bd07a 	srai	r21,r21,1
10106bf4:	180b883a 	mov	r5,r3
10106bf8:	30000426 	beq	r6,zero,10106c0c <_dtoa_r+0x430>
10106bfc:	b9800017 	ldw	r6,0(r23)
10106c00:	b9c00117 	ldw	r7,4(r23)
10106c04:	84000044 	addi	r16,r16,1
10106c08:	010dae40 	call	1010dae4 <__muldf3>
10106c0c:	bdc00204 	addi	r23,r23,8
10106c10:	a83ff51e 	bne	r21,zero,10106be8 <__alt_data_end+0xfffe6be8>
10106c14:	1013883a 	mov	r9,r2
10106c18:	1811883a 	mov	r8,r3
10106c1c:	480d883a 	mov	r6,r9
10106c20:	400f883a 	mov	r7,r8
10106c24:	8809883a 	mov	r4,r17
10106c28:	a00b883a 	mov	r5,r20
10106c2c:	010cfa40 	call	1010cfa4 <__divdf3>
10106c30:	d8800f15 	stw	r2,60(sp)
10106c34:	d8c01015 	stw	r3,64(sp)
10106c38:	d8c00e17 	ldw	r3,56(sp)
10106c3c:	18000626 	beq	r3,zero,10106c58 <_dtoa_r+0x47c>
10106c40:	d9000f17 	ldw	r4,60(sp)
10106c44:	d9401017 	ldw	r5,64(sp)
10106c48:	000d883a 	mov	r6,zero
10106c4c:	01cffc34 	movhi	r7,16368
10106c50:	010d9f00 	call	1010d9f0 <__ledf2>
10106c54:	10040b16 	blt	r2,zero,10107c84 <_dtoa_r+0x14a8>
10106c58:	8009883a 	mov	r4,r16
10106c5c:	010eb780 	call	1010eb78 <__floatsidf>
10106c60:	d9800f17 	ldw	r6,60(sp)
10106c64:	d9c01017 	ldw	r7,64(sp)
10106c68:	1009883a 	mov	r4,r2
10106c6c:	180b883a 	mov	r5,r3
10106c70:	010dae40 	call	1010dae4 <__muldf3>
10106c74:	000d883a 	mov	r6,zero
10106c78:	01d00734 	movhi	r7,16412
10106c7c:	1009883a 	mov	r4,r2
10106c80:	180b883a 	mov	r5,r3
10106c84:	010c6f80 	call	1010c6f8 <__adddf3>
10106c88:	1021883a 	mov	r16,r2
10106c8c:	d8800617 	ldw	r2,24(sp)
10106c90:	047f3034 	movhi	r17,64704
10106c94:	1c63883a 	add	r17,r3,r17
10106c98:	10031826 	beq	r2,zero,101078fc <_dtoa_r+0x1120>
10106c9c:	d8c00517 	ldw	r3,20(sp)
10106ca0:	db000617 	ldw	r12,24(sp)
10106ca4:	d8c01315 	stw	r3,76(sp)
10106ca8:	d9000b17 	ldw	r4,44(sp)
10106cac:	20038f26 	beq	r4,zero,10107aec <_dtoa_r+0x1310>
10106cb0:	60bfffc4 	addi	r2,r12,-1
10106cb4:	100490fa 	slli	r2,r2,3
10106cb8:	00c40474 	movhi	r3,4113
10106cbc:	18c5be04 	addi	r3,r3,5880
10106cc0:	1885883a 	add	r2,r3,r2
10106cc4:	11800017 	ldw	r6,0(r2)
10106cc8:	11c00117 	ldw	r7,4(r2)
10106ccc:	d8800717 	ldw	r2,28(sp)
10106cd0:	0009883a 	mov	r4,zero
10106cd4:	014ff834 	movhi	r5,16352
10106cd8:	db001615 	stw	r12,88(sp)
10106cdc:	15c00044 	addi	r23,r2,1
10106ce0:	010cfa40 	call	1010cfa4 <__divdf3>
10106ce4:	800d883a 	mov	r6,r16
10106ce8:	880f883a 	mov	r7,r17
10106cec:	1009883a 	mov	r4,r2
10106cf0:	180b883a 	mov	r5,r3
10106cf4:	010e1fc0 	call	1010e1fc <__subdf3>
10106cf8:	d9401017 	ldw	r5,64(sp)
10106cfc:	d9000f17 	ldw	r4,60(sp)
10106d00:	102b883a 	mov	r21,r2
10106d04:	d8c01215 	stw	r3,72(sp)
10106d08:	010eaf80 	call	1010eaf8 <__fixdfsi>
10106d0c:	1009883a 	mov	r4,r2
10106d10:	1029883a 	mov	r20,r2
10106d14:	010eb780 	call	1010eb78 <__floatsidf>
10106d18:	d9000f17 	ldw	r4,60(sp)
10106d1c:	d9401017 	ldw	r5,64(sp)
10106d20:	100d883a 	mov	r6,r2
10106d24:	180f883a 	mov	r7,r3
10106d28:	010e1fc0 	call	1010e1fc <__subdf3>
10106d2c:	1823883a 	mov	r17,r3
10106d30:	d8c00717 	ldw	r3,28(sp)
10106d34:	d9401217 	ldw	r5,72(sp)
10106d38:	a2000c04 	addi	r8,r20,48
10106d3c:	1021883a 	mov	r16,r2
10106d40:	1a000005 	stb	r8,0(r3)
10106d44:	800d883a 	mov	r6,r16
10106d48:	880f883a 	mov	r7,r17
10106d4c:	a809883a 	mov	r4,r21
10106d50:	4029883a 	mov	r20,r8
10106d54:	010d9140 	call	1010d914 <__gedf2>
10106d58:	00841d16 	blt	zero,r2,10107dd0 <_dtoa_r+0x15f4>
10106d5c:	800d883a 	mov	r6,r16
10106d60:	880f883a 	mov	r7,r17
10106d64:	0009883a 	mov	r4,zero
10106d68:	014ffc34 	movhi	r5,16368
10106d6c:	010e1fc0 	call	1010e1fc <__subdf3>
10106d70:	d9401217 	ldw	r5,72(sp)
10106d74:	100d883a 	mov	r6,r2
10106d78:	180f883a 	mov	r7,r3
10106d7c:	a809883a 	mov	r4,r21
10106d80:	010d9140 	call	1010d914 <__gedf2>
10106d84:	db001617 	ldw	r12,88(sp)
10106d88:	00840e16 	blt	zero,r2,10107dc4 <_dtoa_r+0x15e8>
10106d8c:	00800044 	movi	r2,1
10106d90:	13006b0e 	bge	r2,r12,10106f40 <_dtoa_r+0x764>
10106d94:	d9000717 	ldw	r4,28(sp)
10106d98:	dd800f15 	stw	r22,60(sp)
10106d9c:	dcc01015 	stw	r19,64(sp)
10106da0:	2319883a 	add	r12,r4,r12
10106da4:	dcc01217 	ldw	r19,72(sp)
10106da8:	602d883a 	mov	r22,r12
10106dac:	dc801215 	stw	r18,72(sp)
10106db0:	b825883a 	mov	r18,r23
10106db4:	00000906 	br	10106ddc <_dtoa_r+0x600>
10106db8:	010e1fc0 	call	1010e1fc <__subdf3>
10106dbc:	a80d883a 	mov	r6,r21
10106dc0:	980f883a 	mov	r7,r19
10106dc4:	1009883a 	mov	r4,r2
10106dc8:	180b883a 	mov	r5,r3
10106dcc:	010d9f00 	call	1010d9f0 <__ledf2>
10106dd0:	1003e816 	blt	r2,zero,10107d74 <_dtoa_r+0x1598>
10106dd4:	b825883a 	mov	r18,r23
10106dd8:	bd83e926 	beq	r23,r22,10107d80 <_dtoa_r+0x15a4>
10106ddc:	a809883a 	mov	r4,r21
10106de0:	980b883a 	mov	r5,r19
10106de4:	000d883a 	mov	r6,zero
10106de8:	01d00934 	movhi	r7,16420
10106dec:	010dae40 	call	1010dae4 <__muldf3>
10106df0:	000d883a 	mov	r6,zero
10106df4:	01d00934 	movhi	r7,16420
10106df8:	8009883a 	mov	r4,r16
10106dfc:	880b883a 	mov	r5,r17
10106e00:	102b883a 	mov	r21,r2
10106e04:	1827883a 	mov	r19,r3
10106e08:	010dae40 	call	1010dae4 <__muldf3>
10106e0c:	180b883a 	mov	r5,r3
10106e10:	1009883a 	mov	r4,r2
10106e14:	1821883a 	mov	r16,r3
10106e18:	1023883a 	mov	r17,r2
10106e1c:	010eaf80 	call	1010eaf8 <__fixdfsi>
10106e20:	1009883a 	mov	r4,r2
10106e24:	1029883a 	mov	r20,r2
10106e28:	010eb780 	call	1010eb78 <__floatsidf>
10106e2c:	8809883a 	mov	r4,r17
10106e30:	800b883a 	mov	r5,r16
10106e34:	100d883a 	mov	r6,r2
10106e38:	180f883a 	mov	r7,r3
10106e3c:	010e1fc0 	call	1010e1fc <__subdf3>
10106e40:	a5000c04 	addi	r20,r20,48
10106e44:	a80d883a 	mov	r6,r21
10106e48:	980f883a 	mov	r7,r19
10106e4c:	1009883a 	mov	r4,r2
10106e50:	180b883a 	mov	r5,r3
10106e54:	95000005 	stb	r20,0(r18)
10106e58:	1021883a 	mov	r16,r2
10106e5c:	1823883a 	mov	r17,r3
10106e60:	010d9f00 	call	1010d9f0 <__ledf2>
10106e64:	bdc00044 	addi	r23,r23,1
10106e68:	800d883a 	mov	r6,r16
10106e6c:	880f883a 	mov	r7,r17
10106e70:	0009883a 	mov	r4,zero
10106e74:	014ffc34 	movhi	r5,16368
10106e78:	103fcf0e 	bge	r2,zero,10106db8 <__alt_data_end+0xfffe6db8>
10106e7c:	d8c01317 	ldw	r3,76(sp)
10106e80:	d8c00515 	stw	r3,20(sp)
10106e84:	d9400917 	ldw	r5,36(sp)
10106e88:	e009883a 	mov	r4,fp
10106e8c:	010898c0 	call	1010898c <_Bfree>
10106e90:	d9000517 	ldw	r4,20(sp)
10106e94:	d9802317 	ldw	r6,140(sp)
10106e98:	d9c02517 	ldw	r7,148(sp)
10106e9c:	b8000005 	stb	zero,0(r23)
10106ea0:	20800044 	addi	r2,r4,1
10106ea4:	30800015 	stw	r2,0(r6)
10106ea8:	3802aa26 	beq	r7,zero,10107954 <_dtoa_r+0x1178>
10106eac:	3dc00015 	stw	r23,0(r7)
10106eb0:	d8800717 	ldw	r2,28(sp)
10106eb4:	003e7906 	br	1010689c <__alt_data_end+0xfffe689c>
10106eb8:	00800434 	movhi	r2,16
10106ebc:	10bfffc4 	addi	r2,r2,-1
10106ec0:	88a2703a 	and	r17,r17,r2
10106ec4:	883e851e 	bne	r17,zero,101068dc <__alt_data_end+0xfffe68dc>
10106ec8:	00840474 	movhi	r2,4113
10106ecc:	1085a004 	addi	r2,r2,5760
10106ed0:	003e8406 	br	101068e4 <__alt_data_end+0xfffe68e4>
10106ed4:	10c00204 	addi	r3,r2,8
10106ed8:	003e8706 	br	101068f8 <__alt_data_end+0xfffe68f8>
10106edc:	01400434 	movhi	r5,16
10106ee0:	297fffc4 	addi	r5,r5,-1
10106ee4:	994a703a 	and	r5,r19,r5
10106ee8:	9009883a 	mov	r4,r18
10106eec:	843f0044 	addi	r16,r16,-1023
10106ef0:	294ffc34 	orhi	r5,r5,16368
10106ef4:	dd800217 	ldw	r22,8(sp)
10106ef8:	d8001115 	stw	zero,68(sp)
10106efc:	003ea506 	br	10106994 <__alt_data_end+0xfffe6994>
10106f00:	00840474 	movhi	r2,4113
10106f04:	10859704 	addi	r2,r2,5724
10106f08:	003e6406 	br	1010689c <__alt_data_end+0xfffe689c>
10106f0c:	e0001115 	stw	zero,68(fp)
10106f10:	000b883a 	mov	r5,zero
10106f14:	e009883a 	mov	r4,fp
10106f18:	01088e40 	call	101088e4 <_Balloc>
10106f1c:	01bfffc4 	movi	r6,-1
10106f20:	01c00044 	movi	r7,1
10106f24:	d8800715 	stw	r2,28(sp)
10106f28:	d9800c15 	stw	r6,48(sp)
10106f2c:	e0801015 	stw	r2,64(fp)
10106f30:	d8000315 	stw	zero,12(sp)
10106f34:	d9c00b15 	stw	r7,44(sp)
10106f38:	d9800615 	stw	r6,24(sp)
10106f3c:	d8002215 	stw	zero,136(sp)
10106f40:	d8800117 	ldw	r2,4(sp)
10106f44:	10008916 	blt	r2,zero,1010716c <_dtoa_r+0x990>
10106f48:	d9000517 	ldw	r4,20(sp)
10106f4c:	00c00384 	movi	r3,14
10106f50:	19008616 	blt	r3,r4,1010716c <_dtoa_r+0x990>
10106f54:	200490fa 	slli	r2,r4,3
10106f58:	00c40474 	movhi	r3,4113
10106f5c:	d9802217 	ldw	r6,136(sp)
10106f60:	18c5be04 	addi	r3,r3,5880
10106f64:	1885883a 	add	r2,r3,r2
10106f68:	14000017 	ldw	r16,0(r2)
10106f6c:	14400117 	ldw	r17,4(r2)
10106f70:	30016316 	blt	r6,zero,10107500 <_dtoa_r+0xd24>
10106f74:	800d883a 	mov	r6,r16
10106f78:	880f883a 	mov	r7,r17
10106f7c:	9009883a 	mov	r4,r18
10106f80:	980b883a 	mov	r5,r19
10106f84:	010cfa40 	call	1010cfa4 <__divdf3>
10106f88:	180b883a 	mov	r5,r3
10106f8c:	1009883a 	mov	r4,r2
10106f90:	010eaf80 	call	1010eaf8 <__fixdfsi>
10106f94:	1009883a 	mov	r4,r2
10106f98:	102b883a 	mov	r21,r2
10106f9c:	010eb780 	call	1010eb78 <__floatsidf>
10106fa0:	800d883a 	mov	r6,r16
10106fa4:	880f883a 	mov	r7,r17
10106fa8:	1009883a 	mov	r4,r2
10106fac:	180b883a 	mov	r5,r3
10106fb0:	010dae40 	call	1010dae4 <__muldf3>
10106fb4:	100d883a 	mov	r6,r2
10106fb8:	180f883a 	mov	r7,r3
10106fbc:	9009883a 	mov	r4,r18
10106fc0:	980b883a 	mov	r5,r19
10106fc4:	010e1fc0 	call	1010e1fc <__subdf3>
10106fc8:	d9c00717 	ldw	r7,28(sp)
10106fcc:	1009883a 	mov	r4,r2
10106fd0:	a8800c04 	addi	r2,r21,48
10106fd4:	38800005 	stb	r2,0(r7)
10106fd8:	3dc00044 	addi	r23,r7,1
10106fdc:	d9c00617 	ldw	r7,24(sp)
10106fe0:	01800044 	movi	r6,1
10106fe4:	180b883a 	mov	r5,r3
10106fe8:	2005883a 	mov	r2,r4
10106fec:	39803826 	beq	r7,r6,101070d0 <_dtoa_r+0x8f4>
10106ff0:	000d883a 	mov	r6,zero
10106ff4:	01d00934 	movhi	r7,16420
10106ff8:	010dae40 	call	1010dae4 <__muldf3>
10106ffc:	000d883a 	mov	r6,zero
10107000:	000f883a 	mov	r7,zero
10107004:	1009883a 	mov	r4,r2
10107008:	180b883a 	mov	r5,r3
1010700c:	1025883a 	mov	r18,r2
10107010:	1827883a 	mov	r19,r3
10107014:	010d88c0 	call	1010d88c <__eqdf2>
10107018:	103f9a26 	beq	r2,zero,10106e84 <__alt_data_end+0xfffe6e84>
1010701c:	d9c00617 	ldw	r7,24(sp)
10107020:	d8c00717 	ldw	r3,28(sp)
10107024:	b829883a 	mov	r20,r23
10107028:	38bfffc4 	addi	r2,r7,-1
1010702c:	18ad883a 	add	r22,r3,r2
10107030:	00000a06 	br	1010705c <_dtoa_r+0x880>
10107034:	010dae40 	call	1010dae4 <__muldf3>
10107038:	000d883a 	mov	r6,zero
1010703c:	000f883a 	mov	r7,zero
10107040:	1009883a 	mov	r4,r2
10107044:	180b883a 	mov	r5,r3
10107048:	1025883a 	mov	r18,r2
1010704c:	1827883a 	mov	r19,r3
10107050:	b829883a 	mov	r20,r23
10107054:	010d88c0 	call	1010d88c <__eqdf2>
10107058:	103f8a26 	beq	r2,zero,10106e84 <__alt_data_end+0xfffe6e84>
1010705c:	800d883a 	mov	r6,r16
10107060:	880f883a 	mov	r7,r17
10107064:	9009883a 	mov	r4,r18
10107068:	980b883a 	mov	r5,r19
1010706c:	010cfa40 	call	1010cfa4 <__divdf3>
10107070:	180b883a 	mov	r5,r3
10107074:	1009883a 	mov	r4,r2
10107078:	010eaf80 	call	1010eaf8 <__fixdfsi>
1010707c:	1009883a 	mov	r4,r2
10107080:	102b883a 	mov	r21,r2
10107084:	010eb780 	call	1010eb78 <__floatsidf>
10107088:	800d883a 	mov	r6,r16
1010708c:	880f883a 	mov	r7,r17
10107090:	1009883a 	mov	r4,r2
10107094:	180b883a 	mov	r5,r3
10107098:	010dae40 	call	1010dae4 <__muldf3>
1010709c:	100d883a 	mov	r6,r2
101070a0:	180f883a 	mov	r7,r3
101070a4:	9009883a 	mov	r4,r18
101070a8:	980b883a 	mov	r5,r19
101070ac:	010e1fc0 	call	1010e1fc <__subdf3>
101070b0:	aa000c04 	addi	r8,r21,48
101070b4:	a2000005 	stb	r8,0(r20)
101070b8:	000d883a 	mov	r6,zero
101070bc:	01d00934 	movhi	r7,16420
101070c0:	1009883a 	mov	r4,r2
101070c4:	180b883a 	mov	r5,r3
101070c8:	a5c00044 	addi	r23,r20,1
101070cc:	b53fd91e 	bne	r22,r20,10107034 <__alt_data_end+0xfffe7034>
101070d0:	100d883a 	mov	r6,r2
101070d4:	180f883a 	mov	r7,r3
101070d8:	1009883a 	mov	r4,r2
101070dc:	180b883a 	mov	r5,r3
101070e0:	010c6f80 	call	1010c6f8 <__adddf3>
101070e4:	100d883a 	mov	r6,r2
101070e8:	180f883a 	mov	r7,r3
101070ec:	8009883a 	mov	r4,r16
101070f0:	880b883a 	mov	r5,r17
101070f4:	1027883a 	mov	r19,r2
101070f8:	1825883a 	mov	r18,r3
101070fc:	010d9f00 	call	1010d9f0 <__ledf2>
10107100:	10000816 	blt	r2,zero,10107124 <_dtoa_r+0x948>
10107104:	980d883a 	mov	r6,r19
10107108:	900f883a 	mov	r7,r18
1010710c:	8009883a 	mov	r4,r16
10107110:	880b883a 	mov	r5,r17
10107114:	010d88c0 	call	1010d88c <__eqdf2>
10107118:	103f5a1e 	bne	r2,zero,10106e84 <__alt_data_end+0xfffe6e84>
1010711c:	ad40004c 	andi	r21,r21,1
10107120:	a83f5826 	beq	r21,zero,10106e84 <__alt_data_end+0xfffe6e84>
10107124:	bd3fffc3 	ldbu	r20,-1(r23)
10107128:	b8bfffc4 	addi	r2,r23,-1
1010712c:	1007883a 	mov	r3,r2
10107130:	01400e44 	movi	r5,57
10107134:	d9800717 	ldw	r6,28(sp)
10107138:	00000506 	br	10107150 <_dtoa_r+0x974>
1010713c:	18ffffc4 	addi	r3,r3,-1
10107140:	11824726 	beq	r2,r6,10107a60 <_dtoa_r+0x1284>
10107144:	1d000003 	ldbu	r20,0(r3)
10107148:	102f883a 	mov	r23,r2
1010714c:	10bfffc4 	addi	r2,r2,-1
10107150:	a1003fcc 	andi	r4,r20,255
10107154:	2100201c 	xori	r4,r4,128
10107158:	213fe004 	addi	r4,r4,-128
1010715c:	217ff726 	beq	r4,r5,1010713c <__alt_data_end+0xfffe713c>
10107160:	a2000044 	addi	r8,r20,1
10107164:	12000005 	stb	r8,0(r2)
10107168:	003f4606 	br	10106e84 <__alt_data_end+0xfffe6e84>
1010716c:	d9000b17 	ldw	r4,44(sp)
10107170:	2000c826 	beq	r4,zero,10107494 <_dtoa_r+0xcb8>
10107174:	d9800317 	ldw	r6,12(sp)
10107178:	00c00044 	movi	r3,1
1010717c:	1980f90e 	bge	r3,r6,10107564 <_dtoa_r+0xd88>
10107180:	d8800617 	ldw	r2,24(sp)
10107184:	d8c00a17 	ldw	r3,40(sp)
10107188:	157fffc4 	addi	r21,r2,-1
1010718c:	1d41f316 	blt	r3,r21,1010795c <_dtoa_r+0x1180>
10107190:	1d6bc83a 	sub	r21,r3,r21
10107194:	d9c00617 	ldw	r7,24(sp)
10107198:	3802aa16 	blt	r7,zero,10107c44 <_dtoa_r+0x1468>
1010719c:	dd000817 	ldw	r20,32(sp)
101071a0:	d8800617 	ldw	r2,24(sp)
101071a4:	d8c00817 	ldw	r3,32(sp)
101071a8:	01400044 	movi	r5,1
101071ac:	e009883a 	mov	r4,fp
101071b0:	1887883a 	add	r3,r3,r2
101071b4:	d8c00815 	stw	r3,32(sp)
101071b8:	b0ad883a 	add	r22,r22,r2
101071bc:	0108cf00 	call	10108cf0 <__i2b>
101071c0:	1023883a 	mov	r17,r2
101071c4:	a0000826 	beq	r20,zero,101071e8 <_dtoa_r+0xa0c>
101071c8:	0580070e 	bge	zero,r22,101071e8 <_dtoa_r+0xa0c>
101071cc:	a005883a 	mov	r2,r20
101071d0:	b500b916 	blt	r22,r20,101074b8 <_dtoa_r+0xcdc>
101071d4:	d9000817 	ldw	r4,32(sp)
101071d8:	a0a9c83a 	sub	r20,r20,r2
101071dc:	b0adc83a 	sub	r22,r22,r2
101071e0:	2089c83a 	sub	r4,r4,r2
101071e4:	d9000815 	stw	r4,32(sp)
101071e8:	d9800a17 	ldw	r6,40(sp)
101071ec:	0181810e 	bge	zero,r6,101077f4 <_dtoa_r+0x1018>
101071f0:	d9c00b17 	ldw	r7,44(sp)
101071f4:	3800b326 	beq	r7,zero,101074c4 <_dtoa_r+0xce8>
101071f8:	a800b226 	beq	r21,zero,101074c4 <_dtoa_r+0xce8>
101071fc:	880b883a 	mov	r5,r17
10107200:	a80d883a 	mov	r6,r21
10107204:	e009883a 	mov	r4,fp
10107208:	0108f240 	call	10108f24 <__pow5mult>
1010720c:	d9800917 	ldw	r6,36(sp)
10107210:	100b883a 	mov	r5,r2
10107214:	e009883a 	mov	r4,fp
10107218:	1023883a 	mov	r17,r2
1010721c:	0108d2c0 	call	10108d2c <__multiply>
10107220:	1021883a 	mov	r16,r2
10107224:	d8800a17 	ldw	r2,40(sp)
10107228:	d9400917 	ldw	r5,36(sp)
1010722c:	e009883a 	mov	r4,fp
10107230:	1545c83a 	sub	r2,r2,r21
10107234:	d8800a15 	stw	r2,40(sp)
10107238:	010898c0 	call	1010898c <_Bfree>
1010723c:	d8c00a17 	ldw	r3,40(sp)
10107240:	18009f1e 	bne	r3,zero,101074c0 <_dtoa_r+0xce4>
10107244:	05c00044 	movi	r23,1
10107248:	e009883a 	mov	r4,fp
1010724c:	b80b883a 	mov	r5,r23
10107250:	0108cf00 	call	10108cf0 <__i2b>
10107254:	d9000d17 	ldw	r4,52(sp)
10107258:	102b883a 	mov	r21,r2
1010725c:	2000ce26 	beq	r4,zero,10107598 <_dtoa_r+0xdbc>
10107260:	200d883a 	mov	r6,r4
10107264:	100b883a 	mov	r5,r2
10107268:	e009883a 	mov	r4,fp
1010726c:	0108f240 	call	10108f24 <__pow5mult>
10107270:	d9800317 	ldw	r6,12(sp)
10107274:	102b883a 	mov	r21,r2
10107278:	b981810e 	bge	r23,r6,10107880 <_dtoa_r+0x10a4>
1010727c:	0027883a 	mov	r19,zero
10107280:	a8800417 	ldw	r2,16(r21)
10107284:	05c00804 	movi	r23,32
10107288:	10800104 	addi	r2,r2,4
1010728c:	1085883a 	add	r2,r2,r2
10107290:	1085883a 	add	r2,r2,r2
10107294:	a885883a 	add	r2,r21,r2
10107298:	11000017 	ldw	r4,0(r2)
1010729c:	0108bd80 	call	10108bd8 <__hi0bits>
101072a0:	b885c83a 	sub	r2,r23,r2
101072a4:	1585883a 	add	r2,r2,r22
101072a8:	108007cc 	andi	r2,r2,31
101072ac:	1000b326 	beq	r2,zero,1010757c <_dtoa_r+0xda0>
101072b0:	00c00804 	movi	r3,32
101072b4:	1887c83a 	sub	r3,r3,r2
101072b8:	01000104 	movi	r4,4
101072bc:	20c2cd0e 	bge	r4,r3,10107df4 <_dtoa_r+0x1618>
101072c0:	00c00704 	movi	r3,28
101072c4:	1885c83a 	sub	r2,r3,r2
101072c8:	d8c00817 	ldw	r3,32(sp)
101072cc:	a0a9883a 	add	r20,r20,r2
101072d0:	b0ad883a 	add	r22,r22,r2
101072d4:	1887883a 	add	r3,r3,r2
101072d8:	d8c00815 	stw	r3,32(sp)
101072dc:	d9800817 	ldw	r6,32(sp)
101072e0:	0180040e 	bge	zero,r6,101072f4 <_dtoa_r+0xb18>
101072e4:	800b883a 	mov	r5,r16
101072e8:	e009883a 	mov	r4,fp
101072ec:	01090640 	call	10109064 <__lshift>
101072f0:	1021883a 	mov	r16,r2
101072f4:	0580050e 	bge	zero,r22,1010730c <_dtoa_r+0xb30>
101072f8:	a80b883a 	mov	r5,r21
101072fc:	b00d883a 	mov	r6,r22
10107300:	e009883a 	mov	r4,fp
10107304:	01090640 	call	10109064 <__lshift>
10107308:	102b883a 	mov	r21,r2
1010730c:	d9c00e17 	ldw	r7,56(sp)
10107310:	3801211e 	bne	r7,zero,10107798 <_dtoa_r+0xfbc>
10107314:	d9800617 	ldw	r6,24(sp)
10107318:	0181380e 	bge	zero,r6,101077fc <_dtoa_r+0x1020>
1010731c:	d8c00b17 	ldw	r3,44(sp)
10107320:	1800ab1e 	bne	r3,zero,101075d0 <_dtoa_r+0xdf4>
10107324:	dc800717 	ldw	r18,28(sp)
10107328:	dcc00617 	ldw	r19,24(sp)
1010732c:	9029883a 	mov	r20,r18
10107330:	00000206 	br	1010733c <_dtoa_r+0xb60>
10107334:	01089b40 	call	101089b4 <__multadd>
10107338:	1021883a 	mov	r16,r2
1010733c:	a80b883a 	mov	r5,r21
10107340:	8009883a 	mov	r4,r16
10107344:	01065dc0 	call	101065dc <quorem>
10107348:	10800c04 	addi	r2,r2,48
1010734c:	90800005 	stb	r2,0(r18)
10107350:	94800044 	addi	r18,r18,1
10107354:	9507c83a 	sub	r3,r18,r20
10107358:	000f883a 	mov	r7,zero
1010735c:	01800284 	movi	r6,10
10107360:	800b883a 	mov	r5,r16
10107364:	e009883a 	mov	r4,fp
10107368:	1cfff216 	blt	r3,r19,10107334 <__alt_data_end+0xfffe7334>
1010736c:	1011883a 	mov	r8,r2
10107370:	d8800617 	ldw	r2,24(sp)
10107374:	0082370e 	bge	zero,r2,10107c54 <_dtoa_r+0x1478>
10107378:	d9000717 	ldw	r4,28(sp)
1010737c:	0025883a 	mov	r18,zero
10107380:	20af883a 	add	r23,r4,r2
10107384:	01800044 	movi	r6,1
10107388:	800b883a 	mov	r5,r16
1010738c:	e009883a 	mov	r4,fp
10107390:	da001715 	stw	r8,92(sp)
10107394:	01090640 	call	10109064 <__lshift>
10107398:	a80b883a 	mov	r5,r21
1010739c:	1009883a 	mov	r4,r2
101073a0:	d8800915 	stw	r2,36(sp)
101073a4:	01091ac0 	call	101091ac <__mcmp>
101073a8:	da001717 	ldw	r8,92(sp)
101073ac:	0081800e 	bge	zero,r2,101079b0 <_dtoa_r+0x11d4>
101073b0:	b93fffc3 	ldbu	r4,-1(r23)
101073b4:	b8bfffc4 	addi	r2,r23,-1
101073b8:	1007883a 	mov	r3,r2
101073bc:	01800e44 	movi	r6,57
101073c0:	d9c00717 	ldw	r7,28(sp)
101073c4:	00000506 	br	101073dc <_dtoa_r+0xc00>
101073c8:	18ffffc4 	addi	r3,r3,-1
101073cc:	11c12326 	beq	r2,r7,1010785c <_dtoa_r+0x1080>
101073d0:	19000003 	ldbu	r4,0(r3)
101073d4:	102f883a 	mov	r23,r2
101073d8:	10bfffc4 	addi	r2,r2,-1
101073dc:	21403fcc 	andi	r5,r4,255
101073e0:	2940201c 	xori	r5,r5,128
101073e4:	297fe004 	addi	r5,r5,-128
101073e8:	29bff726 	beq	r5,r6,101073c8 <__alt_data_end+0xfffe73c8>
101073ec:	21000044 	addi	r4,r4,1
101073f0:	11000005 	stb	r4,0(r2)
101073f4:	a80b883a 	mov	r5,r21
101073f8:	e009883a 	mov	r4,fp
101073fc:	010898c0 	call	1010898c <_Bfree>
10107400:	883ea026 	beq	r17,zero,10106e84 <__alt_data_end+0xfffe6e84>
10107404:	90000426 	beq	r18,zero,10107418 <_dtoa_r+0xc3c>
10107408:	94400326 	beq	r18,r17,10107418 <_dtoa_r+0xc3c>
1010740c:	900b883a 	mov	r5,r18
10107410:	e009883a 	mov	r4,fp
10107414:	010898c0 	call	1010898c <_Bfree>
10107418:	880b883a 	mov	r5,r17
1010741c:	e009883a 	mov	r4,fp
10107420:	010898c0 	call	1010898c <_Bfree>
10107424:	003e9706 	br	10106e84 <__alt_data_end+0xfffe6e84>
10107428:	01800044 	movi	r6,1
1010742c:	d9800e15 	stw	r6,56(sp)
10107430:	003d9606 	br	10106a8c <__alt_data_end+0xfffe6a8c>
10107434:	d8800817 	ldw	r2,32(sp)
10107438:	d8c00517 	ldw	r3,20(sp)
1010743c:	d8000d15 	stw	zero,52(sp)
10107440:	10c5c83a 	sub	r2,r2,r3
10107444:	00c9c83a 	sub	r4,zero,r3
10107448:	d8800815 	stw	r2,32(sp)
1010744c:	d9000a15 	stw	r4,40(sp)
10107450:	003d9706 	br	10106ab0 <__alt_data_end+0xfffe6ab0>
10107454:	05adc83a 	sub	r22,zero,r22
10107458:	dd800815 	stw	r22,32(sp)
1010745c:	002d883a 	mov	r22,zero
10107460:	003d8e06 	br	10106a9c <__alt_data_end+0xfffe6a9c>
10107464:	d9000517 	ldw	r4,20(sp)
10107468:	010eb780 	call	1010eb78 <__floatsidf>
1010746c:	100d883a 	mov	r6,r2
10107470:	180f883a 	mov	r7,r3
10107474:	a009883a 	mov	r4,r20
10107478:	880b883a 	mov	r5,r17
1010747c:	010d88c0 	call	1010d88c <__eqdf2>
10107480:	103d7126 	beq	r2,zero,10106a48 <__alt_data_end+0xfffe6a48>
10107484:	d9c00517 	ldw	r7,20(sp)
10107488:	39ffffc4 	addi	r7,r7,-1
1010748c:	d9c00515 	stw	r7,20(sp)
10107490:	003d6d06 	br	10106a48 <__alt_data_end+0xfffe6a48>
10107494:	dd400a17 	ldw	r21,40(sp)
10107498:	dd000817 	ldw	r20,32(sp)
1010749c:	0023883a 	mov	r17,zero
101074a0:	003f4806 	br	101071c4 <__alt_data_end+0xfffe71c4>
101074a4:	10e3c83a 	sub	r17,r2,r3
101074a8:	9448983a 	sll	r4,r18,r17
101074ac:	003d3206 	br	10106978 <__alt_data_end+0xfffe6978>
101074b0:	d8000e15 	stw	zero,56(sp)
101074b4:	003d7506 	br	10106a8c <__alt_data_end+0xfffe6a8c>
101074b8:	b005883a 	mov	r2,r22
101074bc:	003f4506 	br	101071d4 <__alt_data_end+0xfffe71d4>
101074c0:	dc000915 	stw	r16,36(sp)
101074c4:	d9800a17 	ldw	r6,40(sp)
101074c8:	d9400917 	ldw	r5,36(sp)
101074cc:	e009883a 	mov	r4,fp
101074d0:	0108f240 	call	10108f24 <__pow5mult>
101074d4:	1021883a 	mov	r16,r2
101074d8:	003f5a06 	br	10107244 <__alt_data_end+0xfffe7244>
101074dc:	01c00044 	movi	r7,1
101074e0:	d9c00b15 	stw	r7,44(sp)
101074e4:	d8802217 	ldw	r2,136(sp)
101074e8:	0081280e 	bge	zero,r2,1010798c <_dtoa_r+0x11b0>
101074ec:	100d883a 	mov	r6,r2
101074f0:	1021883a 	mov	r16,r2
101074f4:	d8800c15 	stw	r2,48(sp)
101074f8:	d8800615 	stw	r2,24(sp)
101074fc:	003d8806 	br	10106b20 <__alt_data_end+0xfffe6b20>
10107500:	d8800617 	ldw	r2,24(sp)
10107504:	00be9b16 	blt	zero,r2,10106f74 <__alt_data_end+0xfffe6f74>
10107508:	10010f1e 	bne	r2,zero,10107948 <_dtoa_r+0x116c>
1010750c:	880b883a 	mov	r5,r17
10107510:	000d883a 	mov	r6,zero
10107514:	01d00534 	movhi	r7,16404
10107518:	8009883a 	mov	r4,r16
1010751c:	010dae40 	call	1010dae4 <__muldf3>
10107520:	900d883a 	mov	r6,r18
10107524:	980f883a 	mov	r7,r19
10107528:	1009883a 	mov	r4,r2
1010752c:	180b883a 	mov	r5,r3
10107530:	010d9140 	call	1010d914 <__gedf2>
10107534:	002b883a 	mov	r21,zero
10107538:	0023883a 	mov	r17,zero
1010753c:	1000bf16 	blt	r2,zero,1010783c <_dtoa_r+0x1060>
10107540:	d9802217 	ldw	r6,136(sp)
10107544:	ddc00717 	ldw	r23,28(sp)
10107548:	018c303a 	nor	r6,zero,r6
1010754c:	d9800515 	stw	r6,20(sp)
10107550:	a80b883a 	mov	r5,r21
10107554:	e009883a 	mov	r4,fp
10107558:	010898c0 	call	1010898c <_Bfree>
1010755c:	883e4926 	beq	r17,zero,10106e84 <__alt_data_end+0xfffe6e84>
10107560:	003fad06 	br	10107418 <__alt_data_end+0xfffe7418>
10107564:	d9c01117 	ldw	r7,68(sp)
10107568:	3801bc26 	beq	r7,zero,10107c5c <_dtoa_r+0x1480>
1010756c:	10810cc4 	addi	r2,r2,1075
10107570:	dd400a17 	ldw	r21,40(sp)
10107574:	dd000817 	ldw	r20,32(sp)
10107578:	003f0a06 	br	101071a4 <__alt_data_end+0xfffe71a4>
1010757c:	00800704 	movi	r2,28
10107580:	d9000817 	ldw	r4,32(sp)
10107584:	a0a9883a 	add	r20,r20,r2
10107588:	b0ad883a 	add	r22,r22,r2
1010758c:	2089883a 	add	r4,r4,r2
10107590:	d9000815 	stw	r4,32(sp)
10107594:	003f5106 	br	101072dc <__alt_data_end+0xfffe72dc>
10107598:	d8c00317 	ldw	r3,12(sp)
1010759c:	b8c1fc0e 	bge	r23,r3,10107d90 <_dtoa_r+0x15b4>
101075a0:	0027883a 	mov	r19,zero
101075a4:	b805883a 	mov	r2,r23
101075a8:	003f3e06 	br	101072a4 <__alt_data_end+0xfffe72a4>
101075ac:	880b883a 	mov	r5,r17
101075b0:	e009883a 	mov	r4,fp
101075b4:	000f883a 	mov	r7,zero
101075b8:	01800284 	movi	r6,10
101075bc:	01089b40 	call	101089b4 <__multadd>
101075c0:	d9000c17 	ldw	r4,48(sp)
101075c4:	1023883a 	mov	r17,r2
101075c8:	0102040e 	bge	zero,r4,10107ddc <_dtoa_r+0x1600>
101075cc:	d9000615 	stw	r4,24(sp)
101075d0:	0500050e 	bge	zero,r20,101075e8 <_dtoa_r+0xe0c>
101075d4:	880b883a 	mov	r5,r17
101075d8:	a00d883a 	mov	r6,r20
101075dc:	e009883a 	mov	r4,fp
101075e0:	01090640 	call	10109064 <__lshift>
101075e4:	1023883a 	mov	r17,r2
101075e8:	9801241e 	bne	r19,zero,10107a7c <_dtoa_r+0x12a0>
101075ec:	8829883a 	mov	r20,r17
101075f0:	d9000617 	ldw	r4,24(sp)
101075f4:	dcc00717 	ldw	r19,28(sp)
101075f8:	9480004c 	andi	r18,r18,1
101075fc:	20bfffc4 	addi	r2,r4,-1
10107600:	9885883a 	add	r2,r19,r2
10107604:	d8800415 	stw	r2,16(sp)
10107608:	dc800615 	stw	r18,24(sp)
1010760c:	a80b883a 	mov	r5,r21
10107610:	8009883a 	mov	r4,r16
10107614:	01065dc0 	call	101065dc <quorem>
10107618:	880b883a 	mov	r5,r17
1010761c:	8009883a 	mov	r4,r16
10107620:	102f883a 	mov	r23,r2
10107624:	01091ac0 	call	101091ac <__mcmp>
10107628:	a80b883a 	mov	r5,r21
1010762c:	a00d883a 	mov	r6,r20
10107630:	e009883a 	mov	r4,fp
10107634:	102d883a 	mov	r22,r2
10107638:	010920c0 	call	1010920c <__mdiff>
1010763c:	1007883a 	mov	r3,r2
10107640:	10800317 	ldw	r2,12(r2)
10107644:	bc800c04 	addi	r18,r23,48
10107648:	180b883a 	mov	r5,r3
1010764c:	10004e1e 	bne	r2,zero,10107788 <_dtoa_r+0xfac>
10107650:	8009883a 	mov	r4,r16
10107654:	d8c01615 	stw	r3,88(sp)
10107658:	01091ac0 	call	101091ac <__mcmp>
1010765c:	d8c01617 	ldw	r3,88(sp)
10107660:	e009883a 	mov	r4,fp
10107664:	d8801615 	stw	r2,88(sp)
10107668:	180b883a 	mov	r5,r3
1010766c:	010898c0 	call	1010898c <_Bfree>
10107670:	d8801617 	ldw	r2,88(sp)
10107674:	1000041e 	bne	r2,zero,10107688 <_dtoa_r+0xeac>
10107678:	d9800317 	ldw	r6,12(sp)
1010767c:	3000021e 	bne	r6,zero,10107688 <_dtoa_r+0xeac>
10107680:	d8c00617 	ldw	r3,24(sp)
10107684:	18003726 	beq	r3,zero,10107764 <_dtoa_r+0xf88>
10107688:	b0002016 	blt	r22,zero,1010770c <_dtoa_r+0xf30>
1010768c:	b000041e 	bne	r22,zero,101076a0 <_dtoa_r+0xec4>
10107690:	d9000317 	ldw	r4,12(sp)
10107694:	2000021e 	bne	r4,zero,101076a0 <_dtoa_r+0xec4>
10107698:	d8c00617 	ldw	r3,24(sp)
1010769c:	18001b26 	beq	r3,zero,1010770c <_dtoa_r+0xf30>
101076a0:	00810716 	blt	zero,r2,10107ac0 <_dtoa_r+0x12e4>
101076a4:	d8c00417 	ldw	r3,16(sp)
101076a8:	9d800044 	addi	r22,r19,1
101076ac:	9c800005 	stb	r18,0(r19)
101076b0:	b02f883a 	mov	r23,r22
101076b4:	98c10626 	beq	r19,r3,10107ad0 <_dtoa_r+0x12f4>
101076b8:	800b883a 	mov	r5,r16
101076bc:	000f883a 	mov	r7,zero
101076c0:	01800284 	movi	r6,10
101076c4:	e009883a 	mov	r4,fp
101076c8:	01089b40 	call	101089b4 <__multadd>
101076cc:	1021883a 	mov	r16,r2
101076d0:	000f883a 	mov	r7,zero
101076d4:	01800284 	movi	r6,10
101076d8:	880b883a 	mov	r5,r17
101076dc:	e009883a 	mov	r4,fp
101076e0:	8d002526 	beq	r17,r20,10107778 <_dtoa_r+0xf9c>
101076e4:	01089b40 	call	101089b4 <__multadd>
101076e8:	a00b883a 	mov	r5,r20
101076ec:	000f883a 	mov	r7,zero
101076f0:	01800284 	movi	r6,10
101076f4:	e009883a 	mov	r4,fp
101076f8:	1023883a 	mov	r17,r2
101076fc:	01089b40 	call	101089b4 <__multadd>
10107700:	1029883a 	mov	r20,r2
10107704:	b027883a 	mov	r19,r22
10107708:	003fc006 	br	1010760c <__alt_data_end+0xfffe760c>
1010770c:	9011883a 	mov	r8,r18
10107710:	00800e0e 	bge	zero,r2,1010774c <_dtoa_r+0xf70>
10107714:	800b883a 	mov	r5,r16
10107718:	01800044 	movi	r6,1
1010771c:	e009883a 	mov	r4,fp
10107720:	da001715 	stw	r8,92(sp)
10107724:	01090640 	call	10109064 <__lshift>
10107728:	a80b883a 	mov	r5,r21
1010772c:	1009883a 	mov	r4,r2
10107730:	1021883a 	mov	r16,r2
10107734:	01091ac0 	call	101091ac <__mcmp>
10107738:	da001717 	ldw	r8,92(sp)
1010773c:	0081960e 	bge	zero,r2,10107d98 <_dtoa_r+0x15bc>
10107740:	00800e44 	movi	r2,57
10107744:	40817026 	beq	r8,r2,10107d08 <_dtoa_r+0x152c>
10107748:	ba000c44 	addi	r8,r23,49
1010774c:	8825883a 	mov	r18,r17
10107750:	9dc00044 	addi	r23,r19,1
10107754:	9a000005 	stb	r8,0(r19)
10107758:	a023883a 	mov	r17,r20
1010775c:	dc000915 	stw	r16,36(sp)
10107760:	003f2406 	br	101073f4 <__alt_data_end+0xfffe73f4>
10107764:	00800e44 	movi	r2,57
10107768:	9011883a 	mov	r8,r18
1010776c:	90816626 	beq	r18,r2,10107d08 <_dtoa_r+0x152c>
10107770:	05bff516 	blt	zero,r22,10107748 <__alt_data_end+0xfffe7748>
10107774:	003ff506 	br	1010774c <__alt_data_end+0xfffe774c>
10107778:	01089b40 	call	101089b4 <__multadd>
1010777c:	1023883a 	mov	r17,r2
10107780:	1029883a 	mov	r20,r2
10107784:	003fdf06 	br	10107704 <__alt_data_end+0xfffe7704>
10107788:	e009883a 	mov	r4,fp
1010778c:	010898c0 	call	1010898c <_Bfree>
10107790:	00800044 	movi	r2,1
10107794:	003fbc06 	br	10107688 <__alt_data_end+0xfffe7688>
10107798:	a80b883a 	mov	r5,r21
1010779c:	8009883a 	mov	r4,r16
101077a0:	01091ac0 	call	101091ac <__mcmp>
101077a4:	103edb0e 	bge	r2,zero,10107314 <__alt_data_end+0xfffe7314>
101077a8:	800b883a 	mov	r5,r16
101077ac:	000f883a 	mov	r7,zero
101077b0:	01800284 	movi	r6,10
101077b4:	e009883a 	mov	r4,fp
101077b8:	01089b40 	call	101089b4 <__multadd>
101077bc:	1021883a 	mov	r16,r2
101077c0:	d8800517 	ldw	r2,20(sp)
101077c4:	d8c00b17 	ldw	r3,44(sp)
101077c8:	10bfffc4 	addi	r2,r2,-1
101077cc:	d8800515 	stw	r2,20(sp)
101077d0:	183f761e 	bne	r3,zero,101075ac <__alt_data_end+0xfffe75ac>
101077d4:	d9000c17 	ldw	r4,48(sp)
101077d8:	0101730e 	bge	zero,r4,10107da8 <_dtoa_r+0x15cc>
101077dc:	d9000615 	stw	r4,24(sp)
101077e0:	003ed006 	br	10107324 <__alt_data_end+0xfffe7324>
101077e4:	00800084 	movi	r2,2
101077e8:	3081861e 	bne	r6,r2,10107e04 <_dtoa_r+0x1628>
101077ec:	d8000b15 	stw	zero,44(sp)
101077f0:	003f3c06 	br	101074e4 <__alt_data_end+0xfffe74e4>
101077f4:	dc000917 	ldw	r16,36(sp)
101077f8:	003e9206 	br	10107244 <__alt_data_end+0xfffe7244>
101077fc:	d9c00317 	ldw	r7,12(sp)
10107800:	00800084 	movi	r2,2
10107804:	11fec50e 	bge	r2,r7,1010731c <__alt_data_end+0xfffe731c>
10107808:	d9000617 	ldw	r4,24(sp)
1010780c:	20013c1e 	bne	r4,zero,10107d00 <_dtoa_r+0x1524>
10107810:	a80b883a 	mov	r5,r21
10107814:	000f883a 	mov	r7,zero
10107818:	01800144 	movi	r6,5
1010781c:	e009883a 	mov	r4,fp
10107820:	01089b40 	call	101089b4 <__multadd>
10107824:	100b883a 	mov	r5,r2
10107828:	8009883a 	mov	r4,r16
1010782c:	102b883a 	mov	r21,r2
10107830:	01091ac0 	call	101091ac <__mcmp>
10107834:	dc000915 	stw	r16,36(sp)
10107838:	00bf410e 	bge	zero,r2,10107540 <__alt_data_end+0xfffe7540>
1010783c:	d9c00717 	ldw	r7,28(sp)
10107840:	00800c44 	movi	r2,49
10107844:	38800005 	stb	r2,0(r7)
10107848:	d8800517 	ldw	r2,20(sp)
1010784c:	3dc00044 	addi	r23,r7,1
10107850:	10800044 	addi	r2,r2,1
10107854:	d8800515 	stw	r2,20(sp)
10107858:	003f3d06 	br	10107550 <__alt_data_end+0xfffe7550>
1010785c:	d9800517 	ldw	r6,20(sp)
10107860:	d9c00717 	ldw	r7,28(sp)
10107864:	00800c44 	movi	r2,49
10107868:	31800044 	addi	r6,r6,1
1010786c:	d9800515 	stw	r6,20(sp)
10107870:	38800005 	stb	r2,0(r7)
10107874:	003edf06 	br	101073f4 <__alt_data_end+0xfffe73f4>
10107878:	d8000b15 	stw	zero,44(sp)
1010787c:	003c9f06 	br	10106afc <__alt_data_end+0xfffe6afc>
10107880:	903e7e1e 	bne	r18,zero,1010727c <__alt_data_end+0xfffe727c>
10107884:	00800434 	movhi	r2,16
10107888:	10bfffc4 	addi	r2,r2,-1
1010788c:	9884703a 	and	r2,r19,r2
10107890:	1000ea1e 	bne	r2,zero,10107c3c <_dtoa_r+0x1460>
10107894:	9cdffc2c 	andhi	r19,r19,32752
10107898:	9800e826 	beq	r19,zero,10107c3c <_dtoa_r+0x1460>
1010789c:	d9c00817 	ldw	r7,32(sp)
101078a0:	b5800044 	addi	r22,r22,1
101078a4:	04c00044 	movi	r19,1
101078a8:	39c00044 	addi	r7,r7,1
101078ac:	d9c00815 	stw	r7,32(sp)
101078b0:	d8800d17 	ldw	r2,52(sp)
101078b4:	103e721e 	bne	r2,zero,10107280 <__alt_data_end+0xfffe7280>
101078b8:	00800044 	movi	r2,1
101078bc:	003e7906 	br	101072a4 <__alt_data_end+0xfffe72a4>
101078c0:	8009883a 	mov	r4,r16
101078c4:	010eb780 	call	1010eb78 <__floatsidf>
101078c8:	d9800f17 	ldw	r6,60(sp)
101078cc:	d9c01017 	ldw	r7,64(sp)
101078d0:	1009883a 	mov	r4,r2
101078d4:	180b883a 	mov	r5,r3
101078d8:	010dae40 	call	1010dae4 <__muldf3>
101078dc:	000d883a 	mov	r6,zero
101078e0:	01d00734 	movhi	r7,16412
101078e4:	1009883a 	mov	r4,r2
101078e8:	180b883a 	mov	r5,r3
101078ec:	010c6f80 	call	1010c6f8 <__adddf3>
101078f0:	047f3034 	movhi	r17,64704
101078f4:	1021883a 	mov	r16,r2
101078f8:	1c63883a 	add	r17,r3,r17
101078fc:	d9000f17 	ldw	r4,60(sp)
10107900:	d9401017 	ldw	r5,64(sp)
10107904:	000d883a 	mov	r6,zero
10107908:	01d00534 	movhi	r7,16404
1010790c:	010e1fc0 	call	1010e1fc <__subdf3>
10107910:	800d883a 	mov	r6,r16
10107914:	880f883a 	mov	r7,r17
10107918:	1009883a 	mov	r4,r2
1010791c:	180b883a 	mov	r5,r3
10107920:	102b883a 	mov	r21,r2
10107924:	1829883a 	mov	r20,r3
10107928:	010d9140 	call	1010d914 <__gedf2>
1010792c:	00806c16 	blt	zero,r2,10107ae0 <_dtoa_r+0x1304>
10107930:	89e0003c 	xorhi	r7,r17,32768
10107934:	800d883a 	mov	r6,r16
10107938:	a809883a 	mov	r4,r21
1010793c:	a00b883a 	mov	r5,r20
10107940:	010d9f00 	call	1010d9f0 <__ledf2>
10107944:	103d7e0e 	bge	r2,zero,10106f40 <__alt_data_end+0xfffe6f40>
10107948:	002b883a 	mov	r21,zero
1010794c:	0023883a 	mov	r17,zero
10107950:	003efb06 	br	10107540 <__alt_data_end+0xfffe7540>
10107954:	d8800717 	ldw	r2,28(sp)
10107958:	003bd006 	br	1010689c <__alt_data_end+0xfffe689c>
1010795c:	d9000a17 	ldw	r4,40(sp)
10107960:	d9800d17 	ldw	r6,52(sp)
10107964:	dd400a15 	stw	r21,40(sp)
10107968:	a905c83a 	sub	r2,r21,r4
1010796c:	308d883a 	add	r6,r6,r2
10107970:	d9800d15 	stw	r6,52(sp)
10107974:	002b883a 	mov	r21,zero
10107978:	003e0606 	br	10107194 <__alt_data_end+0xfffe7194>
1010797c:	9023883a 	mov	r17,r18
10107980:	9829883a 	mov	r20,r19
10107984:	04000084 	movi	r16,2
10107988:	003c9206 	br	10106bd4 <__alt_data_end+0xfffe6bd4>
1010798c:	04000044 	movi	r16,1
10107990:	dc000c15 	stw	r16,48(sp)
10107994:	dc000615 	stw	r16,24(sp)
10107998:	dc002215 	stw	r16,136(sp)
1010799c:	e0001115 	stw	zero,68(fp)
101079a0:	000b883a 	mov	r5,zero
101079a4:	003c6906 	br	10106b4c <__alt_data_end+0xfffe6b4c>
101079a8:	3021883a 	mov	r16,r6
101079ac:	003ffb06 	br	1010799c <__alt_data_end+0xfffe799c>
101079b0:	1000021e 	bne	r2,zero,101079bc <_dtoa_r+0x11e0>
101079b4:	4200004c 	andi	r8,r8,1
101079b8:	403e7d1e 	bne	r8,zero,101073b0 <__alt_data_end+0xfffe73b0>
101079bc:	01000c04 	movi	r4,48
101079c0:	00000106 	br	101079c8 <_dtoa_r+0x11ec>
101079c4:	102f883a 	mov	r23,r2
101079c8:	b8bfffc4 	addi	r2,r23,-1
101079cc:	10c00007 	ldb	r3,0(r2)
101079d0:	193ffc26 	beq	r3,r4,101079c4 <__alt_data_end+0xfffe79c4>
101079d4:	003e8706 	br	101073f4 <__alt_data_end+0xfffe73f4>
101079d8:	d8800517 	ldw	r2,20(sp)
101079dc:	00a3c83a 	sub	r17,zero,r2
101079e0:	8800a426 	beq	r17,zero,10107c74 <_dtoa_r+0x1498>
101079e4:	888003cc 	andi	r2,r17,15
101079e8:	100490fa 	slli	r2,r2,3
101079ec:	00c40474 	movhi	r3,4113
101079f0:	18c5be04 	addi	r3,r3,5880
101079f4:	1885883a 	add	r2,r3,r2
101079f8:	11800017 	ldw	r6,0(r2)
101079fc:	11c00117 	ldw	r7,4(r2)
10107a00:	9009883a 	mov	r4,r18
10107a04:	980b883a 	mov	r5,r19
10107a08:	8823d13a 	srai	r17,r17,4
10107a0c:	010dae40 	call	1010dae4 <__muldf3>
10107a10:	d8800f15 	stw	r2,60(sp)
10107a14:	d8c01015 	stw	r3,64(sp)
10107a18:	8800e826 	beq	r17,zero,10107dbc <_dtoa_r+0x15e0>
10107a1c:	05040474 	movhi	r20,4113
10107a20:	a505b404 	addi	r20,r20,5840
10107a24:	04000084 	movi	r16,2
10107a28:	8980004c 	andi	r6,r17,1
10107a2c:	1009883a 	mov	r4,r2
10107a30:	8823d07a 	srai	r17,r17,1
10107a34:	180b883a 	mov	r5,r3
10107a38:	30000426 	beq	r6,zero,10107a4c <_dtoa_r+0x1270>
10107a3c:	a1800017 	ldw	r6,0(r20)
10107a40:	a1c00117 	ldw	r7,4(r20)
10107a44:	84000044 	addi	r16,r16,1
10107a48:	010dae40 	call	1010dae4 <__muldf3>
10107a4c:	a5000204 	addi	r20,r20,8
10107a50:	883ff51e 	bne	r17,zero,10107a28 <__alt_data_end+0xfffe7a28>
10107a54:	d8800f15 	stw	r2,60(sp)
10107a58:	d8c01015 	stw	r3,64(sp)
10107a5c:	003c7606 	br	10106c38 <__alt_data_end+0xfffe6c38>
10107a60:	00c00c04 	movi	r3,48
10107a64:	10c00005 	stb	r3,0(r2)
10107a68:	d8c00517 	ldw	r3,20(sp)
10107a6c:	bd3fffc3 	ldbu	r20,-1(r23)
10107a70:	18c00044 	addi	r3,r3,1
10107a74:	d8c00515 	stw	r3,20(sp)
10107a78:	003db906 	br	10107160 <__alt_data_end+0xfffe7160>
10107a7c:	89400117 	ldw	r5,4(r17)
10107a80:	e009883a 	mov	r4,fp
10107a84:	01088e40 	call	101088e4 <_Balloc>
10107a88:	89800417 	ldw	r6,16(r17)
10107a8c:	89400304 	addi	r5,r17,12
10107a90:	11000304 	addi	r4,r2,12
10107a94:	31800084 	addi	r6,r6,2
10107a98:	318d883a 	add	r6,r6,r6
10107a9c:	318d883a 	add	r6,r6,r6
10107aa0:	1027883a 	mov	r19,r2
10107aa4:	01086400 	call	10108640 <memcpy>
10107aa8:	01800044 	movi	r6,1
10107aac:	980b883a 	mov	r5,r19
10107ab0:	e009883a 	mov	r4,fp
10107ab4:	01090640 	call	10109064 <__lshift>
10107ab8:	1029883a 	mov	r20,r2
10107abc:	003ecc06 	br	101075f0 <__alt_data_end+0xfffe75f0>
10107ac0:	00800e44 	movi	r2,57
10107ac4:	90809026 	beq	r18,r2,10107d08 <_dtoa_r+0x152c>
10107ac8:	92000044 	addi	r8,r18,1
10107acc:	003f1f06 	br	1010774c <__alt_data_end+0xfffe774c>
10107ad0:	9011883a 	mov	r8,r18
10107ad4:	8825883a 	mov	r18,r17
10107ad8:	a023883a 	mov	r17,r20
10107adc:	003e2906 	br	10107384 <__alt_data_end+0xfffe7384>
10107ae0:	002b883a 	mov	r21,zero
10107ae4:	0023883a 	mov	r17,zero
10107ae8:	003f5406 	br	1010783c <__alt_data_end+0xfffe783c>
10107aec:	61bfffc4 	addi	r6,r12,-1
10107af0:	300490fa 	slli	r2,r6,3
10107af4:	00c40474 	movhi	r3,4113
10107af8:	18c5be04 	addi	r3,r3,5880
10107afc:	1885883a 	add	r2,r3,r2
10107b00:	11000017 	ldw	r4,0(r2)
10107b04:	11400117 	ldw	r5,4(r2)
10107b08:	d8800717 	ldw	r2,28(sp)
10107b0c:	880f883a 	mov	r7,r17
10107b10:	d9801215 	stw	r6,72(sp)
10107b14:	800d883a 	mov	r6,r16
10107b18:	db001615 	stw	r12,88(sp)
10107b1c:	15c00044 	addi	r23,r2,1
10107b20:	010dae40 	call	1010dae4 <__muldf3>
10107b24:	d9401017 	ldw	r5,64(sp)
10107b28:	d9000f17 	ldw	r4,60(sp)
10107b2c:	d8c01515 	stw	r3,84(sp)
10107b30:	d8801415 	stw	r2,80(sp)
10107b34:	010eaf80 	call	1010eaf8 <__fixdfsi>
10107b38:	1009883a 	mov	r4,r2
10107b3c:	1021883a 	mov	r16,r2
10107b40:	010eb780 	call	1010eb78 <__floatsidf>
10107b44:	d9000f17 	ldw	r4,60(sp)
10107b48:	d9401017 	ldw	r5,64(sp)
10107b4c:	100d883a 	mov	r6,r2
10107b50:	180f883a 	mov	r7,r3
10107b54:	010e1fc0 	call	1010e1fc <__subdf3>
10107b58:	1829883a 	mov	r20,r3
10107b5c:	d8c00717 	ldw	r3,28(sp)
10107b60:	84000c04 	addi	r16,r16,48
10107b64:	1023883a 	mov	r17,r2
10107b68:	1c000005 	stb	r16,0(r3)
10107b6c:	db001617 	ldw	r12,88(sp)
10107b70:	00800044 	movi	r2,1
10107b74:	60802226 	beq	r12,r2,10107c00 <_dtoa_r+0x1424>
10107b78:	d9c00717 	ldw	r7,28(sp)
10107b7c:	8805883a 	mov	r2,r17
10107b80:	b82b883a 	mov	r21,r23
10107b84:	3b19883a 	add	r12,r7,r12
10107b88:	6023883a 	mov	r17,r12
10107b8c:	a007883a 	mov	r3,r20
10107b90:	dc800f15 	stw	r18,60(sp)
10107b94:	000d883a 	mov	r6,zero
10107b98:	01d00934 	movhi	r7,16420
10107b9c:	1009883a 	mov	r4,r2
10107ba0:	180b883a 	mov	r5,r3
10107ba4:	010dae40 	call	1010dae4 <__muldf3>
10107ba8:	180b883a 	mov	r5,r3
10107bac:	1009883a 	mov	r4,r2
10107bb0:	1829883a 	mov	r20,r3
10107bb4:	1025883a 	mov	r18,r2
10107bb8:	010eaf80 	call	1010eaf8 <__fixdfsi>
10107bbc:	1009883a 	mov	r4,r2
10107bc0:	1021883a 	mov	r16,r2
10107bc4:	010eb780 	call	1010eb78 <__floatsidf>
10107bc8:	100d883a 	mov	r6,r2
10107bcc:	180f883a 	mov	r7,r3
10107bd0:	9009883a 	mov	r4,r18
10107bd4:	a00b883a 	mov	r5,r20
10107bd8:	84000c04 	addi	r16,r16,48
10107bdc:	010e1fc0 	call	1010e1fc <__subdf3>
10107be0:	ad400044 	addi	r21,r21,1
10107be4:	ac3fffc5 	stb	r16,-1(r21)
10107be8:	ac7fea1e 	bne	r21,r17,10107b94 <__alt_data_end+0xfffe7b94>
10107bec:	1023883a 	mov	r17,r2
10107bf0:	d8801217 	ldw	r2,72(sp)
10107bf4:	dc800f17 	ldw	r18,60(sp)
10107bf8:	1829883a 	mov	r20,r3
10107bfc:	b8af883a 	add	r23,r23,r2
10107c00:	d9001417 	ldw	r4,80(sp)
10107c04:	d9401517 	ldw	r5,84(sp)
10107c08:	000d883a 	mov	r6,zero
10107c0c:	01cff834 	movhi	r7,16352
10107c10:	010c6f80 	call	1010c6f8 <__adddf3>
10107c14:	880d883a 	mov	r6,r17
10107c18:	a00f883a 	mov	r7,r20
10107c1c:	1009883a 	mov	r4,r2
10107c20:	180b883a 	mov	r5,r3
10107c24:	010d9f00 	call	1010d9f0 <__ledf2>
10107c28:	10003e0e 	bge	r2,zero,10107d24 <_dtoa_r+0x1548>
10107c2c:	d9001317 	ldw	r4,76(sp)
10107c30:	bd3fffc3 	ldbu	r20,-1(r23)
10107c34:	d9000515 	stw	r4,20(sp)
10107c38:	003d3b06 	br	10107128 <__alt_data_end+0xfffe7128>
10107c3c:	0027883a 	mov	r19,zero
10107c40:	003f1b06 	br	101078b0 <__alt_data_end+0xfffe78b0>
10107c44:	d8800817 	ldw	r2,32(sp)
10107c48:	11e9c83a 	sub	r20,r2,r7
10107c4c:	0005883a 	mov	r2,zero
10107c50:	003d5406 	br	101071a4 <__alt_data_end+0xfffe71a4>
10107c54:	00800044 	movi	r2,1
10107c58:	003dc706 	br	10107378 <__alt_data_end+0xfffe7378>
10107c5c:	d8c00217 	ldw	r3,8(sp)
10107c60:	00800d84 	movi	r2,54
10107c64:	dd400a17 	ldw	r21,40(sp)
10107c68:	10c5c83a 	sub	r2,r2,r3
10107c6c:	dd000817 	ldw	r20,32(sp)
10107c70:	003d4c06 	br	101071a4 <__alt_data_end+0xfffe71a4>
10107c74:	dc800f15 	stw	r18,60(sp)
10107c78:	dcc01015 	stw	r19,64(sp)
10107c7c:	04000084 	movi	r16,2
10107c80:	003bed06 	br	10106c38 <__alt_data_end+0xfffe6c38>
10107c84:	d9000617 	ldw	r4,24(sp)
10107c88:	203f0d26 	beq	r4,zero,101078c0 <__alt_data_end+0xfffe78c0>
10107c8c:	d9800c17 	ldw	r6,48(sp)
10107c90:	01bcab0e 	bge	zero,r6,10106f40 <__alt_data_end+0xfffe6f40>
10107c94:	d9401017 	ldw	r5,64(sp)
10107c98:	d9000f17 	ldw	r4,60(sp)
10107c9c:	000d883a 	mov	r6,zero
10107ca0:	01d00934 	movhi	r7,16420
10107ca4:	010dae40 	call	1010dae4 <__muldf3>
10107ca8:	81000044 	addi	r4,r16,1
10107cac:	d8800f15 	stw	r2,60(sp)
10107cb0:	d8c01015 	stw	r3,64(sp)
10107cb4:	010eb780 	call	1010eb78 <__floatsidf>
10107cb8:	d9800f17 	ldw	r6,60(sp)
10107cbc:	d9c01017 	ldw	r7,64(sp)
10107cc0:	1009883a 	mov	r4,r2
10107cc4:	180b883a 	mov	r5,r3
10107cc8:	010dae40 	call	1010dae4 <__muldf3>
10107ccc:	01d00734 	movhi	r7,16412
10107cd0:	000d883a 	mov	r6,zero
10107cd4:	1009883a 	mov	r4,r2
10107cd8:	180b883a 	mov	r5,r3
10107cdc:	010c6f80 	call	1010c6f8 <__adddf3>
10107ce0:	d9c00517 	ldw	r7,20(sp)
10107ce4:	047f3034 	movhi	r17,64704
10107ce8:	1021883a 	mov	r16,r2
10107cec:	39ffffc4 	addi	r7,r7,-1
10107cf0:	d9c01315 	stw	r7,76(sp)
10107cf4:	1c63883a 	add	r17,r3,r17
10107cf8:	db000c17 	ldw	r12,48(sp)
10107cfc:	003bea06 	br	10106ca8 <__alt_data_end+0xfffe6ca8>
10107d00:	dc000915 	stw	r16,36(sp)
10107d04:	003e0e06 	br	10107540 <__alt_data_end+0xfffe7540>
10107d08:	01000e44 	movi	r4,57
10107d0c:	8825883a 	mov	r18,r17
10107d10:	9dc00044 	addi	r23,r19,1
10107d14:	99000005 	stb	r4,0(r19)
10107d18:	a023883a 	mov	r17,r20
10107d1c:	dc000915 	stw	r16,36(sp)
10107d20:	003da406 	br	101073b4 <__alt_data_end+0xfffe73b4>
10107d24:	d9801417 	ldw	r6,80(sp)
10107d28:	d9c01517 	ldw	r7,84(sp)
10107d2c:	0009883a 	mov	r4,zero
10107d30:	014ff834 	movhi	r5,16352
10107d34:	010e1fc0 	call	1010e1fc <__subdf3>
10107d38:	880d883a 	mov	r6,r17
10107d3c:	a00f883a 	mov	r7,r20
10107d40:	1009883a 	mov	r4,r2
10107d44:	180b883a 	mov	r5,r3
10107d48:	010d9140 	call	1010d914 <__gedf2>
10107d4c:	00bc7c0e 	bge	zero,r2,10106f40 <__alt_data_end+0xfffe6f40>
10107d50:	01000c04 	movi	r4,48
10107d54:	00000106 	br	10107d5c <_dtoa_r+0x1580>
10107d58:	102f883a 	mov	r23,r2
10107d5c:	b8bfffc4 	addi	r2,r23,-1
10107d60:	10c00007 	ldb	r3,0(r2)
10107d64:	193ffc26 	beq	r3,r4,10107d58 <__alt_data_end+0xfffe7d58>
10107d68:	d9801317 	ldw	r6,76(sp)
10107d6c:	d9800515 	stw	r6,20(sp)
10107d70:	003c4406 	br	10106e84 <__alt_data_end+0xfffe6e84>
10107d74:	d9801317 	ldw	r6,76(sp)
10107d78:	d9800515 	stw	r6,20(sp)
10107d7c:	003cea06 	br	10107128 <__alt_data_end+0xfffe7128>
10107d80:	dd800f17 	ldw	r22,60(sp)
10107d84:	dcc01017 	ldw	r19,64(sp)
10107d88:	dc801217 	ldw	r18,72(sp)
10107d8c:	003c6c06 	br	10106f40 <__alt_data_end+0xfffe6f40>
10107d90:	903e031e 	bne	r18,zero,101075a0 <__alt_data_end+0xfffe75a0>
10107d94:	003ebb06 	br	10107884 <__alt_data_end+0xfffe7884>
10107d98:	103e6c1e 	bne	r2,zero,1010774c <__alt_data_end+0xfffe774c>
10107d9c:	4080004c 	andi	r2,r8,1
10107da0:	103e6a26 	beq	r2,zero,1010774c <__alt_data_end+0xfffe774c>
10107da4:	003e6606 	br	10107740 <__alt_data_end+0xfffe7740>
10107da8:	d8c00317 	ldw	r3,12(sp)
10107dac:	00800084 	movi	r2,2
10107db0:	10c02916 	blt	r2,r3,10107e58 <_dtoa_r+0x167c>
10107db4:	d9000c17 	ldw	r4,48(sp)
10107db8:	003e8806 	br	101077dc <__alt_data_end+0xfffe77dc>
10107dbc:	04000084 	movi	r16,2
10107dc0:	003b9d06 	br	10106c38 <__alt_data_end+0xfffe6c38>
10107dc4:	d9001317 	ldw	r4,76(sp)
10107dc8:	d9000515 	stw	r4,20(sp)
10107dcc:	003cd606 	br	10107128 <__alt_data_end+0xfffe7128>
10107dd0:	d8801317 	ldw	r2,76(sp)
10107dd4:	d8800515 	stw	r2,20(sp)
10107dd8:	003c2a06 	br	10106e84 <__alt_data_end+0xfffe6e84>
10107ddc:	d9800317 	ldw	r6,12(sp)
10107de0:	00800084 	movi	r2,2
10107de4:	11801516 	blt	r2,r6,10107e3c <_dtoa_r+0x1660>
10107de8:	d9c00c17 	ldw	r7,48(sp)
10107dec:	d9c00615 	stw	r7,24(sp)
10107df0:	003df706 	br	101075d0 <__alt_data_end+0xfffe75d0>
10107df4:	193d3926 	beq	r3,r4,101072dc <__alt_data_end+0xfffe72dc>
10107df8:	00c00f04 	movi	r3,60
10107dfc:	1885c83a 	sub	r2,r3,r2
10107e00:	003ddf06 	br	10107580 <__alt_data_end+0xfffe7580>
10107e04:	e009883a 	mov	r4,fp
10107e08:	e0001115 	stw	zero,68(fp)
10107e0c:	000b883a 	mov	r5,zero
10107e10:	01088e40 	call	101088e4 <_Balloc>
10107e14:	d8800715 	stw	r2,28(sp)
10107e18:	d8c00717 	ldw	r3,28(sp)
10107e1c:	00bfffc4 	movi	r2,-1
10107e20:	01000044 	movi	r4,1
10107e24:	d8800c15 	stw	r2,48(sp)
10107e28:	e0c01015 	stw	r3,64(fp)
10107e2c:	d9000b15 	stw	r4,44(sp)
10107e30:	d8800615 	stw	r2,24(sp)
10107e34:	d8002215 	stw	zero,136(sp)
10107e38:	003c4106 	br	10106f40 <__alt_data_end+0xfffe6f40>
10107e3c:	d8c00c17 	ldw	r3,48(sp)
10107e40:	d8c00615 	stw	r3,24(sp)
10107e44:	003e7006 	br	10107808 <__alt_data_end+0xfffe7808>
10107e48:	04400044 	movi	r17,1
10107e4c:	003b2006 	br	10106ad0 <__alt_data_end+0xfffe6ad0>
10107e50:	000b883a 	mov	r5,zero
10107e54:	003b3d06 	br	10106b4c <__alt_data_end+0xfffe6b4c>
10107e58:	d8800c17 	ldw	r2,48(sp)
10107e5c:	d8800615 	stw	r2,24(sp)
10107e60:	003e6906 	br	10107808 <__alt_data_end+0xfffe7808>

10107e64 <__sflags>:
10107e64:	28800007 	ldb	r2,0(r5)
10107e68:	00c01c84 	movi	r3,114
10107e6c:	10c02426 	beq	r2,r3,10107f00 <__sflags+0x9c>
10107e70:	00c01dc4 	movi	r3,119
10107e74:	10c01e26 	beq	r2,r3,10107ef0 <__sflags+0x8c>
10107e78:	00c01844 	movi	r3,97
10107e7c:	10c00426 	beq	r2,r3,10107e90 <__sflags+0x2c>
10107e80:	00800584 	movi	r2,22
10107e84:	20800015 	stw	r2,0(r4)
10107e88:	0005883a 	mov	r2,zero
10107e8c:	f800283a 	ret
10107e90:	02c08204 	movi	r11,520
10107e94:	01000044 	movi	r4,1
10107e98:	00804204 	movi	r2,264
10107e9c:	01c00ac4 	movi	r7,43
10107ea0:	02bff8c4 	movi	r10,-29
10107ea4:	027fff04 	movi	r9,-4
10107ea8:	02001e04 	movi	r8,120
10107eac:	29400044 	addi	r5,r5,1
10107eb0:	28c00007 	ldb	r3,0(r5)
10107eb4:	18000626 	beq	r3,zero,10107ed0 <__sflags+0x6c>
10107eb8:	19c00826 	beq	r3,r7,10107edc <__sflags+0x78>
10107ebc:	1a3ffb1e 	bne	r3,r8,10107eac <__alt_data_end+0xfffe7eac>
10107ec0:	29400044 	addi	r5,r5,1
10107ec4:	28c00007 	ldb	r3,0(r5)
10107ec8:	21020014 	ori	r4,r4,2048
10107ecc:	183ffa1e 	bne	r3,zero,10107eb8 <__alt_data_end+0xfffe7eb8>
10107ed0:	22c8b03a 	or	r4,r4,r11
10107ed4:	31000015 	stw	r4,0(r6)
10107ed8:	f800283a 	ret
10107edc:	1284703a 	and	r2,r2,r10
10107ee0:	2248703a 	and	r4,r4,r9
10107ee4:	10800414 	ori	r2,r2,16
10107ee8:	21000094 	ori	r4,r4,2
10107eec:	003fef06 	br	10107eac <__alt_data_end+0xfffe7eac>
10107ef0:	02c18004 	movi	r11,1536
10107ef4:	01000044 	movi	r4,1
10107ef8:	00800204 	movi	r2,8
10107efc:	003fe706 	br	10107e9c <__alt_data_end+0xfffe7e9c>
10107f00:	0017883a 	mov	r11,zero
10107f04:	0009883a 	mov	r4,zero
10107f08:	00800104 	movi	r2,4
10107f0c:	003fe306 	br	10107e9c <__alt_data_end+0xfffe7e9c>

10107f10 <__sfvwrite_r>:
10107f10:	30800217 	ldw	r2,8(r6)
10107f14:	10006726 	beq	r2,zero,101080b4 <__sfvwrite_r+0x1a4>
10107f18:	28c0030b 	ldhu	r3,12(r5)
10107f1c:	defff404 	addi	sp,sp,-48
10107f20:	dd400715 	stw	r21,28(sp)
10107f24:	dd000615 	stw	r20,24(sp)
10107f28:	dc000215 	stw	r16,8(sp)
10107f2c:	dfc00b15 	stw	ra,44(sp)
10107f30:	df000a15 	stw	fp,40(sp)
10107f34:	ddc00915 	stw	r23,36(sp)
10107f38:	dd800815 	stw	r22,32(sp)
10107f3c:	dcc00515 	stw	r19,20(sp)
10107f40:	dc800415 	stw	r18,16(sp)
10107f44:	dc400315 	stw	r17,12(sp)
10107f48:	1880020c 	andi	r2,r3,8
10107f4c:	2821883a 	mov	r16,r5
10107f50:	202b883a 	mov	r21,r4
10107f54:	3029883a 	mov	r20,r6
10107f58:	10002726 	beq	r2,zero,10107ff8 <__sfvwrite_r+0xe8>
10107f5c:	28800417 	ldw	r2,16(r5)
10107f60:	10002526 	beq	r2,zero,10107ff8 <__sfvwrite_r+0xe8>
10107f64:	1880008c 	andi	r2,r3,2
10107f68:	a4400017 	ldw	r17,0(r20)
10107f6c:	10002a26 	beq	r2,zero,10108018 <__sfvwrite_r+0x108>
10107f70:	05a00034 	movhi	r22,32768
10107f74:	0027883a 	mov	r19,zero
10107f78:	0025883a 	mov	r18,zero
10107f7c:	b5bf0004 	addi	r22,r22,-1024
10107f80:	980d883a 	mov	r6,r19
10107f84:	a809883a 	mov	r4,r21
10107f88:	90004626 	beq	r18,zero,101080a4 <__sfvwrite_r+0x194>
10107f8c:	900f883a 	mov	r7,r18
10107f90:	b480022e 	bgeu	r22,r18,10107f9c <__sfvwrite_r+0x8c>
10107f94:	01e00034 	movhi	r7,32768
10107f98:	39ff0004 	addi	r7,r7,-1024
10107f9c:	80800917 	ldw	r2,36(r16)
10107fa0:	81400717 	ldw	r5,28(r16)
10107fa4:	103ee83a 	callr	r2
10107fa8:	0080570e 	bge	zero,r2,10108108 <__sfvwrite_r+0x1f8>
10107fac:	a0c00217 	ldw	r3,8(r20)
10107fb0:	98a7883a 	add	r19,r19,r2
10107fb4:	90a5c83a 	sub	r18,r18,r2
10107fb8:	1885c83a 	sub	r2,r3,r2
10107fbc:	a0800215 	stw	r2,8(r20)
10107fc0:	103fef1e 	bne	r2,zero,10107f80 <__alt_data_end+0xfffe7f80>
10107fc4:	0005883a 	mov	r2,zero
10107fc8:	dfc00b17 	ldw	ra,44(sp)
10107fcc:	df000a17 	ldw	fp,40(sp)
10107fd0:	ddc00917 	ldw	r23,36(sp)
10107fd4:	dd800817 	ldw	r22,32(sp)
10107fd8:	dd400717 	ldw	r21,28(sp)
10107fdc:	dd000617 	ldw	r20,24(sp)
10107fe0:	dcc00517 	ldw	r19,20(sp)
10107fe4:	dc800417 	ldw	r18,16(sp)
10107fe8:	dc400317 	ldw	r17,12(sp)
10107fec:	dc000217 	ldw	r16,8(sp)
10107ff0:	dec00c04 	addi	sp,sp,48
10107ff4:	f800283a 	ret
10107ff8:	800b883a 	mov	r5,r16
10107ffc:	a809883a 	mov	r4,r21
10108000:	01064340 	call	10106434 <__swsetup_r>
10108004:	1000eb1e 	bne	r2,zero,101083b4 <__sfvwrite_r+0x4a4>
10108008:	80c0030b 	ldhu	r3,12(r16)
1010800c:	a4400017 	ldw	r17,0(r20)
10108010:	1880008c 	andi	r2,r3,2
10108014:	103fd61e 	bne	r2,zero,10107f70 <__alt_data_end+0xfffe7f70>
10108018:	1880004c 	andi	r2,r3,1
1010801c:	10003f1e 	bne	r2,zero,1010811c <__sfvwrite_r+0x20c>
10108020:	0039883a 	mov	fp,zero
10108024:	0025883a 	mov	r18,zero
10108028:	90001a26 	beq	r18,zero,10108094 <__sfvwrite_r+0x184>
1010802c:	1880800c 	andi	r2,r3,512
10108030:	84c00217 	ldw	r19,8(r16)
10108034:	10002126 	beq	r2,zero,101080bc <__sfvwrite_r+0x1ac>
10108038:	982f883a 	mov	r23,r19
1010803c:	94c09336 	bltu	r18,r19,1010828c <__sfvwrite_r+0x37c>
10108040:	1881200c 	andi	r2,r3,1152
10108044:	10009e1e 	bne	r2,zero,101082c0 <__sfvwrite_r+0x3b0>
10108048:	81000017 	ldw	r4,0(r16)
1010804c:	b80d883a 	mov	r6,r23
10108050:	e00b883a 	mov	r5,fp
10108054:	01087880 	call	10108788 <memmove>
10108058:	80c00217 	ldw	r3,8(r16)
1010805c:	81000017 	ldw	r4,0(r16)
10108060:	9005883a 	mov	r2,r18
10108064:	1ce7c83a 	sub	r19,r3,r19
10108068:	25cf883a 	add	r7,r4,r23
1010806c:	84c00215 	stw	r19,8(r16)
10108070:	81c00015 	stw	r7,0(r16)
10108074:	a0c00217 	ldw	r3,8(r20)
10108078:	e0b9883a 	add	fp,fp,r2
1010807c:	90a5c83a 	sub	r18,r18,r2
10108080:	18a7c83a 	sub	r19,r3,r2
10108084:	a4c00215 	stw	r19,8(r20)
10108088:	983fce26 	beq	r19,zero,10107fc4 <__alt_data_end+0xfffe7fc4>
1010808c:	80c0030b 	ldhu	r3,12(r16)
10108090:	903fe61e 	bne	r18,zero,1010802c <__alt_data_end+0xfffe802c>
10108094:	8f000017 	ldw	fp,0(r17)
10108098:	8c800117 	ldw	r18,4(r17)
1010809c:	8c400204 	addi	r17,r17,8
101080a0:	003fe106 	br	10108028 <__alt_data_end+0xfffe8028>
101080a4:	8cc00017 	ldw	r19,0(r17)
101080a8:	8c800117 	ldw	r18,4(r17)
101080ac:	8c400204 	addi	r17,r17,8
101080b0:	003fb306 	br	10107f80 <__alt_data_end+0xfffe7f80>
101080b4:	0005883a 	mov	r2,zero
101080b8:	f800283a 	ret
101080bc:	81000017 	ldw	r4,0(r16)
101080c0:	80800417 	ldw	r2,16(r16)
101080c4:	11005736 	bltu	r2,r4,10108224 <__sfvwrite_r+0x314>
101080c8:	85c00517 	ldw	r23,20(r16)
101080cc:	95c05536 	bltu	r18,r23,10108224 <__sfvwrite_r+0x314>
101080d0:	00a00034 	movhi	r2,32768
101080d4:	10bfffc4 	addi	r2,r2,-1
101080d8:	9009883a 	mov	r4,r18
101080dc:	1480012e 	bgeu	r2,r18,101080e4 <__sfvwrite_r+0x1d4>
101080e0:	1009883a 	mov	r4,r2
101080e4:	b80b883a 	mov	r5,r23
101080e8:	0101a6c0 	call	10101a6c <__divsi3>
101080ec:	15cf383a 	mul	r7,r2,r23
101080f0:	81400717 	ldw	r5,28(r16)
101080f4:	80800917 	ldw	r2,36(r16)
101080f8:	e00d883a 	mov	r6,fp
101080fc:	a809883a 	mov	r4,r21
10108100:	103ee83a 	callr	r2
10108104:	00bfdb16 	blt	zero,r2,10108074 <__alt_data_end+0xfffe8074>
10108108:	8080030b 	ldhu	r2,12(r16)
1010810c:	10801014 	ori	r2,r2,64
10108110:	8080030d 	sth	r2,12(r16)
10108114:	00bfffc4 	movi	r2,-1
10108118:	003fab06 	br	10107fc8 <__alt_data_end+0xfffe7fc8>
1010811c:	0027883a 	mov	r19,zero
10108120:	0011883a 	mov	r8,zero
10108124:	0039883a 	mov	fp,zero
10108128:	0025883a 	mov	r18,zero
1010812c:	90001f26 	beq	r18,zero,101081ac <__sfvwrite_r+0x29c>
10108130:	40005a26 	beq	r8,zero,1010829c <__sfvwrite_r+0x38c>
10108134:	982d883a 	mov	r22,r19
10108138:	94c0012e 	bgeu	r18,r19,10108140 <__sfvwrite_r+0x230>
1010813c:	902d883a 	mov	r22,r18
10108140:	81000017 	ldw	r4,0(r16)
10108144:	80800417 	ldw	r2,16(r16)
10108148:	b02f883a 	mov	r23,r22
1010814c:	81c00517 	ldw	r7,20(r16)
10108150:	1100032e 	bgeu	r2,r4,10108160 <__sfvwrite_r+0x250>
10108154:	80c00217 	ldw	r3,8(r16)
10108158:	38c7883a 	add	r3,r7,r3
1010815c:	1d801816 	blt	r3,r22,101081c0 <__sfvwrite_r+0x2b0>
10108160:	b1c03e16 	blt	r22,r7,1010825c <__sfvwrite_r+0x34c>
10108164:	80800917 	ldw	r2,36(r16)
10108168:	81400717 	ldw	r5,28(r16)
1010816c:	e00d883a 	mov	r6,fp
10108170:	da000115 	stw	r8,4(sp)
10108174:	a809883a 	mov	r4,r21
10108178:	103ee83a 	callr	r2
1010817c:	102f883a 	mov	r23,r2
10108180:	da000117 	ldw	r8,4(sp)
10108184:	00bfe00e 	bge	zero,r2,10108108 <__alt_data_end+0xfffe8108>
10108188:	9de7c83a 	sub	r19,r19,r23
1010818c:	98001f26 	beq	r19,zero,1010820c <__sfvwrite_r+0x2fc>
10108190:	a0800217 	ldw	r2,8(r20)
10108194:	e5f9883a 	add	fp,fp,r23
10108198:	95e5c83a 	sub	r18,r18,r23
1010819c:	15efc83a 	sub	r23,r2,r23
101081a0:	a5c00215 	stw	r23,8(r20)
101081a4:	b83f8726 	beq	r23,zero,10107fc4 <__alt_data_end+0xfffe7fc4>
101081a8:	903fe11e 	bne	r18,zero,10108130 <__alt_data_end+0xfffe8130>
101081ac:	8f000017 	ldw	fp,0(r17)
101081b0:	8c800117 	ldw	r18,4(r17)
101081b4:	0011883a 	mov	r8,zero
101081b8:	8c400204 	addi	r17,r17,8
101081bc:	003fdb06 	br	1010812c <__alt_data_end+0xfffe812c>
101081c0:	180d883a 	mov	r6,r3
101081c4:	e00b883a 	mov	r5,fp
101081c8:	da000115 	stw	r8,4(sp)
101081cc:	d8c00015 	stw	r3,0(sp)
101081d0:	01087880 	call	10108788 <memmove>
101081d4:	d8c00017 	ldw	r3,0(sp)
101081d8:	80800017 	ldw	r2,0(r16)
101081dc:	800b883a 	mov	r5,r16
101081e0:	a809883a 	mov	r4,r21
101081e4:	10c5883a 	add	r2,r2,r3
101081e8:	80800015 	stw	r2,0(r16)
101081ec:	d8c00015 	stw	r3,0(sp)
101081f0:	0101f400 	call	10101f40 <_fflush_r>
101081f4:	d8c00017 	ldw	r3,0(sp)
101081f8:	da000117 	ldw	r8,4(sp)
101081fc:	103fc21e 	bne	r2,zero,10108108 <__alt_data_end+0xfffe8108>
10108200:	182f883a 	mov	r23,r3
10108204:	9de7c83a 	sub	r19,r19,r23
10108208:	983fe11e 	bne	r19,zero,10108190 <__alt_data_end+0xfffe8190>
1010820c:	800b883a 	mov	r5,r16
10108210:	a809883a 	mov	r4,r21
10108214:	0101f400 	call	10101f40 <_fflush_r>
10108218:	103fbb1e 	bne	r2,zero,10108108 <__alt_data_end+0xfffe8108>
1010821c:	0011883a 	mov	r8,zero
10108220:	003fdb06 	br	10108190 <__alt_data_end+0xfffe8190>
10108224:	94c0012e 	bgeu	r18,r19,1010822c <__sfvwrite_r+0x31c>
10108228:	9027883a 	mov	r19,r18
1010822c:	980d883a 	mov	r6,r19
10108230:	e00b883a 	mov	r5,fp
10108234:	01087880 	call	10108788 <memmove>
10108238:	80800217 	ldw	r2,8(r16)
1010823c:	80c00017 	ldw	r3,0(r16)
10108240:	14c5c83a 	sub	r2,r2,r19
10108244:	1cc7883a 	add	r3,r3,r19
10108248:	80800215 	stw	r2,8(r16)
1010824c:	80c00015 	stw	r3,0(r16)
10108250:	10004326 	beq	r2,zero,10108360 <__sfvwrite_r+0x450>
10108254:	9805883a 	mov	r2,r19
10108258:	003f8606 	br	10108074 <__alt_data_end+0xfffe8074>
1010825c:	b00d883a 	mov	r6,r22
10108260:	e00b883a 	mov	r5,fp
10108264:	da000115 	stw	r8,4(sp)
10108268:	01087880 	call	10108788 <memmove>
1010826c:	80800217 	ldw	r2,8(r16)
10108270:	80c00017 	ldw	r3,0(r16)
10108274:	da000117 	ldw	r8,4(sp)
10108278:	1585c83a 	sub	r2,r2,r22
1010827c:	1dad883a 	add	r22,r3,r22
10108280:	80800215 	stw	r2,8(r16)
10108284:	85800015 	stw	r22,0(r16)
10108288:	003fbf06 	br	10108188 <__alt_data_end+0xfffe8188>
1010828c:	81000017 	ldw	r4,0(r16)
10108290:	9027883a 	mov	r19,r18
10108294:	902f883a 	mov	r23,r18
10108298:	003f6c06 	br	1010804c <__alt_data_end+0xfffe804c>
1010829c:	900d883a 	mov	r6,r18
101082a0:	01400284 	movi	r5,10
101082a4:	e009883a 	mov	r4,fp
101082a8:	010855c0 	call	1010855c <memchr>
101082ac:	10003e26 	beq	r2,zero,101083a8 <__sfvwrite_r+0x498>
101082b0:	10800044 	addi	r2,r2,1
101082b4:	1727c83a 	sub	r19,r2,fp
101082b8:	02000044 	movi	r8,1
101082bc:	003f9d06 	br	10108134 <__alt_data_end+0xfffe8134>
101082c0:	80800517 	ldw	r2,20(r16)
101082c4:	81400417 	ldw	r5,16(r16)
101082c8:	81c00017 	ldw	r7,0(r16)
101082cc:	10a7883a 	add	r19,r2,r2
101082d0:	9885883a 	add	r2,r19,r2
101082d4:	1026d7fa 	srli	r19,r2,31
101082d8:	396dc83a 	sub	r22,r7,r5
101082dc:	b1000044 	addi	r4,r22,1
101082e0:	9885883a 	add	r2,r19,r2
101082e4:	1027d07a 	srai	r19,r2,1
101082e8:	2485883a 	add	r2,r4,r18
101082ec:	980d883a 	mov	r6,r19
101082f0:	9880022e 	bgeu	r19,r2,101082fc <__sfvwrite_r+0x3ec>
101082f4:	1027883a 	mov	r19,r2
101082f8:	100d883a 	mov	r6,r2
101082fc:	18c1000c 	andi	r3,r3,1024
10108300:	18001c26 	beq	r3,zero,10108374 <__sfvwrite_r+0x464>
10108304:	300b883a 	mov	r5,r6
10108308:	a809883a 	mov	r4,r21
1010830c:	01032180 	call	10103218 <_malloc_r>
10108310:	102f883a 	mov	r23,r2
10108314:	10002926 	beq	r2,zero,101083bc <__sfvwrite_r+0x4ac>
10108318:	81400417 	ldw	r5,16(r16)
1010831c:	b00d883a 	mov	r6,r22
10108320:	1009883a 	mov	r4,r2
10108324:	01086400 	call	10108640 <memcpy>
10108328:	8080030b 	ldhu	r2,12(r16)
1010832c:	00fedfc4 	movi	r3,-1153
10108330:	10c4703a 	and	r2,r2,r3
10108334:	10802014 	ori	r2,r2,128
10108338:	8080030d 	sth	r2,12(r16)
1010833c:	bd89883a 	add	r4,r23,r22
10108340:	9d8fc83a 	sub	r7,r19,r22
10108344:	85c00415 	stw	r23,16(r16)
10108348:	84c00515 	stw	r19,20(r16)
1010834c:	81000015 	stw	r4,0(r16)
10108350:	9027883a 	mov	r19,r18
10108354:	81c00215 	stw	r7,8(r16)
10108358:	902f883a 	mov	r23,r18
1010835c:	003f3b06 	br	1010804c <__alt_data_end+0xfffe804c>
10108360:	800b883a 	mov	r5,r16
10108364:	a809883a 	mov	r4,r21
10108368:	0101f400 	call	10101f40 <_fflush_r>
1010836c:	103fb926 	beq	r2,zero,10108254 <__alt_data_end+0xfffe8254>
10108370:	003f6506 	br	10108108 <__alt_data_end+0xfffe8108>
10108374:	a809883a 	mov	r4,r21
10108378:	01099400 	call	10109940 <_realloc_r>
1010837c:	102f883a 	mov	r23,r2
10108380:	103fee1e 	bne	r2,zero,1010833c <__alt_data_end+0xfffe833c>
10108384:	81400417 	ldw	r5,16(r16)
10108388:	a809883a 	mov	r4,r21
1010838c:	01025e80 	call	101025e8 <_free_r>
10108390:	8080030b 	ldhu	r2,12(r16)
10108394:	00ffdfc4 	movi	r3,-129
10108398:	1884703a 	and	r2,r3,r2
1010839c:	00c00304 	movi	r3,12
101083a0:	a8c00015 	stw	r3,0(r21)
101083a4:	003f5906 	br	1010810c <__alt_data_end+0xfffe810c>
101083a8:	94c00044 	addi	r19,r18,1
101083ac:	02000044 	movi	r8,1
101083b0:	003f6006 	br	10108134 <__alt_data_end+0xfffe8134>
101083b4:	00bfffc4 	movi	r2,-1
101083b8:	003f0306 	br	10107fc8 <__alt_data_end+0xfffe7fc8>
101083bc:	00800304 	movi	r2,12
101083c0:	a8800015 	stw	r2,0(r21)
101083c4:	8080030b 	ldhu	r2,12(r16)
101083c8:	003f5006 	br	1010810c <__alt_data_end+0xfffe810c>

101083cc <_isatty_r>:
101083cc:	defffd04 	addi	sp,sp,-12
101083d0:	dc000015 	stw	r16,0(sp)
101083d4:	04040474 	movhi	r16,4113
101083d8:	dc400115 	stw	r17,4(sp)
101083dc:	8413bd04 	addi	r16,r16,20212
101083e0:	2023883a 	mov	r17,r4
101083e4:	2809883a 	mov	r4,r5
101083e8:	dfc00215 	stw	ra,8(sp)
101083ec:	80000015 	stw	zero,0(r16)
101083f0:	010f2600 	call	1010f260 <isatty>
101083f4:	00ffffc4 	movi	r3,-1
101083f8:	10c00526 	beq	r2,r3,10108410 <_isatty_r+0x44>
101083fc:	dfc00217 	ldw	ra,8(sp)
10108400:	dc400117 	ldw	r17,4(sp)
10108404:	dc000017 	ldw	r16,0(sp)
10108408:	dec00304 	addi	sp,sp,12
1010840c:	f800283a 	ret
10108410:	80c00017 	ldw	r3,0(r16)
10108414:	183ff926 	beq	r3,zero,101083fc <__alt_data_end+0xfffe83fc>
10108418:	88c00015 	stw	r3,0(r17)
1010841c:	003ff706 	br	101083fc <__alt_data_end+0xfffe83fc>

10108420 <_setlocale_r>:
10108420:	30001b26 	beq	r6,zero,10108490 <_setlocale_r+0x70>
10108424:	01440474 	movhi	r5,4113
10108428:	defffe04 	addi	sp,sp,-8
1010842c:	2945a404 	addi	r5,r5,5776
10108430:	3009883a 	mov	r4,r6
10108434:	dc000015 	stw	r16,0(sp)
10108438:	dfc00115 	stw	ra,4(sp)
1010843c:	3021883a 	mov	r16,r6
10108440:	0109f180 	call	10109f18 <strcmp>
10108444:	1000061e 	bne	r2,zero,10108460 <_setlocale_r+0x40>
10108448:	00840474 	movhi	r2,4113
1010844c:	10858504 	addi	r2,r2,5652
10108450:	dfc00117 	ldw	ra,4(sp)
10108454:	dc000017 	ldw	r16,0(sp)
10108458:	dec00204 	addi	sp,sp,8
1010845c:	f800283a 	ret
10108460:	01440474 	movhi	r5,4113
10108464:	29458504 	addi	r5,r5,5652
10108468:	8009883a 	mov	r4,r16
1010846c:	0109f180 	call	10109f18 <strcmp>
10108470:	103ff526 	beq	r2,zero,10108448 <__alt_data_end+0xfffe8448>
10108474:	01440474 	movhi	r5,4113
10108478:	29458f04 	addi	r5,r5,5692
1010847c:	8009883a 	mov	r4,r16
10108480:	0109f180 	call	10109f18 <strcmp>
10108484:	103ff026 	beq	r2,zero,10108448 <__alt_data_end+0xfffe8448>
10108488:	0005883a 	mov	r2,zero
1010848c:	003ff006 	br	10108450 <__alt_data_end+0xfffe8450>
10108490:	00840474 	movhi	r2,4113
10108494:	10858504 	addi	r2,r2,5652
10108498:	f800283a 	ret

1010849c <__locale_charset>:
1010849c:	00840474 	movhi	r2,4113
101084a0:	10885804 	addi	r2,r2,8544
101084a4:	f800283a 	ret

101084a8 <__locale_mb_cur_max>:
101084a8:	00840474 	movhi	r2,4113
101084ac:	108cf404 	addi	r2,r2,13264
101084b0:	10800017 	ldw	r2,0(r2)
101084b4:	f800283a 	ret

101084b8 <__locale_msgcharset>:
101084b8:	00840474 	movhi	r2,4113
101084bc:	10885004 	addi	r2,r2,8512
101084c0:	f800283a 	ret

101084c4 <__locale_cjk_lang>:
101084c4:	0005883a 	mov	r2,zero
101084c8:	f800283a 	ret

101084cc <_localeconv_r>:
101084cc:	00840474 	movhi	r2,4113
101084d0:	10886004 	addi	r2,r2,8576
101084d4:	f800283a 	ret

101084d8 <setlocale>:
101084d8:	00840474 	movhi	r2,4113
101084dc:	108cf104 	addi	r2,r2,13252
101084e0:	280d883a 	mov	r6,r5
101084e4:	200b883a 	mov	r5,r4
101084e8:	11000017 	ldw	r4,0(r2)
101084ec:	01084201 	jmpi	10108420 <_setlocale_r>

101084f0 <localeconv>:
101084f0:	00840474 	movhi	r2,4113
101084f4:	10886004 	addi	r2,r2,8576
101084f8:	f800283a 	ret

101084fc <_lseek_r>:
101084fc:	defffd04 	addi	sp,sp,-12
10108500:	2805883a 	mov	r2,r5
10108504:	dc000015 	stw	r16,0(sp)
10108508:	04040474 	movhi	r16,4113
1010850c:	dc400115 	stw	r17,4(sp)
10108510:	300b883a 	mov	r5,r6
10108514:	8413bd04 	addi	r16,r16,20212
10108518:	2023883a 	mov	r17,r4
1010851c:	380d883a 	mov	r6,r7
10108520:	1009883a 	mov	r4,r2
10108524:	dfc00215 	stw	ra,8(sp)
10108528:	80000015 	stw	zero,0(r16)
1010852c:	010f42c0 	call	1010f42c <lseek>
10108530:	00ffffc4 	movi	r3,-1
10108534:	10c00526 	beq	r2,r3,1010854c <_lseek_r+0x50>
10108538:	dfc00217 	ldw	ra,8(sp)
1010853c:	dc400117 	ldw	r17,4(sp)
10108540:	dc000017 	ldw	r16,0(sp)
10108544:	dec00304 	addi	sp,sp,12
10108548:	f800283a 	ret
1010854c:	80c00017 	ldw	r3,0(r16)
10108550:	183ff926 	beq	r3,zero,10108538 <__alt_data_end+0xfffe8538>
10108554:	88c00015 	stw	r3,0(r17)
10108558:	003ff706 	br	10108538 <__alt_data_end+0xfffe8538>

1010855c <memchr>:
1010855c:	208000cc 	andi	r2,r4,3
10108560:	280f883a 	mov	r7,r5
10108564:	10003426 	beq	r2,zero,10108638 <memchr+0xdc>
10108568:	30bfffc4 	addi	r2,r6,-1
1010856c:	30001a26 	beq	r6,zero,101085d8 <memchr+0x7c>
10108570:	20c00003 	ldbu	r3,0(r4)
10108574:	29803fcc 	andi	r6,r5,255
10108578:	30c0051e 	bne	r6,r3,10108590 <memchr+0x34>
1010857c:	00001806 	br	101085e0 <memchr+0x84>
10108580:	10001526 	beq	r2,zero,101085d8 <memchr+0x7c>
10108584:	20c00003 	ldbu	r3,0(r4)
10108588:	10bfffc4 	addi	r2,r2,-1
1010858c:	30c01426 	beq	r6,r3,101085e0 <memchr+0x84>
10108590:	21000044 	addi	r4,r4,1
10108594:	20c000cc 	andi	r3,r4,3
10108598:	183ff91e 	bne	r3,zero,10108580 <__alt_data_end+0xfffe8580>
1010859c:	020000c4 	movi	r8,3
101085a0:	40801136 	bltu	r8,r2,101085e8 <memchr+0x8c>
101085a4:	10000c26 	beq	r2,zero,101085d8 <memchr+0x7c>
101085a8:	20c00003 	ldbu	r3,0(r4)
101085ac:	29403fcc 	andi	r5,r5,255
101085b0:	28c00b26 	beq	r5,r3,101085e0 <memchr+0x84>
101085b4:	20c00044 	addi	r3,r4,1
101085b8:	39803fcc 	andi	r6,r7,255
101085bc:	2089883a 	add	r4,r4,r2
101085c0:	00000306 	br	101085d0 <memchr+0x74>
101085c4:	18c00044 	addi	r3,r3,1
101085c8:	197fffc3 	ldbu	r5,-1(r3)
101085cc:	31400526 	beq	r6,r5,101085e4 <memchr+0x88>
101085d0:	1805883a 	mov	r2,r3
101085d4:	20fffb1e 	bne	r4,r3,101085c4 <__alt_data_end+0xfffe85c4>
101085d8:	0005883a 	mov	r2,zero
101085dc:	f800283a 	ret
101085e0:	2005883a 	mov	r2,r4
101085e4:	f800283a 	ret
101085e8:	28c03fcc 	andi	r3,r5,255
101085ec:	1812923a 	slli	r9,r3,8
101085f0:	02ffbff4 	movhi	r11,65279
101085f4:	02a02074 	movhi	r10,32897
101085f8:	48d2b03a 	or	r9,r9,r3
101085fc:	4806943a 	slli	r3,r9,16
10108600:	5affbfc4 	addi	r11,r11,-257
10108604:	52a02004 	addi	r10,r10,-32640
10108608:	48d2b03a 	or	r9,r9,r3
1010860c:	20c00017 	ldw	r3,0(r4)
10108610:	48c6f03a 	xor	r3,r9,r3
10108614:	1acd883a 	add	r6,r3,r11
10108618:	00c6303a 	nor	r3,zero,r3
1010861c:	30c6703a 	and	r3,r6,r3
10108620:	1a86703a 	and	r3,r3,r10
10108624:	183fe01e 	bne	r3,zero,101085a8 <__alt_data_end+0xfffe85a8>
10108628:	10bfff04 	addi	r2,r2,-4
1010862c:	21000104 	addi	r4,r4,4
10108630:	40bff636 	bltu	r8,r2,1010860c <__alt_data_end+0xfffe860c>
10108634:	003fdb06 	br	101085a4 <__alt_data_end+0xfffe85a4>
10108638:	3005883a 	mov	r2,r6
1010863c:	003fd706 	br	1010859c <__alt_data_end+0xfffe859c>

10108640 <memcpy>:
10108640:	defffd04 	addi	sp,sp,-12
10108644:	dfc00215 	stw	ra,8(sp)
10108648:	dc400115 	stw	r17,4(sp)
1010864c:	dc000015 	stw	r16,0(sp)
10108650:	00c003c4 	movi	r3,15
10108654:	2005883a 	mov	r2,r4
10108658:	1980452e 	bgeu	r3,r6,10108770 <memcpy+0x130>
1010865c:	2906b03a 	or	r3,r5,r4
10108660:	18c000cc 	andi	r3,r3,3
10108664:	1800441e 	bne	r3,zero,10108778 <memcpy+0x138>
10108668:	347ffc04 	addi	r17,r6,-16
1010866c:	8822d13a 	srli	r17,r17,4
10108670:	28c00104 	addi	r3,r5,4
10108674:	23400104 	addi	r13,r4,4
10108678:	8820913a 	slli	r16,r17,4
1010867c:	2b000204 	addi	r12,r5,8
10108680:	22c00204 	addi	r11,r4,8
10108684:	84000504 	addi	r16,r16,20
10108688:	2a800304 	addi	r10,r5,12
1010868c:	22400304 	addi	r9,r4,12
10108690:	2c21883a 	add	r16,r5,r16
10108694:	2811883a 	mov	r8,r5
10108698:	200f883a 	mov	r7,r4
1010869c:	41000017 	ldw	r4,0(r8)
101086a0:	1fc00017 	ldw	ra,0(r3)
101086a4:	63c00017 	ldw	r15,0(r12)
101086a8:	39000015 	stw	r4,0(r7)
101086ac:	53800017 	ldw	r14,0(r10)
101086b0:	6fc00015 	stw	ra,0(r13)
101086b4:	5bc00015 	stw	r15,0(r11)
101086b8:	4b800015 	stw	r14,0(r9)
101086bc:	18c00404 	addi	r3,r3,16
101086c0:	39c00404 	addi	r7,r7,16
101086c4:	42000404 	addi	r8,r8,16
101086c8:	6b400404 	addi	r13,r13,16
101086cc:	63000404 	addi	r12,r12,16
101086d0:	5ac00404 	addi	r11,r11,16
101086d4:	52800404 	addi	r10,r10,16
101086d8:	4a400404 	addi	r9,r9,16
101086dc:	1c3fef1e 	bne	r3,r16,1010869c <__alt_data_end+0xfffe869c>
101086e0:	89c00044 	addi	r7,r17,1
101086e4:	380e913a 	slli	r7,r7,4
101086e8:	310003cc 	andi	r4,r6,15
101086ec:	02c000c4 	movi	r11,3
101086f0:	11c7883a 	add	r3,r2,r7
101086f4:	29cb883a 	add	r5,r5,r7
101086f8:	5900212e 	bgeu	r11,r4,10108780 <memcpy+0x140>
101086fc:	1813883a 	mov	r9,r3
10108700:	2811883a 	mov	r8,r5
10108704:	200f883a 	mov	r7,r4
10108708:	42800017 	ldw	r10,0(r8)
1010870c:	4a400104 	addi	r9,r9,4
10108710:	39ffff04 	addi	r7,r7,-4
10108714:	4abfff15 	stw	r10,-4(r9)
10108718:	42000104 	addi	r8,r8,4
1010871c:	59fffa36 	bltu	r11,r7,10108708 <__alt_data_end+0xfffe8708>
10108720:	213fff04 	addi	r4,r4,-4
10108724:	2008d0ba 	srli	r4,r4,2
10108728:	318000cc 	andi	r6,r6,3
1010872c:	21000044 	addi	r4,r4,1
10108730:	2109883a 	add	r4,r4,r4
10108734:	2109883a 	add	r4,r4,r4
10108738:	1907883a 	add	r3,r3,r4
1010873c:	290b883a 	add	r5,r5,r4
10108740:	30000626 	beq	r6,zero,1010875c <memcpy+0x11c>
10108744:	198d883a 	add	r6,r3,r6
10108748:	29c00003 	ldbu	r7,0(r5)
1010874c:	18c00044 	addi	r3,r3,1
10108750:	29400044 	addi	r5,r5,1
10108754:	19ffffc5 	stb	r7,-1(r3)
10108758:	19bffb1e 	bne	r3,r6,10108748 <__alt_data_end+0xfffe8748>
1010875c:	dfc00217 	ldw	ra,8(sp)
10108760:	dc400117 	ldw	r17,4(sp)
10108764:	dc000017 	ldw	r16,0(sp)
10108768:	dec00304 	addi	sp,sp,12
1010876c:	f800283a 	ret
10108770:	2007883a 	mov	r3,r4
10108774:	003ff206 	br	10108740 <__alt_data_end+0xfffe8740>
10108778:	2007883a 	mov	r3,r4
1010877c:	003ff106 	br	10108744 <__alt_data_end+0xfffe8744>
10108780:	200d883a 	mov	r6,r4
10108784:	003fee06 	br	10108740 <__alt_data_end+0xfffe8740>

10108788 <memmove>:
10108788:	2005883a 	mov	r2,r4
1010878c:	29000b2e 	bgeu	r5,r4,101087bc <memmove+0x34>
10108790:	298f883a 	add	r7,r5,r6
10108794:	21c0092e 	bgeu	r4,r7,101087bc <memmove+0x34>
10108798:	2187883a 	add	r3,r4,r6
1010879c:	198bc83a 	sub	r5,r3,r6
101087a0:	30004826 	beq	r6,zero,101088c4 <memmove+0x13c>
101087a4:	39ffffc4 	addi	r7,r7,-1
101087a8:	39000003 	ldbu	r4,0(r7)
101087ac:	18ffffc4 	addi	r3,r3,-1
101087b0:	19000005 	stb	r4,0(r3)
101087b4:	28fffb1e 	bne	r5,r3,101087a4 <__alt_data_end+0xfffe87a4>
101087b8:	f800283a 	ret
101087bc:	00c003c4 	movi	r3,15
101087c0:	1980412e 	bgeu	r3,r6,101088c8 <memmove+0x140>
101087c4:	2886b03a 	or	r3,r5,r2
101087c8:	18c000cc 	andi	r3,r3,3
101087cc:	1800401e 	bne	r3,zero,101088d0 <memmove+0x148>
101087d0:	33fffc04 	addi	r15,r6,-16
101087d4:	781ed13a 	srli	r15,r15,4
101087d8:	28c00104 	addi	r3,r5,4
101087dc:	13400104 	addi	r13,r2,4
101087e0:	781c913a 	slli	r14,r15,4
101087e4:	2b000204 	addi	r12,r5,8
101087e8:	12c00204 	addi	r11,r2,8
101087ec:	73800504 	addi	r14,r14,20
101087f0:	2a800304 	addi	r10,r5,12
101087f4:	12400304 	addi	r9,r2,12
101087f8:	2b9d883a 	add	r14,r5,r14
101087fc:	2811883a 	mov	r8,r5
10108800:	100f883a 	mov	r7,r2
10108804:	41000017 	ldw	r4,0(r8)
10108808:	39c00404 	addi	r7,r7,16
1010880c:	18c00404 	addi	r3,r3,16
10108810:	393ffc15 	stw	r4,-16(r7)
10108814:	193ffc17 	ldw	r4,-16(r3)
10108818:	6b400404 	addi	r13,r13,16
1010881c:	5ac00404 	addi	r11,r11,16
10108820:	693ffc15 	stw	r4,-16(r13)
10108824:	61000017 	ldw	r4,0(r12)
10108828:	4a400404 	addi	r9,r9,16
1010882c:	42000404 	addi	r8,r8,16
10108830:	593ffc15 	stw	r4,-16(r11)
10108834:	51000017 	ldw	r4,0(r10)
10108838:	63000404 	addi	r12,r12,16
1010883c:	52800404 	addi	r10,r10,16
10108840:	493ffc15 	stw	r4,-16(r9)
10108844:	1bbfef1e 	bne	r3,r14,10108804 <__alt_data_end+0xfffe8804>
10108848:	79000044 	addi	r4,r15,1
1010884c:	2008913a 	slli	r4,r4,4
10108850:	328003cc 	andi	r10,r6,15
10108854:	02c000c4 	movi	r11,3
10108858:	1107883a 	add	r3,r2,r4
1010885c:	290b883a 	add	r5,r5,r4
10108860:	5a801e2e 	bgeu	r11,r10,101088dc <memmove+0x154>
10108864:	1813883a 	mov	r9,r3
10108868:	2811883a 	mov	r8,r5
1010886c:	500f883a 	mov	r7,r10
10108870:	41000017 	ldw	r4,0(r8)
10108874:	4a400104 	addi	r9,r9,4
10108878:	39ffff04 	addi	r7,r7,-4
1010887c:	493fff15 	stw	r4,-4(r9)
10108880:	42000104 	addi	r8,r8,4
10108884:	59fffa36 	bltu	r11,r7,10108870 <__alt_data_end+0xfffe8870>
10108888:	513fff04 	addi	r4,r10,-4
1010888c:	2008d0ba 	srli	r4,r4,2
10108890:	318000cc 	andi	r6,r6,3
10108894:	21000044 	addi	r4,r4,1
10108898:	2109883a 	add	r4,r4,r4
1010889c:	2109883a 	add	r4,r4,r4
101088a0:	1907883a 	add	r3,r3,r4
101088a4:	290b883a 	add	r5,r5,r4
101088a8:	30000b26 	beq	r6,zero,101088d8 <memmove+0x150>
101088ac:	198d883a 	add	r6,r3,r6
101088b0:	29c00003 	ldbu	r7,0(r5)
101088b4:	18c00044 	addi	r3,r3,1
101088b8:	29400044 	addi	r5,r5,1
101088bc:	19ffffc5 	stb	r7,-1(r3)
101088c0:	19bffb1e 	bne	r3,r6,101088b0 <__alt_data_end+0xfffe88b0>
101088c4:	f800283a 	ret
101088c8:	1007883a 	mov	r3,r2
101088cc:	003ff606 	br	101088a8 <__alt_data_end+0xfffe88a8>
101088d0:	1007883a 	mov	r3,r2
101088d4:	003ff506 	br	101088ac <__alt_data_end+0xfffe88ac>
101088d8:	f800283a 	ret
101088dc:	500d883a 	mov	r6,r10
101088e0:	003ff106 	br	101088a8 <__alt_data_end+0xfffe88a8>

101088e4 <_Balloc>:
101088e4:	20801317 	ldw	r2,76(r4)
101088e8:	defffc04 	addi	sp,sp,-16
101088ec:	dc400115 	stw	r17,4(sp)
101088f0:	dc000015 	stw	r16,0(sp)
101088f4:	dfc00315 	stw	ra,12(sp)
101088f8:	dc800215 	stw	r18,8(sp)
101088fc:	2023883a 	mov	r17,r4
10108900:	2821883a 	mov	r16,r5
10108904:	10000f26 	beq	r2,zero,10108944 <_Balloc+0x60>
10108908:	8407883a 	add	r3,r16,r16
1010890c:	18c7883a 	add	r3,r3,r3
10108910:	10c7883a 	add	r3,r2,r3
10108914:	18800017 	ldw	r2,0(r3)
10108918:	10001126 	beq	r2,zero,10108960 <_Balloc+0x7c>
1010891c:	11000017 	ldw	r4,0(r2)
10108920:	19000015 	stw	r4,0(r3)
10108924:	10000415 	stw	zero,16(r2)
10108928:	10000315 	stw	zero,12(r2)
1010892c:	dfc00317 	ldw	ra,12(sp)
10108930:	dc800217 	ldw	r18,8(sp)
10108934:	dc400117 	ldw	r17,4(sp)
10108938:	dc000017 	ldw	r16,0(sp)
1010893c:	dec00404 	addi	sp,sp,16
10108940:	f800283a 	ret
10108944:	01800844 	movi	r6,33
10108948:	01400104 	movi	r5,4
1010894c:	010b63c0 	call	1010b63c <_calloc_r>
10108950:	88801315 	stw	r2,76(r17)
10108954:	103fec1e 	bne	r2,zero,10108908 <__alt_data_end+0xfffe8908>
10108958:	0005883a 	mov	r2,zero
1010895c:	003ff306 	br	1010892c <__alt_data_end+0xfffe892c>
10108960:	01400044 	movi	r5,1
10108964:	2c24983a 	sll	r18,r5,r16
10108968:	8809883a 	mov	r4,r17
1010896c:	91800144 	addi	r6,r18,5
10108970:	318d883a 	add	r6,r6,r6
10108974:	318d883a 	add	r6,r6,r6
10108978:	010b63c0 	call	1010b63c <_calloc_r>
1010897c:	103ff626 	beq	r2,zero,10108958 <__alt_data_end+0xfffe8958>
10108980:	14000115 	stw	r16,4(r2)
10108984:	14800215 	stw	r18,8(r2)
10108988:	003fe606 	br	10108924 <__alt_data_end+0xfffe8924>

1010898c <_Bfree>:
1010898c:	28000826 	beq	r5,zero,101089b0 <_Bfree+0x24>
10108990:	28c00117 	ldw	r3,4(r5)
10108994:	20801317 	ldw	r2,76(r4)
10108998:	18c7883a 	add	r3,r3,r3
1010899c:	18c7883a 	add	r3,r3,r3
101089a0:	10c5883a 	add	r2,r2,r3
101089a4:	10c00017 	ldw	r3,0(r2)
101089a8:	28c00015 	stw	r3,0(r5)
101089ac:	11400015 	stw	r5,0(r2)
101089b0:	f800283a 	ret

101089b4 <__multadd>:
101089b4:	defffa04 	addi	sp,sp,-24
101089b8:	dc800315 	stw	r18,12(sp)
101089bc:	dc400215 	stw	r17,8(sp)
101089c0:	dc000115 	stw	r16,4(sp)
101089c4:	2823883a 	mov	r17,r5
101089c8:	2c000417 	ldw	r16,16(r5)
101089cc:	dfc00515 	stw	ra,20(sp)
101089d0:	dcc00415 	stw	r19,16(sp)
101089d4:	2025883a 	mov	r18,r4
101089d8:	29400504 	addi	r5,r5,20
101089dc:	0011883a 	mov	r8,zero
101089e0:	28c00017 	ldw	r3,0(r5)
101089e4:	29400104 	addi	r5,r5,4
101089e8:	42000044 	addi	r8,r8,1
101089ec:	18bfffcc 	andi	r2,r3,65535
101089f0:	1185383a 	mul	r2,r2,r6
101089f4:	1806d43a 	srli	r3,r3,16
101089f8:	11cf883a 	add	r7,r2,r7
101089fc:	3808d43a 	srli	r4,r7,16
10108a00:	1987383a 	mul	r3,r3,r6
10108a04:	38bfffcc 	andi	r2,r7,65535
10108a08:	1907883a 	add	r3,r3,r4
10108a0c:	1808943a 	slli	r4,r3,16
10108a10:	180ed43a 	srli	r7,r3,16
10108a14:	2085883a 	add	r2,r4,r2
10108a18:	28bfff15 	stw	r2,-4(r5)
10108a1c:	443ff016 	blt	r8,r16,101089e0 <__alt_data_end+0xfffe89e0>
10108a20:	38000926 	beq	r7,zero,10108a48 <__multadd+0x94>
10108a24:	88800217 	ldw	r2,8(r17)
10108a28:	80800f0e 	bge	r16,r2,10108a68 <__multadd+0xb4>
10108a2c:	80800144 	addi	r2,r16,5
10108a30:	1085883a 	add	r2,r2,r2
10108a34:	1085883a 	add	r2,r2,r2
10108a38:	8885883a 	add	r2,r17,r2
10108a3c:	11c00015 	stw	r7,0(r2)
10108a40:	84000044 	addi	r16,r16,1
10108a44:	8c000415 	stw	r16,16(r17)
10108a48:	8805883a 	mov	r2,r17
10108a4c:	dfc00517 	ldw	ra,20(sp)
10108a50:	dcc00417 	ldw	r19,16(sp)
10108a54:	dc800317 	ldw	r18,12(sp)
10108a58:	dc400217 	ldw	r17,8(sp)
10108a5c:	dc000117 	ldw	r16,4(sp)
10108a60:	dec00604 	addi	sp,sp,24
10108a64:	f800283a 	ret
10108a68:	89400117 	ldw	r5,4(r17)
10108a6c:	9009883a 	mov	r4,r18
10108a70:	d9c00015 	stw	r7,0(sp)
10108a74:	29400044 	addi	r5,r5,1
10108a78:	01088e40 	call	101088e4 <_Balloc>
10108a7c:	89800417 	ldw	r6,16(r17)
10108a80:	89400304 	addi	r5,r17,12
10108a84:	11000304 	addi	r4,r2,12
10108a88:	31800084 	addi	r6,r6,2
10108a8c:	318d883a 	add	r6,r6,r6
10108a90:	318d883a 	add	r6,r6,r6
10108a94:	1027883a 	mov	r19,r2
10108a98:	01086400 	call	10108640 <memcpy>
10108a9c:	d9c00017 	ldw	r7,0(sp)
10108aa0:	88000a26 	beq	r17,zero,10108acc <__multadd+0x118>
10108aa4:	88c00117 	ldw	r3,4(r17)
10108aa8:	90801317 	ldw	r2,76(r18)
10108aac:	18c7883a 	add	r3,r3,r3
10108ab0:	18c7883a 	add	r3,r3,r3
10108ab4:	10c5883a 	add	r2,r2,r3
10108ab8:	10c00017 	ldw	r3,0(r2)
10108abc:	88c00015 	stw	r3,0(r17)
10108ac0:	14400015 	stw	r17,0(r2)
10108ac4:	9823883a 	mov	r17,r19
10108ac8:	003fd806 	br	10108a2c <__alt_data_end+0xfffe8a2c>
10108acc:	9823883a 	mov	r17,r19
10108ad0:	003fd606 	br	10108a2c <__alt_data_end+0xfffe8a2c>

10108ad4 <__s2b>:
10108ad4:	defff904 	addi	sp,sp,-28
10108ad8:	dc400115 	stw	r17,4(sp)
10108adc:	dc000015 	stw	r16,0(sp)
10108ae0:	2023883a 	mov	r17,r4
10108ae4:	2821883a 	mov	r16,r5
10108ae8:	39000204 	addi	r4,r7,8
10108aec:	01400244 	movi	r5,9
10108af0:	dcc00315 	stw	r19,12(sp)
10108af4:	dc800215 	stw	r18,8(sp)
10108af8:	dfc00615 	stw	ra,24(sp)
10108afc:	dd400515 	stw	r21,20(sp)
10108b00:	dd000415 	stw	r20,16(sp)
10108b04:	3825883a 	mov	r18,r7
10108b08:	3027883a 	mov	r19,r6
10108b0c:	0101a6c0 	call	10101a6c <__divsi3>
10108b10:	00c00044 	movi	r3,1
10108b14:	000b883a 	mov	r5,zero
10108b18:	1880030e 	bge	r3,r2,10108b28 <__s2b+0x54>
10108b1c:	18c7883a 	add	r3,r3,r3
10108b20:	29400044 	addi	r5,r5,1
10108b24:	18bffd16 	blt	r3,r2,10108b1c <__alt_data_end+0xfffe8b1c>
10108b28:	8809883a 	mov	r4,r17
10108b2c:	01088e40 	call	101088e4 <_Balloc>
10108b30:	d8c00717 	ldw	r3,28(sp)
10108b34:	10c00515 	stw	r3,20(r2)
10108b38:	00c00044 	movi	r3,1
10108b3c:	10c00415 	stw	r3,16(r2)
10108b40:	00c00244 	movi	r3,9
10108b44:	1cc0210e 	bge	r3,r19,10108bcc <__s2b+0xf8>
10108b48:	80eb883a 	add	r21,r16,r3
10108b4c:	a829883a 	mov	r20,r21
10108b50:	84e1883a 	add	r16,r16,r19
10108b54:	a1c00007 	ldb	r7,0(r20)
10108b58:	01800284 	movi	r6,10
10108b5c:	a5000044 	addi	r20,r20,1
10108b60:	100b883a 	mov	r5,r2
10108b64:	39fff404 	addi	r7,r7,-48
10108b68:	8809883a 	mov	r4,r17
10108b6c:	01089b40 	call	101089b4 <__multadd>
10108b70:	a43ff81e 	bne	r20,r16,10108b54 <__alt_data_end+0xfffe8b54>
10108b74:	ace1883a 	add	r16,r21,r19
10108b78:	843ffe04 	addi	r16,r16,-8
10108b7c:	9c800a0e 	bge	r19,r18,10108ba8 <__s2b+0xd4>
10108b80:	94e5c83a 	sub	r18,r18,r19
10108b84:	84a5883a 	add	r18,r16,r18
10108b88:	81c00007 	ldb	r7,0(r16)
10108b8c:	01800284 	movi	r6,10
10108b90:	84000044 	addi	r16,r16,1
10108b94:	100b883a 	mov	r5,r2
10108b98:	39fff404 	addi	r7,r7,-48
10108b9c:	8809883a 	mov	r4,r17
10108ba0:	01089b40 	call	101089b4 <__multadd>
10108ba4:	84bff81e 	bne	r16,r18,10108b88 <__alt_data_end+0xfffe8b88>
10108ba8:	dfc00617 	ldw	ra,24(sp)
10108bac:	dd400517 	ldw	r21,20(sp)
10108bb0:	dd000417 	ldw	r20,16(sp)
10108bb4:	dcc00317 	ldw	r19,12(sp)
10108bb8:	dc800217 	ldw	r18,8(sp)
10108bbc:	dc400117 	ldw	r17,4(sp)
10108bc0:	dc000017 	ldw	r16,0(sp)
10108bc4:	dec00704 	addi	sp,sp,28
10108bc8:	f800283a 	ret
10108bcc:	84000284 	addi	r16,r16,10
10108bd0:	1827883a 	mov	r19,r3
10108bd4:	003fe906 	br	10108b7c <__alt_data_end+0xfffe8b7c>

10108bd8 <__hi0bits>:
10108bd8:	20bfffec 	andhi	r2,r4,65535
10108bdc:	1000141e 	bne	r2,zero,10108c30 <__hi0bits+0x58>
10108be0:	2008943a 	slli	r4,r4,16
10108be4:	00800404 	movi	r2,16
10108be8:	20ffc02c 	andhi	r3,r4,65280
10108bec:	1800021e 	bne	r3,zero,10108bf8 <__hi0bits+0x20>
10108bf0:	2008923a 	slli	r4,r4,8
10108bf4:	10800204 	addi	r2,r2,8
10108bf8:	20fc002c 	andhi	r3,r4,61440
10108bfc:	1800021e 	bne	r3,zero,10108c08 <__hi0bits+0x30>
10108c00:	2008913a 	slli	r4,r4,4
10108c04:	10800104 	addi	r2,r2,4
10108c08:	20f0002c 	andhi	r3,r4,49152
10108c0c:	1800031e 	bne	r3,zero,10108c1c <__hi0bits+0x44>
10108c10:	2109883a 	add	r4,r4,r4
10108c14:	10800084 	addi	r2,r2,2
10108c18:	2109883a 	add	r4,r4,r4
10108c1c:	20000316 	blt	r4,zero,10108c2c <__hi0bits+0x54>
10108c20:	2110002c 	andhi	r4,r4,16384
10108c24:	2000041e 	bne	r4,zero,10108c38 <__hi0bits+0x60>
10108c28:	00800804 	movi	r2,32
10108c2c:	f800283a 	ret
10108c30:	0005883a 	mov	r2,zero
10108c34:	003fec06 	br	10108be8 <__alt_data_end+0xfffe8be8>
10108c38:	10800044 	addi	r2,r2,1
10108c3c:	f800283a 	ret

10108c40 <__lo0bits>:
10108c40:	20c00017 	ldw	r3,0(r4)
10108c44:	188001cc 	andi	r2,r3,7
10108c48:	10000826 	beq	r2,zero,10108c6c <__lo0bits+0x2c>
10108c4c:	1880004c 	andi	r2,r3,1
10108c50:	1000211e 	bne	r2,zero,10108cd8 <__lo0bits+0x98>
10108c54:	1880008c 	andi	r2,r3,2
10108c58:	1000211e 	bne	r2,zero,10108ce0 <__lo0bits+0xa0>
10108c5c:	1806d0ba 	srli	r3,r3,2
10108c60:	00800084 	movi	r2,2
10108c64:	20c00015 	stw	r3,0(r4)
10108c68:	f800283a 	ret
10108c6c:	18bfffcc 	andi	r2,r3,65535
10108c70:	10001326 	beq	r2,zero,10108cc0 <__lo0bits+0x80>
10108c74:	0005883a 	mov	r2,zero
10108c78:	19403fcc 	andi	r5,r3,255
10108c7c:	2800021e 	bne	r5,zero,10108c88 <__lo0bits+0x48>
10108c80:	1806d23a 	srli	r3,r3,8
10108c84:	10800204 	addi	r2,r2,8
10108c88:	194003cc 	andi	r5,r3,15
10108c8c:	2800021e 	bne	r5,zero,10108c98 <__lo0bits+0x58>
10108c90:	1806d13a 	srli	r3,r3,4
10108c94:	10800104 	addi	r2,r2,4
10108c98:	194000cc 	andi	r5,r3,3
10108c9c:	2800021e 	bne	r5,zero,10108ca8 <__lo0bits+0x68>
10108ca0:	1806d0ba 	srli	r3,r3,2
10108ca4:	10800084 	addi	r2,r2,2
10108ca8:	1940004c 	andi	r5,r3,1
10108cac:	2800081e 	bne	r5,zero,10108cd0 <__lo0bits+0x90>
10108cb0:	1806d07a 	srli	r3,r3,1
10108cb4:	1800051e 	bne	r3,zero,10108ccc <__lo0bits+0x8c>
10108cb8:	00800804 	movi	r2,32
10108cbc:	f800283a 	ret
10108cc0:	1806d43a 	srli	r3,r3,16
10108cc4:	00800404 	movi	r2,16
10108cc8:	003feb06 	br	10108c78 <__alt_data_end+0xfffe8c78>
10108ccc:	10800044 	addi	r2,r2,1
10108cd0:	20c00015 	stw	r3,0(r4)
10108cd4:	f800283a 	ret
10108cd8:	0005883a 	mov	r2,zero
10108cdc:	f800283a 	ret
10108ce0:	1806d07a 	srli	r3,r3,1
10108ce4:	00800044 	movi	r2,1
10108ce8:	20c00015 	stw	r3,0(r4)
10108cec:	f800283a 	ret

10108cf0 <__i2b>:
10108cf0:	defffd04 	addi	sp,sp,-12
10108cf4:	dc000015 	stw	r16,0(sp)
10108cf8:	04000044 	movi	r16,1
10108cfc:	dc400115 	stw	r17,4(sp)
10108d00:	2823883a 	mov	r17,r5
10108d04:	800b883a 	mov	r5,r16
10108d08:	dfc00215 	stw	ra,8(sp)
10108d0c:	01088e40 	call	101088e4 <_Balloc>
10108d10:	14400515 	stw	r17,20(r2)
10108d14:	14000415 	stw	r16,16(r2)
10108d18:	dfc00217 	ldw	ra,8(sp)
10108d1c:	dc400117 	ldw	r17,4(sp)
10108d20:	dc000017 	ldw	r16,0(sp)
10108d24:	dec00304 	addi	sp,sp,12
10108d28:	f800283a 	ret

10108d2c <__multiply>:
10108d2c:	defffa04 	addi	sp,sp,-24
10108d30:	dcc00315 	stw	r19,12(sp)
10108d34:	dc800215 	stw	r18,8(sp)
10108d38:	34c00417 	ldw	r19,16(r6)
10108d3c:	2c800417 	ldw	r18,16(r5)
10108d40:	dd000415 	stw	r20,16(sp)
10108d44:	dc400115 	stw	r17,4(sp)
10108d48:	dfc00515 	stw	ra,20(sp)
10108d4c:	dc000015 	stw	r16,0(sp)
10108d50:	2829883a 	mov	r20,r5
10108d54:	3023883a 	mov	r17,r6
10108d58:	94c0050e 	bge	r18,r19,10108d70 <__multiply+0x44>
10108d5c:	9007883a 	mov	r3,r18
10108d60:	3029883a 	mov	r20,r6
10108d64:	9825883a 	mov	r18,r19
10108d68:	2823883a 	mov	r17,r5
10108d6c:	1827883a 	mov	r19,r3
10108d70:	a0800217 	ldw	r2,8(r20)
10108d74:	94e1883a 	add	r16,r18,r19
10108d78:	a1400117 	ldw	r5,4(r20)
10108d7c:	1400010e 	bge	r2,r16,10108d84 <__multiply+0x58>
10108d80:	29400044 	addi	r5,r5,1
10108d84:	01088e40 	call	101088e4 <_Balloc>
10108d88:	8415883a 	add	r10,r16,r16
10108d8c:	12c00504 	addi	r11,r2,20
10108d90:	5295883a 	add	r10,r10,r10
10108d94:	5a95883a 	add	r10,r11,r10
10108d98:	5807883a 	mov	r3,r11
10108d9c:	5a80032e 	bgeu	r11,r10,10108dac <__multiply+0x80>
10108da0:	18000015 	stw	zero,0(r3)
10108da4:	18c00104 	addi	r3,r3,4
10108da8:	1abffd36 	bltu	r3,r10,10108da0 <__alt_data_end+0xfffe8da0>
10108dac:	9ce7883a 	add	r19,r19,r19
10108db0:	94a5883a 	add	r18,r18,r18
10108db4:	89800504 	addi	r6,r17,20
10108db8:	9ce7883a 	add	r19,r19,r19
10108dbc:	a3400504 	addi	r13,r20,20
10108dc0:	94a5883a 	add	r18,r18,r18
10108dc4:	34d9883a 	add	r12,r6,r19
10108dc8:	6c93883a 	add	r9,r13,r18
10108dcc:	3300422e 	bgeu	r6,r12,10108ed8 <__multiply+0x1ac>
10108dd0:	37c00017 	ldw	ra,0(r6)
10108dd4:	fbffffcc 	andi	r15,ra,65535
10108dd8:	78001b26 	beq	r15,zero,10108e48 <__multiply+0x11c>
10108ddc:	5811883a 	mov	r8,r11
10108de0:	681d883a 	mov	r14,r13
10108de4:	000f883a 	mov	r7,zero
10108de8:	71000017 	ldw	r4,0(r14)
10108dec:	40c00017 	ldw	r3,0(r8)
10108df0:	73800104 	addi	r14,r14,4
10108df4:	217fffcc 	andi	r5,r4,65535
10108df8:	2bcb383a 	mul	r5,r5,r15
10108dfc:	2008d43a 	srli	r4,r4,16
10108e00:	1c7fffcc 	andi	r17,r3,65535
10108e04:	2c4b883a 	add	r5,r5,r17
10108e08:	29cb883a 	add	r5,r5,r7
10108e0c:	23c9383a 	mul	r4,r4,r15
10108e10:	1806d43a 	srli	r3,r3,16
10108e14:	280ed43a 	srli	r7,r5,16
10108e18:	297fffcc 	andi	r5,r5,65535
10108e1c:	20c7883a 	add	r3,r4,r3
10108e20:	19c7883a 	add	r3,r3,r7
10108e24:	1808943a 	slli	r4,r3,16
10108e28:	4023883a 	mov	r17,r8
10108e2c:	180ed43a 	srli	r7,r3,16
10108e30:	214ab03a 	or	r5,r4,r5
10108e34:	41400015 	stw	r5,0(r8)
10108e38:	42000104 	addi	r8,r8,4
10108e3c:	727fea36 	bltu	r14,r9,10108de8 <__alt_data_end+0xfffe8de8>
10108e40:	89c00115 	stw	r7,4(r17)
10108e44:	37c00017 	ldw	ra,0(r6)
10108e48:	f83ed43a 	srli	ra,ra,16
10108e4c:	f8001f26 	beq	ra,zero,10108ecc <__multiply+0x1a0>
10108e50:	58c00017 	ldw	r3,0(r11)
10108e54:	681d883a 	mov	r14,r13
10108e58:	581f883a 	mov	r15,r11
10108e5c:	1811883a 	mov	r8,r3
10108e60:	5825883a 	mov	r18,r11
10108e64:	000f883a 	mov	r7,zero
10108e68:	00000106 	br	10108e70 <__multiply+0x144>
10108e6c:	8825883a 	mov	r18,r17
10108e70:	7140000b 	ldhu	r5,0(r14)
10108e74:	4010d43a 	srli	r8,r8,16
10108e78:	193fffcc 	andi	r4,r3,65535
10108e7c:	2fcb383a 	mul	r5,r5,ra
10108e80:	7bc00104 	addi	r15,r15,4
10108e84:	73800104 	addi	r14,r14,4
10108e88:	2a0b883a 	add	r5,r5,r8
10108e8c:	29cb883a 	add	r5,r5,r7
10108e90:	2806943a 	slli	r3,r5,16
10108e94:	94400104 	addi	r17,r18,4
10108e98:	280ad43a 	srli	r5,r5,16
10108e9c:	1908b03a 	or	r4,r3,r4
10108ea0:	793fff15 	stw	r4,-4(r15)
10108ea4:	70ffff17 	ldw	r3,-4(r14)
10108ea8:	8a000017 	ldw	r8,0(r17)
10108eac:	1806d43a 	srli	r3,r3,16
10108eb0:	413fffcc 	andi	r4,r8,65535
10108eb4:	1fc7383a 	mul	r3,r3,ra
10108eb8:	1907883a 	add	r3,r3,r4
10108ebc:	1947883a 	add	r3,r3,r5
10108ec0:	180ed43a 	srli	r7,r3,16
10108ec4:	727fe936 	bltu	r14,r9,10108e6c <__alt_data_end+0xfffe8e6c>
10108ec8:	90c00115 	stw	r3,4(r18)
10108ecc:	31800104 	addi	r6,r6,4
10108ed0:	5ac00104 	addi	r11,r11,4
10108ed4:	333fbe36 	bltu	r6,r12,10108dd0 <__alt_data_end+0xfffe8dd0>
10108ed8:	0400090e 	bge	zero,r16,10108f00 <__multiply+0x1d4>
10108edc:	50ffff17 	ldw	r3,-4(r10)
10108ee0:	52bfff04 	addi	r10,r10,-4
10108ee4:	18000326 	beq	r3,zero,10108ef4 <__multiply+0x1c8>
10108ee8:	00000506 	br	10108f00 <__multiply+0x1d4>
10108eec:	50c00017 	ldw	r3,0(r10)
10108ef0:	1800031e 	bne	r3,zero,10108f00 <__multiply+0x1d4>
10108ef4:	843fffc4 	addi	r16,r16,-1
10108ef8:	52bfff04 	addi	r10,r10,-4
10108efc:	803ffb1e 	bne	r16,zero,10108eec <__alt_data_end+0xfffe8eec>
10108f00:	14000415 	stw	r16,16(r2)
10108f04:	dfc00517 	ldw	ra,20(sp)
10108f08:	dd000417 	ldw	r20,16(sp)
10108f0c:	dcc00317 	ldw	r19,12(sp)
10108f10:	dc800217 	ldw	r18,8(sp)
10108f14:	dc400117 	ldw	r17,4(sp)
10108f18:	dc000017 	ldw	r16,0(sp)
10108f1c:	dec00604 	addi	sp,sp,24
10108f20:	f800283a 	ret

10108f24 <__pow5mult>:
10108f24:	defffa04 	addi	sp,sp,-24
10108f28:	dcc00315 	stw	r19,12(sp)
10108f2c:	dc000015 	stw	r16,0(sp)
10108f30:	dfc00515 	stw	ra,20(sp)
10108f34:	dd000415 	stw	r20,16(sp)
10108f38:	dc800215 	stw	r18,8(sp)
10108f3c:	dc400115 	stw	r17,4(sp)
10108f40:	308000cc 	andi	r2,r6,3
10108f44:	3021883a 	mov	r16,r6
10108f48:	2027883a 	mov	r19,r4
10108f4c:	10002f1e 	bne	r2,zero,1010900c <__pow5mult+0xe8>
10108f50:	2825883a 	mov	r18,r5
10108f54:	8021d0ba 	srai	r16,r16,2
10108f58:	80001a26 	beq	r16,zero,10108fc4 <__pow5mult+0xa0>
10108f5c:	9c401217 	ldw	r17,72(r19)
10108f60:	8800061e 	bne	r17,zero,10108f7c <__pow5mult+0x58>
10108f64:	00003406 	br	10109038 <__pow5mult+0x114>
10108f68:	8021d07a 	srai	r16,r16,1
10108f6c:	80001526 	beq	r16,zero,10108fc4 <__pow5mult+0xa0>
10108f70:	88800017 	ldw	r2,0(r17)
10108f74:	10001c26 	beq	r2,zero,10108fe8 <__pow5mult+0xc4>
10108f78:	1023883a 	mov	r17,r2
10108f7c:	8080004c 	andi	r2,r16,1
10108f80:	103ff926 	beq	r2,zero,10108f68 <__alt_data_end+0xfffe8f68>
10108f84:	880d883a 	mov	r6,r17
10108f88:	900b883a 	mov	r5,r18
10108f8c:	9809883a 	mov	r4,r19
10108f90:	0108d2c0 	call	10108d2c <__multiply>
10108f94:	90001b26 	beq	r18,zero,10109004 <__pow5mult+0xe0>
10108f98:	91000117 	ldw	r4,4(r18)
10108f9c:	98c01317 	ldw	r3,76(r19)
10108fa0:	8021d07a 	srai	r16,r16,1
10108fa4:	2109883a 	add	r4,r4,r4
10108fa8:	2109883a 	add	r4,r4,r4
10108fac:	1907883a 	add	r3,r3,r4
10108fb0:	19000017 	ldw	r4,0(r3)
10108fb4:	91000015 	stw	r4,0(r18)
10108fb8:	1c800015 	stw	r18,0(r3)
10108fbc:	1025883a 	mov	r18,r2
10108fc0:	803feb1e 	bne	r16,zero,10108f70 <__alt_data_end+0xfffe8f70>
10108fc4:	9005883a 	mov	r2,r18
10108fc8:	dfc00517 	ldw	ra,20(sp)
10108fcc:	dd000417 	ldw	r20,16(sp)
10108fd0:	dcc00317 	ldw	r19,12(sp)
10108fd4:	dc800217 	ldw	r18,8(sp)
10108fd8:	dc400117 	ldw	r17,4(sp)
10108fdc:	dc000017 	ldw	r16,0(sp)
10108fe0:	dec00604 	addi	sp,sp,24
10108fe4:	f800283a 	ret
10108fe8:	880d883a 	mov	r6,r17
10108fec:	880b883a 	mov	r5,r17
10108ff0:	9809883a 	mov	r4,r19
10108ff4:	0108d2c0 	call	10108d2c <__multiply>
10108ff8:	88800015 	stw	r2,0(r17)
10108ffc:	10000015 	stw	zero,0(r2)
10109000:	003fdd06 	br	10108f78 <__alt_data_end+0xfffe8f78>
10109004:	1025883a 	mov	r18,r2
10109008:	003fd706 	br	10108f68 <__alt_data_end+0xfffe8f68>
1010900c:	10bfffc4 	addi	r2,r2,-1
10109010:	1085883a 	add	r2,r2,r2
10109014:	00c40474 	movhi	r3,4113
10109018:	18c5a704 	addi	r3,r3,5788
1010901c:	1085883a 	add	r2,r2,r2
10109020:	1885883a 	add	r2,r3,r2
10109024:	11800017 	ldw	r6,0(r2)
10109028:	000f883a 	mov	r7,zero
1010902c:	01089b40 	call	101089b4 <__multadd>
10109030:	1025883a 	mov	r18,r2
10109034:	003fc706 	br	10108f54 <__alt_data_end+0xfffe8f54>
10109038:	05000044 	movi	r20,1
1010903c:	a00b883a 	mov	r5,r20
10109040:	9809883a 	mov	r4,r19
10109044:	01088e40 	call	101088e4 <_Balloc>
10109048:	1023883a 	mov	r17,r2
1010904c:	00809c44 	movi	r2,625
10109050:	88800515 	stw	r2,20(r17)
10109054:	8d000415 	stw	r20,16(r17)
10109058:	9c401215 	stw	r17,72(r19)
1010905c:	88000015 	stw	zero,0(r17)
10109060:	003fc606 	br	10108f7c <__alt_data_end+0xfffe8f7c>

10109064 <__lshift>:
10109064:	defff904 	addi	sp,sp,-28
10109068:	dd400515 	stw	r21,20(sp)
1010906c:	dcc00315 	stw	r19,12(sp)
10109070:	302bd17a 	srai	r21,r6,5
10109074:	2cc00417 	ldw	r19,16(r5)
10109078:	28800217 	ldw	r2,8(r5)
1010907c:	dd000415 	stw	r20,16(sp)
10109080:	ace7883a 	add	r19,r21,r19
10109084:	dc800215 	stw	r18,8(sp)
10109088:	dc400115 	stw	r17,4(sp)
1010908c:	dc000015 	stw	r16,0(sp)
10109090:	dfc00615 	stw	ra,24(sp)
10109094:	9c000044 	addi	r16,r19,1
10109098:	2823883a 	mov	r17,r5
1010909c:	3029883a 	mov	r20,r6
101090a0:	2025883a 	mov	r18,r4
101090a4:	29400117 	ldw	r5,4(r5)
101090a8:	1400030e 	bge	r2,r16,101090b8 <__lshift+0x54>
101090ac:	1085883a 	add	r2,r2,r2
101090b0:	29400044 	addi	r5,r5,1
101090b4:	143ffd16 	blt	r2,r16,101090ac <__alt_data_end+0xfffe90ac>
101090b8:	9009883a 	mov	r4,r18
101090bc:	01088e40 	call	101088e4 <_Balloc>
101090c0:	10c00504 	addi	r3,r2,20
101090c4:	0540070e 	bge	zero,r21,101090e4 <__lshift+0x80>
101090c8:	ad6b883a 	add	r21,r21,r21
101090cc:	ad6b883a 	add	r21,r21,r21
101090d0:	1809883a 	mov	r4,r3
101090d4:	1d47883a 	add	r3,r3,r21
101090d8:	20000015 	stw	zero,0(r4)
101090dc:	21000104 	addi	r4,r4,4
101090e0:	193ffd1e 	bne	r3,r4,101090d8 <__alt_data_end+0xfffe90d8>
101090e4:	8a000417 	ldw	r8,16(r17)
101090e8:	89000504 	addi	r4,r17,20
101090ec:	a18007cc 	andi	r6,r20,31
101090f0:	4211883a 	add	r8,r8,r8
101090f4:	4211883a 	add	r8,r8,r8
101090f8:	2211883a 	add	r8,r4,r8
101090fc:	30002326 	beq	r6,zero,1010918c <__lshift+0x128>
10109100:	02400804 	movi	r9,32
10109104:	4993c83a 	sub	r9,r9,r6
10109108:	000b883a 	mov	r5,zero
1010910c:	21c00017 	ldw	r7,0(r4)
10109110:	1815883a 	mov	r10,r3
10109114:	18c00104 	addi	r3,r3,4
10109118:	398e983a 	sll	r7,r7,r6
1010911c:	21000104 	addi	r4,r4,4
10109120:	394ab03a 	or	r5,r7,r5
10109124:	197fff15 	stw	r5,-4(r3)
10109128:	217fff17 	ldw	r5,-4(r4)
1010912c:	2a4ad83a 	srl	r5,r5,r9
10109130:	223ff636 	bltu	r4,r8,1010910c <__alt_data_end+0xfffe910c>
10109134:	51400115 	stw	r5,4(r10)
10109138:	28001a1e 	bne	r5,zero,101091a4 <__lshift+0x140>
1010913c:	843fffc4 	addi	r16,r16,-1
10109140:	14000415 	stw	r16,16(r2)
10109144:	88000826 	beq	r17,zero,10109168 <__lshift+0x104>
10109148:	89000117 	ldw	r4,4(r17)
1010914c:	90c01317 	ldw	r3,76(r18)
10109150:	2109883a 	add	r4,r4,r4
10109154:	2109883a 	add	r4,r4,r4
10109158:	1907883a 	add	r3,r3,r4
1010915c:	19000017 	ldw	r4,0(r3)
10109160:	89000015 	stw	r4,0(r17)
10109164:	1c400015 	stw	r17,0(r3)
10109168:	dfc00617 	ldw	ra,24(sp)
1010916c:	dd400517 	ldw	r21,20(sp)
10109170:	dd000417 	ldw	r20,16(sp)
10109174:	dcc00317 	ldw	r19,12(sp)
10109178:	dc800217 	ldw	r18,8(sp)
1010917c:	dc400117 	ldw	r17,4(sp)
10109180:	dc000017 	ldw	r16,0(sp)
10109184:	dec00704 	addi	sp,sp,28
10109188:	f800283a 	ret
1010918c:	21400017 	ldw	r5,0(r4)
10109190:	18c00104 	addi	r3,r3,4
10109194:	21000104 	addi	r4,r4,4
10109198:	197fff15 	stw	r5,-4(r3)
1010919c:	223ffb36 	bltu	r4,r8,1010918c <__alt_data_end+0xfffe918c>
101091a0:	003fe606 	br	1010913c <__alt_data_end+0xfffe913c>
101091a4:	9c000084 	addi	r16,r19,2
101091a8:	003fe406 	br	1010913c <__alt_data_end+0xfffe913c>

101091ac <__mcmp>:
101091ac:	20800417 	ldw	r2,16(r4)
101091b0:	28c00417 	ldw	r3,16(r5)
101091b4:	10c5c83a 	sub	r2,r2,r3
101091b8:	1000111e 	bne	r2,zero,10109200 <__mcmp+0x54>
101091bc:	18c7883a 	add	r3,r3,r3
101091c0:	18c7883a 	add	r3,r3,r3
101091c4:	21000504 	addi	r4,r4,20
101091c8:	29400504 	addi	r5,r5,20
101091cc:	20c5883a 	add	r2,r4,r3
101091d0:	28cb883a 	add	r5,r5,r3
101091d4:	00000106 	br	101091dc <__mcmp+0x30>
101091d8:	20800a2e 	bgeu	r4,r2,10109204 <__mcmp+0x58>
101091dc:	10bfff04 	addi	r2,r2,-4
101091e0:	297fff04 	addi	r5,r5,-4
101091e4:	11800017 	ldw	r6,0(r2)
101091e8:	28c00017 	ldw	r3,0(r5)
101091ec:	30fffa26 	beq	r6,r3,101091d8 <__alt_data_end+0xfffe91d8>
101091f0:	30c00236 	bltu	r6,r3,101091fc <__mcmp+0x50>
101091f4:	00800044 	movi	r2,1
101091f8:	f800283a 	ret
101091fc:	00bfffc4 	movi	r2,-1
10109200:	f800283a 	ret
10109204:	0005883a 	mov	r2,zero
10109208:	f800283a 	ret

1010920c <__mdiff>:
1010920c:	28c00417 	ldw	r3,16(r5)
10109210:	30800417 	ldw	r2,16(r6)
10109214:	defffa04 	addi	sp,sp,-24
10109218:	dcc00315 	stw	r19,12(sp)
1010921c:	dc800215 	stw	r18,8(sp)
10109220:	dfc00515 	stw	ra,20(sp)
10109224:	dd000415 	stw	r20,16(sp)
10109228:	dc400115 	stw	r17,4(sp)
1010922c:	dc000015 	stw	r16,0(sp)
10109230:	1887c83a 	sub	r3,r3,r2
10109234:	2825883a 	mov	r18,r5
10109238:	3027883a 	mov	r19,r6
1010923c:	1800141e 	bne	r3,zero,10109290 <__mdiff+0x84>
10109240:	1085883a 	add	r2,r2,r2
10109244:	1085883a 	add	r2,r2,r2
10109248:	2a000504 	addi	r8,r5,20
1010924c:	34000504 	addi	r16,r6,20
10109250:	4087883a 	add	r3,r8,r2
10109254:	8085883a 	add	r2,r16,r2
10109258:	00000106 	br	10109260 <__mdiff+0x54>
1010925c:	40c0592e 	bgeu	r8,r3,101093c4 <__mdiff+0x1b8>
10109260:	18ffff04 	addi	r3,r3,-4
10109264:	10bfff04 	addi	r2,r2,-4
10109268:	19c00017 	ldw	r7,0(r3)
1010926c:	11400017 	ldw	r5,0(r2)
10109270:	397ffa26 	beq	r7,r5,1010925c <__alt_data_end+0xfffe925c>
10109274:	3940592e 	bgeu	r7,r5,101093dc <__mdiff+0x1d0>
10109278:	9005883a 	mov	r2,r18
1010927c:	4023883a 	mov	r17,r8
10109280:	9825883a 	mov	r18,r19
10109284:	05000044 	movi	r20,1
10109288:	1027883a 	mov	r19,r2
1010928c:	00000406 	br	101092a0 <__mdiff+0x94>
10109290:	18005616 	blt	r3,zero,101093ec <__mdiff+0x1e0>
10109294:	34400504 	addi	r17,r6,20
10109298:	2c000504 	addi	r16,r5,20
1010929c:	0029883a 	mov	r20,zero
101092a0:	91400117 	ldw	r5,4(r18)
101092a4:	01088e40 	call	101088e4 <_Balloc>
101092a8:	92400417 	ldw	r9,16(r18)
101092ac:	9b000417 	ldw	r12,16(r19)
101092b0:	12c00504 	addi	r11,r2,20
101092b4:	4a51883a 	add	r8,r9,r9
101092b8:	6319883a 	add	r12,r12,r12
101092bc:	4211883a 	add	r8,r8,r8
101092c0:	6319883a 	add	r12,r12,r12
101092c4:	15000315 	stw	r20,12(r2)
101092c8:	8211883a 	add	r8,r16,r8
101092cc:	8b19883a 	add	r12,r17,r12
101092d0:	0007883a 	mov	r3,zero
101092d4:	81400017 	ldw	r5,0(r16)
101092d8:	89c00017 	ldw	r7,0(r17)
101092dc:	59800104 	addi	r6,r11,4
101092e0:	293fffcc 	andi	r4,r5,65535
101092e4:	20c7883a 	add	r3,r4,r3
101092e8:	393fffcc 	andi	r4,r7,65535
101092ec:	1909c83a 	sub	r4,r3,r4
101092f0:	280ad43a 	srli	r5,r5,16
101092f4:	380ed43a 	srli	r7,r7,16
101092f8:	2007d43a 	srai	r3,r4,16
101092fc:	213fffcc 	andi	r4,r4,65535
10109300:	29cbc83a 	sub	r5,r5,r7
10109304:	28c7883a 	add	r3,r5,r3
10109308:	180a943a 	slli	r5,r3,16
1010930c:	8c400104 	addi	r17,r17,4
10109310:	84000104 	addi	r16,r16,4
10109314:	2908b03a 	or	r4,r5,r4
10109318:	59000015 	stw	r4,0(r11)
1010931c:	1807d43a 	srai	r3,r3,16
10109320:	3015883a 	mov	r10,r6
10109324:	3017883a 	mov	r11,r6
10109328:	8b3fea36 	bltu	r17,r12,101092d4 <__alt_data_end+0xfffe92d4>
1010932c:	8200162e 	bgeu	r16,r8,10109388 <__mdiff+0x17c>
10109330:	8017883a 	mov	r11,r16
10109334:	59400017 	ldw	r5,0(r11)
10109338:	31800104 	addi	r6,r6,4
1010933c:	5ac00104 	addi	r11,r11,4
10109340:	293fffcc 	andi	r4,r5,65535
10109344:	20c7883a 	add	r3,r4,r3
10109348:	280ed43a 	srli	r7,r5,16
1010934c:	180bd43a 	srai	r5,r3,16
10109350:	193fffcc 	andi	r4,r3,65535
10109354:	3947883a 	add	r3,r7,r5
10109358:	180a943a 	slli	r5,r3,16
1010935c:	1807d43a 	srai	r3,r3,16
10109360:	2908b03a 	or	r4,r5,r4
10109364:	313fff15 	stw	r4,-4(r6)
10109368:	5a3ff236 	bltu	r11,r8,10109334 <__alt_data_end+0xfffe9334>
1010936c:	0406303a 	nor	r3,zero,r16
10109370:	1a07883a 	add	r3,r3,r8
10109374:	1806d0ba 	srli	r3,r3,2
10109378:	18c00044 	addi	r3,r3,1
1010937c:	18c7883a 	add	r3,r3,r3
10109380:	18c7883a 	add	r3,r3,r3
10109384:	50d5883a 	add	r10,r10,r3
10109388:	50ffff04 	addi	r3,r10,-4
1010938c:	2000041e 	bne	r4,zero,101093a0 <__mdiff+0x194>
10109390:	18ffff04 	addi	r3,r3,-4
10109394:	19000017 	ldw	r4,0(r3)
10109398:	4a7fffc4 	addi	r9,r9,-1
1010939c:	203ffc26 	beq	r4,zero,10109390 <__alt_data_end+0xfffe9390>
101093a0:	12400415 	stw	r9,16(r2)
101093a4:	dfc00517 	ldw	ra,20(sp)
101093a8:	dd000417 	ldw	r20,16(sp)
101093ac:	dcc00317 	ldw	r19,12(sp)
101093b0:	dc800217 	ldw	r18,8(sp)
101093b4:	dc400117 	ldw	r17,4(sp)
101093b8:	dc000017 	ldw	r16,0(sp)
101093bc:	dec00604 	addi	sp,sp,24
101093c0:	f800283a 	ret
101093c4:	000b883a 	mov	r5,zero
101093c8:	01088e40 	call	101088e4 <_Balloc>
101093cc:	00c00044 	movi	r3,1
101093d0:	10c00415 	stw	r3,16(r2)
101093d4:	10000515 	stw	zero,20(r2)
101093d8:	003ff206 	br	101093a4 <__alt_data_end+0xfffe93a4>
101093dc:	8023883a 	mov	r17,r16
101093e0:	0029883a 	mov	r20,zero
101093e4:	4021883a 	mov	r16,r8
101093e8:	003fad06 	br	101092a0 <__alt_data_end+0xfffe92a0>
101093ec:	9005883a 	mov	r2,r18
101093f0:	94400504 	addi	r17,r18,20
101093f4:	9c000504 	addi	r16,r19,20
101093f8:	9825883a 	mov	r18,r19
101093fc:	05000044 	movi	r20,1
10109400:	1027883a 	mov	r19,r2
10109404:	003fa606 	br	101092a0 <__alt_data_end+0xfffe92a0>

10109408 <__ulp>:
10109408:	295ffc2c 	andhi	r5,r5,32752
1010940c:	00bf3034 	movhi	r2,64704
10109410:	2887883a 	add	r3,r5,r2
10109414:	00c0020e 	bge	zero,r3,10109420 <__ulp+0x18>
10109418:	0005883a 	mov	r2,zero
1010941c:	f800283a 	ret
10109420:	00c7c83a 	sub	r3,zero,r3
10109424:	1807d53a 	srai	r3,r3,20
10109428:	008004c4 	movi	r2,19
1010942c:	10c00b0e 	bge	r2,r3,1010945c <__ulp+0x54>
10109430:	18bffb04 	addi	r2,r3,-20
10109434:	01000784 	movi	r4,30
10109438:	0007883a 	mov	r3,zero
1010943c:	20800516 	blt	r4,r2,10109454 <__ulp+0x4c>
10109440:	010007c4 	movi	r4,31
10109444:	2089c83a 	sub	r4,r4,r2
10109448:	00800044 	movi	r2,1
1010944c:	1104983a 	sll	r2,r2,r4
10109450:	f800283a 	ret
10109454:	00800044 	movi	r2,1
10109458:	f800283a 	ret
1010945c:	01400234 	movhi	r5,8
10109460:	28c7d83a 	sra	r3,r5,r3
10109464:	0005883a 	mov	r2,zero
10109468:	f800283a 	ret

1010946c <__b2d>:
1010946c:	defffa04 	addi	sp,sp,-24
10109470:	dc000015 	stw	r16,0(sp)
10109474:	24000417 	ldw	r16,16(r4)
10109478:	dc400115 	stw	r17,4(sp)
1010947c:	24400504 	addi	r17,r4,20
10109480:	8421883a 	add	r16,r16,r16
10109484:	8421883a 	add	r16,r16,r16
10109488:	8c21883a 	add	r16,r17,r16
1010948c:	dc800215 	stw	r18,8(sp)
10109490:	84bfff17 	ldw	r18,-4(r16)
10109494:	dd000415 	stw	r20,16(sp)
10109498:	dcc00315 	stw	r19,12(sp)
1010949c:	9009883a 	mov	r4,r18
101094a0:	2829883a 	mov	r20,r5
101094a4:	dfc00515 	stw	ra,20(sp)
101094a8:	0108bd80 	call	10108bd8 <__hi0bits>
101094ac:	00c00804 	movi	r3,32
101094b0:	1889c83a 	sub	r4,r3,r2
101094b4:	a1000015 	stw	r4,0(r20)
101094b8:	01000284 	movi	r4,10
101094bc:	84ffff04 	addi	r19,r16,-4
101094c0:	20801216 	blt	r4,r2,1010950c <__b2d+0xa0>
101094c4:	018002c4 	movi	r6,11
101094c8:	308dc83a 	sub	r6,r6,r2
101094cc:	9186d83a 	srl	r3,r18,r6
101094d0:	18cffc34 	orhi	r3,r3,16368
101094d4:	8cc0212e 	bgeu	r17,r19,1010955c <__b2d+0xf0>
101094d8:	813ffe17 	ldw	r4,-8(r16)
101094dc:	218cd83a 	srl	r6,r4,r6
101094e0:	10800544 	addi	r2,r2,21
101094e4:	9084983a 	sll	r2,r18,r2
101094e8:	1184b03a 	or	r2,r2,r6
101094ec:	dfc00517 	ldw	ra,20(sp)
101094f0:	dd000417 	ldw	r20,16(sp)
101094f4:	dcc00317 	ldw	r19,12(sp)
101094f8:	dc800217 	ldw	r18,8(sp)
101094fc:	dc400117 	ldw	r17,4(sp)
10109500:	dc000017 	ldw	r16,0(sp)
10109504:	dec00604 	addi	sp,sp,24
10109508:	f800283a 	ret
1010950c:	8cc00f2e 	bgeu	r17,r19,1010954c <__b2d+0xe0>
10109510:	117ffd44 	addi	r5,r2,-11
10109514:	80bffe17 	ldw	r2,-8(r16)
10109518:	28000e26 	beq	r5,zero,10109554 <__b2d+0xe8>
1010951c:	1949c83a 	sub	r4,r3,r5
10109520:	9164983a 	sll	r18,r18,r5
10109524:	1106d83a 	srl	r3,r2,r4
10109528:	81bffe04 	addi	r6,r16,-8
1010952c:	948ffc34 	orhi	r18,r18,16368
10109530:	90c6b03a 	or	r3,r18,r3
10109534:	89800e2e 	bgeu	r17,r6,10109570 <__b2d+0x104>
10109538:	81bffd17 	ldw	r6,-12(r16)
1010953c:	1144983a 	sll	r2,r2,r5
10109540:	310ad83a 	srl	r5,r6,r4
10109544:	2884b03a 	or	r2,r5,r2
10109548:	003fe806 	br	101094ec <__alt_data_end+0xfffe94ec>
1010954c:	10bffd44 	addi	r2,r2,-11
10109550:	1000041e 	bne	r2,zero,10109564 <__b2d+0xf8>
10109554:	90cffc34 	orhi	r3,r18,16368
10109558:	003fe406 	br	101094ec <__alt_data_end+0xfffe94ec>
1010955c:	000d883a 	mov	r6,zero
10109560:	003fdf06 	br	101094e0 <__alt_data_end+0xfffe94e0>
10109564:	90a4983a 	sll	r18,r18,r2
10109568:	0005883a 	mov	r2,zero
1010956c:	003ff906 	br	10109554 <__alt_data_end+0xfffe9554>
10109570:	1144983a 	sll	r2,r2,r5
10109574:	003fdd06 	br	101094ec <__alt_data_end+0xfffe94ec>

10109578 <__d2b>:
10109578:	defff804 	addi	sp,sp,-32
1010957c:	dc000215 	stw	r16,8(sp)
10109580:	3021883a 	mov	r16,r6
10109584:	dc400315 	stw	r17,12(sp)
10109588:	8022907a 	slli	r17,r16,1
1010958c:	dd000615 	stw	r20,24(sp)
10109590:	2829883a 	mov	r20,r5
10109594:	01400044 	movi	r5,1
10109598:	dcc00515 	stw	r19,20(sp)
1010959c:	dc800415 	stw	r18,16(sp)
101095a0:	dfc00715 	stw	ra,28(sp)
101095a4:	3825883a 	mov	r18,r7
101095a8:	8822d57a 	srli	r17,r17,21
101095ac:	01088e40 	call	101088e4 <_Balloc>
101095b0:	1027883a 	mov	r19,r2
101095b4:	00800434 	movhi	r2,16
101095b8:	10bfffc4 	addi	r2,r2,-1
101095bc:	808c703a 	and	r6,r16,r2
101095c0:	88000126 	beq	r17,zero,101095c8 <__d2b+0x50>
101095c4:	31800434 	orhi	r6,r6,16
101095c8:	d9800015 	stw	r6,0(sp)
101095cc:	a0002426 	beq	r20,zero,10109660 <__d2b+0xe8>
101095d0:	d9000104 	addi	r4,sp,4
101095d4:	dd000115 	stw	r20,4(sp)
101095d8:	0108c400 	call	10108c40 <__lo0bits>
101095dc:	d8c00017 	ldw	r3,0(sp)
101095e0:	10002f1e 	bne	r2,zero,101096a0 <__d2b+0x128>
101095e4:	d9000117 	ldw	r4,4(sp)
101095e8:	99000515 	stw	r4,20(r19)
101095ec:	1821003a 	cmpeq	r16,r3,zero
101095f0:	01000084 	movi	r4,2
101095f4:	2421c83a 	sub	r16,r4,r16
101095f8:	98c00615 	stw	r3,24(r19)
101095fc:	9c000415 	stw	r16,16(r19)
10109600:	88001f1e 	bne	r17,zero,10109680 <__d2b+0x108>
10109604:	10bef384 	addi	r2,r2,-1074
10109608:	90800015 	stw	r2,0(r18)
1010960c:	00900034 	movhi	r2,16384
10109610:	10bfffc4 	addi	r2,r2,-1
10109614:	8085883a 	add	r2,r16,r2
10109618:	1085883a 	add	r2,r2,r2
1010961c:	1085883a 	add	r2,r2,r2
10109620:	9885883a 	add	r2,r19,r2
10109624:	11000517 	ldw	r4,20(r2)
10109628:	8020917a 	slli	r16,r16,5
1010962c:	0108bd80 	call	10108bd8 <__hi0bits>
10109630:	d8c00817 	ldw	r3,32(sp)
10109634:	8085c83a 	sub	r2,r16,r2
10109638:	18800015 	stw	r2,0(r3)
1010963c:	9805883a 	mov	r2,r19
10109640:	dfc00717 	ldw	ra,28(sp)
10109644:	dd000617 	ldw	r20,24(sp)
10109648:	dcc00517 	ldw	r19,20(sp)
1010964c:	dc800417 	ldw	r18,16(sp)
10109650:	dc400317 	ldw	r17,12(sp)
10109654:	dc000217 	ldw	r16,8(sp)
10109658:	dec00804 	addi	sp,sp,32
1010965c:	f800283a 	ret
10109660:	d809883a 	mov	r4,sp
10109664:	0108c400 	call	10108c40 <__lo0bits>
10109668:	d8c00017 	ldw	r3,0(sp)
1010966c:	04000044 	movi	r16,1
10109670:	9c000415 	stw	r16,16(r19)
10109674:	98c00515 	stw	r3,20(r19)
10109678:	10800804 	addi	r2,r2,32
1010967c:	883fe126 	beq	r17,zero,10109604 <__alt_data_end+0xfffe9604>
10109680:	00c00d44 	movi	r3,53
10109684:	8c7ef344 	addi	r17,r17,-1075
10109688:	88a3883a 	add	r17,r17,r2
1010968c:	1885c83a 	sub	r2,r3,r2
10109690:	d8c00817 	ldw	r3,32(sp)
10109694:	94400015 	stw	r17,0(r18)
10109698:	18800015 	stw	r2,0(r3)
1010969c:	003fe706 	br	1010963c <__alt_data_end+0xfffe963c>
101096a0:	01000804 	movi	r4,32
101096a4:	2089c83a 	sub	r4,r4,r2
101096a8:	1908983a 	sll	r4,r3,r4
101096ac:	d9400117 	ldw	r5,4(sp)
101096b0:	1886d83a 	srl	r3,r3,r2
101096b4:	2148b03a 	or	r4,r4,r5
101096b8:	99000515 	stw	r4,20(r19)
101096bc:	d8c00015 	stw	r3,0(sp)
101096c0:	003fca06 	br	101095ec <__alt_data_end+0xfffe95ec>

101096c4 <__ratio>:
101096c4:	defff904 	addi	sp,sp,-28
101096c8:	dc400315 	stw	r17,12(sp)
101096cc:	2823883a 	mov	r17,r5
101096d0:	d9400104 	addi	r5,sp,4
101096d4:	dfc00615 	stw	ra,24(sp)
101096d8:	dcc00515 	stw	r19,20(sp)
101096dc:	dc800415 	stw	r18,16(sp)
101096e0:	2027883a 	mov	r19,r4
101096e4:	dc000215 	stw	r16,8(sp)
101096e8:	010946c0 	call	1010946c <__b2d>
101096ec:	d80b883a 	mov	r5,sp
101096f0:	8809883a 	mov	r4,r17
101096f4:	1025883a 	mov	r18,r2
101096f8:	1821883a 	mov	r16,r3
101096fc:	010946c0 	call	1010946c <__b2d>
10109700:	8a000417 	ldw	r8,16(r17)
10109704:	99000417 	ldw	r4,16(r19)
10109708:	d9400117 	ldw	r5,4(sp)
1010970c:	2209c83a 	sub	r4,r4,r8
10109710:	2010917a 	slli	r8,r4,5
10109714:	d9000017 	ldw	r4,0(sp)
10109718:	2909c83a 	sub	r4,r5,r4
1010971c:	4109883a 	add	r4,r8,r4
10109720:	01000e0e 	bge	zero,r4,1010975c <__ratio+0x98>
10109724:	2008953a 	slli	r4,r4,20
10109728:	2421883a 	add	r16,r4,r16
1010972c:	100d883a 	mov	r6,r2
10109730:	180f883a 	mov	r7,r3
10109734:	9009883a 	mov	r4,r18
10109738:	800b883a 	mov	r5,r16
1010973c:	010cfa40 	call	1010cfa4 <__divdf3>
10109740:	dfc00617 	ldw	ra,24(sp)
10109744:	dcc00517 	ldw	r19,20(sp)
10109748:	dc800417 	ldw	r18,16(sp)
1010974c:	dc400317 	ldw	r17,12(sp)
10109750:	dc000217 	ldw	r16,8(sp)
10109754:	dec00704 	addi	sp,sp,28
10109758:	f800283a 	ret
1010975c:	2008953a 	slli	r4,r4,20
10109760:	1907c83a 	sub	r3,r3,r4
10109764:	003ff106 	br	1010972c <__alt_data_end+0xfffe972c>

10109768 <_mprec_log10>:
10109768:	defffe04 	addi	sp,sp,-8
1010976c:	dc000015 	stw	r16,0(sp)
10109770:	dfc00115 	stw	ra,4(sp)
10109774:	008005c4 	movi	r2,23
10109778:	2021883a 	mov	r16,r4
1010977c:	11000d0e 	bge	r2,r4,101097b4 <_mprec_log10+0x4c>
10109780:	0005883a 	mov	r2,zero
10109784:	00cffc34 	movhi	r3,16368
10109788:	843fffc4 	addi	r16,r16,-1
1010978c:	000d883a 	mov	r6,zero
10109790:	01d00934 	movhi	r7,16420
10109794:	1009883a 	mov	r4,r2
10109798:	180b883a 	mov	r5,r3
1010979c:	010dae40 	call	1010dae4 <__muldf3>
101097a0:	803ff91e 	bne	r16,zero,10109788 <__alt_data_end+0xfffe9788>
101097a4:	dfc00117 	ldw	ra,4(sp)
101097a8:	dc000017 	ldw	r16,0(sp)
101097ac:	dec00204 	addi	sp,sp,8
101097b0:	f800283a 	ret
101097b4:	202090fa 	slli	r16,r4,3
101097b8:	00840474 	movhi	r2,4113
101097bc:	1085be04 	addi	r2,r2,5880
101097c0:	1421883a 	add	r16,r2,r16
101097c4:	80800017 	ldw	r2,0(r16)
101097c8:	80c00117 	ldw	r3,4(r16)
101097cc:	dfc00117 	ldw	ra,4(sp)
101097d0:	dc000017 	ldw	r16,0(sp)
101097d4:	dec00204 	addi	sp,sp,8
101097d8:	f800283a 	ret

101097dc <__copybits>:
101097dc:	297fffc4 	addi	r5,r5,-1
101097e0:	280fd17a 	srai	r7,r5,5
101097e4:	30c00417 	ldw	r3,16(r6)
101097e8:	30800504 	addi	r2,r6,20
101097ec:	39c00044 	addi	r7,r7,1
101097f0:	18c7883a 	add	r3,r3,r3
101097f4:	39cf883a 	add	r7,r7,r7
101097f8:	18c7883a 	add	r3,r3,r3
101097fc:	39cf883a 	add	r7,r7,r7
10109800:	10c7883a 	add	r3,r2,r3
10109804:	21cf883a 	add	r7,r4,r7
10109808:	10c00d2e 	bgeu	r2,r3,10109840 <__copybits+0x64>
1010980c:	200b883a 	mov	r5,r4
10109810:	12000017 	ldw	r8,0(r2)
10109814:	29400104 	addi	r5,r5,4
10109818:	10800104 	addi	r2,r2,4
1010981c:	2a3fff15 	stw	r8,-4(r5)
10109820:	10fffb36 	bltu	r2,r3,10109810 <__alt_data_end+0xfffe9810>
10109824:	1985c83a 	sub	r2,r3,r6
10109828:	10bffac4 	addi	r2,r2,-21
1010982c:	1004d0ba 	srli	r2,r2,2
10109830:	10800044 	addi	r2,r2,1
10109834:	1085883a 	add	r2,r2,r2
10109838:	1085883a 	add	r2,r2,r2
1010983c:	2089883a 	add	r4,r4,r2
10109840:	21c0032e 	bgeu	r4,r7,10109850 <__copybits+0x74>
10109844:	20000015 	stw	zero,0(r4)
10109848:	21000104 	addi	r4,r4,4
1010984c:	21fffd36 	bltu	r4,r7,10109844 <__alt_data_end+0xfffe9844>
10109850:	f800283a 	ret

10109854 <__any_on>:
10109854:	20c00417 	ldw	r3,16(r4)
10109858:	2805d17a 	srai	r2,r5,5
1010985c:	21000504 	addi	r4,r4,20
10109860:	18800d0e 	bge	r3,r2,10109898 <__any_on+0x44>
10109864:	18c7883a 	add	r3,r3,r3
10109868:	18c7883a 	add	r3,r3,r3
1010986c:	20c7883a 	add	r3,r4,r3
10109870:	20c0192e 	bgeu	r4,r3,101098d8 <__any_on+0x84>
10109874:	18bfff17 	ldw	r2,-4(r3)
10109878:	18ffff04 	addi	r3,r3,-4
1010987c:	1000041e 	bne	r2,zero,10109890 <__any_on+0x3c>
10109880:	20c0142e 	bgeu	r4,r3,101098d4 <__any_on+0x80>
10109884:	18ffff04 	addi	r3,r3,-4
10109888:	19400017 	ldw	r5,0(r3)
1010988c:	283ffc26 	beq	r5,zero,10109880 <__alt_data_end+0xfffe9880>
10109890:	00800044 	movi	r2,1
10109894:	f800283a 	ret
10109898:	10c00a0e 	bge	r2,r3,101098c4 <__any_on+0x70>
1010989c:	1085883a 	add	r2,r2,r2
101098a0:	1085883a 	add	r2,r2,r2
101098a4:	294007cc 	andi	r5,r5,31
101098a8:	2087883a 	add	r3,r4,r2
101098ac:	283ff026 	beq	r5,zero,10109870 <__alt_data_end+0xfffe9870>
101098b0:	19800017 	ldw	r6,0(r3)
101098b4:	3144d83a 	srl	r2,r6,r5
101098b8:	114a983a 	sll	r5,r2,r5
101098bc:	317ff41e 	bne	r6,r5,10109890 <__alt_data_end+0xfffe9890>
101098c0:	003feb06 	br	10109870 <__alt_data_end+0xfffe9870>
101098c4:	1085883a 	add	r2,r2,r2
101098c8:	1085883a 	add	r2,r2,r2
101098cc:	2087883a 	add	r3,r4,r2
101098d0:	003fe706 	br	10109870 <__alt_data_end+0xfffe9870>
101098d4:	f800283a 	ret
101098d8:	0005883a 	mov	r2,zero
101098dc:	f800283a 	ret

101098e0 <_read_r>:
101098e0:	defffd04 	addi	sp,sp,-12
101098e4:	2805883a 	mov	r2,r5
101098e8:	dc000015 	stw	r16,0(sp)
101098ec:	04040474 	movhi	r16,4113
101098f0:	dc400115 	stw	r17,4(sp)
101098f4:	300b883a 	mov	r5,r6
101098f8:	8413bd04 	addi	r16,r16,20212
101098fc:	2023883a 	mov	r17,r4
10109900:	380d883a 	mov	r6,r7
10109904:	1009883a 	mov	r4,r2
10109908:	dfc00215 	stw	ra,8(sp)
1010990c:	80000015 	stw	zero,0(r16)
10109910:	010f8540 	call	1010f854 <read>
10109914:	00ffffc4 	movi	r3,-1
10109918:	10c00526 	beq	r2,r3,10109930 <_read_r+0x50>
1010991c:	dfc00217 	ldw	ra,8(sp)
10109920:	dc400117 	ldw	r17,4(sp)
10109924:	dc000017 	ldw	r16,0(sp)
10109928:	dec00304 	addi	sp,sp,12
1010992c:	f800283a 	ret
10109930:	80c00017 	ldw	r3,0(r16)
10109934:	183ff926 	beq	r3,zero,1010991c <__alt_data_end+0xfffe991c>
10109938:	88c00015 	stw	r3,0(r17)
1010993c:	003ff706 	br	1010991c <__alt_data_end+0xfffe991c>

10109940 <_realloc_r>:
10109940:	defff604 	addi	sp,sp,-40
10109944:	dc800215 	stw	r18,8(sp)
10109948:	dfc00915 	stw	ra,36(sp)
1010994c:	df000815 	stw	fp,32(sp)
10109950:	ddc00715 	stw	r23,28(sp)
10109954:	dd800615 	stw	r22,24(sp)
10109958:	dd400515 	stw	r21,20(sp)
1010995c:	dd000415 	stw	r20,16(sp)
10109960:	dcc00315 	stw	r19,12(sp)
10109964:	dc400115 	stw	r17,4(sp)
10109968:	dc000015 	stw	r16,0(sp)
1010996c:	3025883a 	mov	r18,r6
10109970:	2800b726 	beq	r5,zero,10109c50 <_realloc_r+0x310>
10109974:	282b883a 	mov	r21,r5
10109978:	2029883a 	mov	r20,r4
1010997c:	010f57c0 	call	1010f57c <__malloc_lock>
10109980:	a8bfff17 	ldw	r2,-4(r21)
10109984:	043fff04 	movi	r16,-4
10109988:	90c002c4 	addi	r3,r18,11
1010998c:	01000584 	movi	r4,22
10109990:	acfffe04 	addi	r19,r21,-8
10109994:	1420703a 	and	r16,r2,r16
10109998:	20c0332e 	bgeu	r4,r3,10109a68 <_realloc_r+0x128>
1010999c:	047ffe04 	movi	r17,-8
101099a0:	1c62703a 	and	r17,r3,r17
101099a4:	8807883a 	mov	r3,r17
101099a8:	88005816 	blt	r17,zero,10109b0c <_realloc_r+0x1cc>
101099ac:	8c805736 	bltu	r17,r18,10109b0c <_realloc_r+0x1cc>
101099b0:	80c0300e 	bge	r16,r3,10109a74 <_realloc_r+0x134>
101099b4:	07040474 	movhi	fp,4113
101099b8:	e7074e04 	addi	fp,fp,7480
101099bc:	e1c00217 	ldw	r7,8(fp)
101099c0:	9c09883a 	add	r4,r19,r16
101099c4:	22000117 	ldw	r8,4(r4)
101099c8:	21c06326 	beq	r4,r7,10109b58 <_realloc_r+0x218>
101099cc:	017fff84 	movi	r5,-2
101099d0:	414a703a 	and	r5,r8,r5
101099d4:	214b883a 	add	r5,r4,r5
101099d8:	29800117 	ldw	r6,4(r5)
101099dc:	3180004c 	andi	r6,r6,1
101099e0:	30003f26 	beq	r6,zero,10109ae0 <_realloc_r+0x1a0>
101099e4:	1080004c 	andi	r2,r2,1
101099e8:	10008326 	beq	r2,zero,10109bf8 <_realloc_r+0x2b8>
101099ec:	900b883a 	mov	r5,r18
101099f0:	a009883a 	mov	r4,r20
101099f4:	01032180 	call	10103218 <_malloc_r>
101099f8:	1025883a 	mov	r18,r2
101099fc:	10011e26 	beq	r2,zero,10109e78 <_realloc_r+0x538>
10109a00:	a93fff17 	ldw	r4,-4(r21)
10109a04:	10fffe04 	addi	r3,r2,-8
10109a08:	00bfff84 	movi	r2,-2
10109a0c:	2084703a 	and	r2,r4,r2
10109a10:	9885883a 	add	r2,r19,r2
10109a14:	1880ee26 	beq	r3,r2,10109dd0 <_realloc_r+0x490>
10109a18:	81bfff04 	addi	r6,r16,-4
10109a1c:	00800904 	movi	r2,36
10109a20:	1180b836 	bltu	r2,r6,10109d04 <_realloc_r+0x3c4>
10109a24:	00c004c4 	movi	r3,19
10109a28:	19809636 	bltu	r3,r6,10109c84 <_realloc_r+0x344>
10109a2c:	9005883a 	mov	r2,r18
10109a30:	a807883a 	mov	r3,r21
10109a34:	19000017 	ldw	r4,0(r3)
10109a38:	11000015 	stw	r4,0(r2)
10109a3c:	19000117 	ldw	r4,4(r3)
10109a40:	11000115 	stw	r4,4(r2)
10109a44:	18c00217 	ldw	r3,8(r3)
10109a48:	10c00215 	stw	r3,8(r2)
10109a4c:	a80b883a 	mov	r5,r21
10109a50:	a009883a 	mov	r4,r20
10109a54:	01025e80 	call	101025e8 <_free_r>
10109a58:	a009883a 	mov	r4,r20
10109a5c:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10109a60:	9005883a 	mov	r2,r18
10109a64:	00001206 	br	10109ab0 <_realloc_r+0x170>
10109a68:	00c00404 	movi	r3,16
10109a6c:	1823883a 	mov	r17,r3
10109a70:	003fce06 	br	101099ac <__alt_data_end+0xfffe99ac>
10109a74:	a825883a 	mov	r18,r21
10109a78:	8445c83a 	sub	r2,r16,r17
10109a7c:	00c003c4 	movi	r3,15
10109a80:	18802636 	bltu	r3,r2,10109b1c <_realloc_r+0x1dc>
10109a84:	99800117 	ldw	r6,4(r19)
10109a88:	9c07883a 	add	r3,r19,r16
10109a8c:	3180004c 	andi	r6,r6,1
10109a90:	3420b03a 	or	r16,r6,r16
10109a94:	9c000115 	stw	r16,4(r19)
10109a98:	18800117 	ldw	r2,4(r3)
10109a9c:	10800054 	ori	r2,r2,1
10109aa0:	18800115 	stw	r2,4(r3)
10109aa4:	a009883a 	mov	r4,r20
10109aa8:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10109aac:	9005883a 	mov	r2,r18
10109ab0:	dfc00917 	ldw	ra,36(sp)
10109ab4:	df000817 	ldw	fp,32(sp)
10109ab8:	ddc00717 	ldw	r23,28(sp)
10109abc:	dd800617 	ldw	r22,24(sp)
10109ac0:	dd400517 	ldw	r21,20(sp)
10109ac4:	dd000417 	ldw	r20,16(sp)
10109ac8:	dcc00317 	ldw	r19,12(sp)
10109acc:	dc800217 	ldw	r18,8(sp)
10109ad0:	dc400117 	ldw	r17,4(sp)
10109ad4:	dc000017 	ldw	r16,0(sp)
10109ad8:	dec00a04 	addi	sp,sp,40
10109adc:	f800283a 	ret
10109ae0:	017fff04 	movi	r5,-4
10109ae4:	414a703a 	and	r5,r8,r5
10109ae8:	814d883a 	add	r6,r16,r5
10109aec:	30c01f16 	blt	r6,r3,10109b6c <_realloc_r+0x22c>
10109af0:	20800317 	ldw	r2,12(r4)
10109af4:	20c00217 	ldw	r3,8(r4)
10109af8:	a825883a 	mov	r18,r21
10109afc:	3021883a 	mov	r16,r6
10109b00:	18800315 	stw	r2,12(r3)
10109b04:	10c00215 	stw	r3,8(r2)
10109b08:	003fdb06 	br	10109a78 <__alt_data_end+0xfffe9a78>
10109b0c:	00800304 	movi	r2,12
10109b10:	a0800015 	stw	r2,0(r20)
10109b14:	0005883a 	mov	r2,zero
10109b18:	003fe506 	br	10109ab0 <__alt_data_end+0xfffe9ab0>
10109b1c:	98c00117 	ldw	r3,4(r19)
10109b20:	9c4b883a 	add	r5,r19,r17
10109b24:	11000054 	ori	r4,r2,1
10109b28:	18c0004c 	andi	r3,r3,1
10109b2c:	1c62b03a 	or	r17,r3,r17
10109b30:	9c400115 	stw	r17,4(r19)
10109b34:	29000115 	stw	r4,4(r5)
10109b38:	2885883a 	add	r2,r5,r2
10109b3c:	10c00117 	ldw	r3,4(r2)
10109b40:	29400204 	addi	r5,r5,8
10109b44:	a009883a 	mov	r4,r20
10109b48:	18c00054 	ori	r3,r3,1
10109b4c:	10c00115 	stw	r3,4(r2)
10109b50:	01025e80 	call	101025e8 <_free_r>
10109b54:	003fd306 	br	10109aa4 <__alt_data_end+0xfffe9aa4>
10109b58:	017fff04 	movi	r5,-4
10109b5c:	414a703a 	and	r5,r8,r5
10109b60:	89800404 	addi	r6,r17,16
10109b64:	8151883a 	add	r8,r16,r5
10109b68:	4180590e 	bge	r8,r6,10109cd0 <_realloc_r+0x390>
10109b6c:	1080004c 	andi	r2,r2,1
10109b70:	103f9e1e 	bne	r2,zero,101099ec <__alt_data_end+0xfffe99ec>
10109b74:	adbffe17 	ldw	r22,-8(r21)
10109b78:	00bfff04 	movi	r2,-4
10109b7c:	9dadc83a 	sub	r22,r19,r22
10109b80:	b1800117 	ldw	r6,4(r22)
10109b84:	3084703a 	and	r2,r6,r2
10109b88:	20002026 	beq	r4,zero,10109c0c <_realloc_r+0x2cc>
10109b8c:	80af883a 	add	r23,r16,r2
10109b90:	b96f883a 	add	r23,r23,r5
10109b94:	21c05f26 	beq	r4,r7,10109d14 <_realloc_r+0x3d4>
10109b98:	b8c01c16 	blt	r23,r3,10109c0c <_realloc_r+0x2cc>
10109b9c:	20800317 	ldw	r2,12(r4)
10109ba0:	20c00217 	ldw	r3,8(r4)
10109ba4:	81bfff04 	addi	r6,r16,-4
10109ba8:	01000904 	movi	r4,36
10109bac:	18800315 	stw	r2,12(r3)
10109bb0:	10c00215 	stw	r3,8(r2)
10109bb4:	b0c00217 	ldw	r3,8(r22)
10109bb8:	b0800317 	ldw	r2,12(r22)
10109bbc:	b4800204 	addi	r18,r22,8
10109bc0:	18800315 	stw	r2,12(r3)
10109bc4:	10c00215 	stw	r3,8(r2)
10109bc8:	21801b36 	bltu	r4,r6,10109c38 <_realloc_r+0x2f8>
10109bcc:	008004c4 	movi	r2,19
10109bd0:	1180352e 	bgeu	r2,r6,10109ca8 <_realloc_r+0x368>
10109bd4:	a8800017 	ldw	r2,0(r21)
10109bd8:	b0800215 	stw	r2,8(r22)
10109bdc:	a8800117 	ldw	r2,4(r21)
10109be0:	b0800315 	stw	r2,12(r22)
10109be4:	008006c4 	movi	r2,27
10109be8:	11807f36 	bltu	r2,r6,10109de8 <_realloc_r+0x4a8>
10109bec:	b0800404 	addi	r2,r22,16
10109bf0:	ad400204 	addi	r21,r21,8
10109bf4:	00002d06 	br	10109cac <_realloc_r+0x36c>
10109bf8:	adbffe17 	ldw	r22,-8(r21)
10109bfc:	00bfff04 	movi	r2,-4
10109c00:	9dadc83a 	sub	r22,r19,r22
10109c04:	b1000117 	ldw	r4,4(r22)
10109c08:	2084703a 	and	r2,r4,r2
10109c0c:	b03f7726 	beq	r22,zero,101099ec <__alt_data_end+0xfffe99ec>
10109c10:	80af883a 	add	r23,r16,r2
10109c14:	b8ff7516 	blt	r23,r3,101099ec <__alt_data_end+0xfffe99ec>
10109c18:	b0800317 	ldw	r2,12(r22)
10109c1c:	b0c00217 	ldw	r3,8(r22)
10109c20:	81bfff04 	addi	r6,r16,-4
10109c24:	01000904 	movi	r4,36
10109c28:	18800315 	stw	r2,12(r3)
10109c2c:	10c00215 	stw	r3,8(r2)
10109c30:	b4800204 	addi	r18,r22,8
10109c34:	21bfe52e 	bgeu	r4,r6,10109bcc <__alt_data_end+0xfffe9bcc>
10109c38:	a80b883a 	mov	r5,r21
10109c3c:	9009883a 	mov	r4,r18
10109c40:	01087880 	call	10108788 <memmove>
10109c44:	b821883a 	mov	r16,r23
10109c48:	b027883a 	mov	r19,r22
10109c4c:	003f8a06 	br	10109a78 <__alt_data_end+0xfffe9a78>
10109c50:	300b883a 	mov	r5,r6
10109c54:	dfc00917 	ldw	ra,36(sp)
10109c58:	df000817 	ldw	fp,32(sp)
10109c5c:	ddc00717 	ldw	r23,28(sp)
10109c60:	dd800617 	ldw	r22,24(sp)
10109c64:	dd400517 	ldw	r21,20(sp)
10109c68:	dd000417 	ldw	r20,16(sp)
10109c6c:	dcc00317 	ldw	r19,12(sp)
10109c70:	dc800217 	ldw	r18,8(sp)
10109c74:	dc400117 	ldw	r17,4(sp)
10109c78:	dc000017 	ldw	r16,0(sp)
10109c7c:	dec00a04 	addi	sp,sp,40
10109c80:	01032181 	jmpi	10103218 <_malloc_r>
10109c84:	a8c00017 	ldw	r3,0(r21)
10109c88:	90c00015 	stw	r3,0(r18)
10109c8c:	a8c00117 	ldw	r3,4(r21)
10109c90:	90c00115 	stw	r3,4(r18)
10109c94:	00c006c4 	movi	r3,27
10109c98:	19804536 	bltu	r3,r6,10109db0 <_realloc_r+0x470>
10109c9c:	90800204 	addi	r2,r18,8
10109ca0:	a8c00204 	addi	r3,r21,8
10109ca4:	003f6306 	br	10109a34 <__alt_data_end+0xfffe9a34>
10109ca8:	9005883a 	mov	r2,r18
10109cac:	a8c00017 	ldw	r3,0(r21)
10109cb0:	b821883a 	mov	r16,r23
10109cb4:	b027883a 	mov	r19,r22
10109cb8:	10c00015 	stw	r3,0(r2)
10109cbc:	a8c00117 	ldw	r3,4(r21)
10109cc0:	10c00115 	stw	r3,4(r2)
10109cc4:	a8c00217 	ldw	r3,8(r21)
10109cc8:	10c00215 	stw	r3,8(r2)
10109ccc:	003f6a06 	br	10109a78 <__alt_data_end+0xfffe9a78>
10109cd0:	9c67883a 	add	r19,r19,r17
10109cd4:	4445c83a 	sub	r2,r8,r17
10109cd8:	e4c00215 	stw	r19,8(fp)
10109cdc:	10800054 	ori	r2,r2,1
10109ce0:	98800115 	stw	r2,4(r19)
10109ce4:	a8bfff17 	ldw	r2,-4(r21)
10109ce8:	a009883a 	mov	r4,r20
10109cec:	1080004c 	andi	r2,r2,1
10109cf0:	1462b03a 	or	r17,r2,r17
10109cf4:	ac7fff15 	stw	r17,-4(r21)
10109cf8:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10109cfc:	a805883a 	mov	r2,r21
10109d00:	003f6b06 	br	10109ab0 <__alt_data_end+0xfffe9ab0>
10109d04:	a80b883a 	mov	r5,r21
10109d08:	9009883a 	mov	r4,r18
10109d0c:	01087880 	call	10108788 <memmove>
10109d10:	003f4e06 	br	10109a4c <__alt_data_end+0xfffe9a4c>
10109d14:	89000404 	addi	r4,r17,16
10109d18:	b93fbc16 	blt	r23,r4,10109c0c <__alt_data_end+0xfffe9c0c>
10109d1c:	b0800317 	ldw	r2,12(r22)
10109d20:	b0c00217 	ldw	r3,8(r22)
10109d24:	81bfff04 	addi	r6,r16,-4
10109d28:	01000904 	movi	r4,36
10109d2c:	18800315 	stw	r2,12(r3)
10109d30:	10c00215 	stw	r3,8(r2)
10109d34:	b4800204 	addi	r18,r22,8
10109d38:	21804336 	bltu	r4,r6,10109e48 <_realloc_r+0x508>
10109d3c:	008004c4 	movi	r2,19
10109d40:	11803f2e 	bgeu	r2,r6,10109e40 <_realloc_r+0x500>
10109d44:	a8800017 	ldw	r2,0(r21)
10109d48:	b0800215 	stw	r2,8(r22)
10109d4c:	a8800117 	ldw	r2,4(r21)
10109d50:	b0800315 	stw	r2,12(r22)
10109d54:	008006c4 	movi	r2,27
10109d58:	11803f36 	bltu	r2,r6,10109e58 <_realloc_r+0x518>
10109d5c:	b0800404 	addi	r2,r22,16
10109d60:	ad400204 	addi	r21,r21,8
10109d64:	a8c00017 	ldw	r3,0(r21)
10109d68:	10c00015 	stw	r3,0(r2)
10109d6c:	a8c00117 	ldw	r3,4(r21)
10109d70:	10c00115 	stw	r3,4(r2)
10109d74:	a8c00217 	ldw	r3,8(r21)
10109d78:	10c00215 	stw	r3,8(r2)
10109d7c:	b447883a 	add	r3,r22,r17
10109d80:	bc45c83a 	sub	r2,r23,r17
10109d84:	e0c00215 	stw	r3,8(fp)
10109d88:	10800054 	ori	r2,r2,1
10109d8c:	18800115 	stw	r2,4(r3)
10109d90:	b0800117 	ldw	r2,4(r22)
10109d94:	a009883a 	mov	r4,r20
10109d98:	1080004c 	andi	r2,r2,1
10109d9c:	1462b03a 	or	r17,r2,r17
10109da0:	b4400115 	stw	r17,4(r22)
10109da4:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10109da8:	9005883a 	mov	r2,r18
10109dac:	003f4006 	br	10109ab0 <__alt_data_end+0xfffe9ab0>
10109db0:	a8c00217 	ldw	r3,8(r21)
10109db4:	90c00215 	stw	r3,8(r18)
10109db8:	a8c00317 	ldw	r3,12(r21)
10109dbc:	90c00315 	stw	r3,12(r18)
10109dc0:	30801126 	beq	r6,r2,10109e08 <_realloc_r+0x4c8>
10109dc4:	90800404 	addi	r2,r18,16
10109dc8:	a8c00404 	addi	r3,r21,16
10109dcc:	003f1906 	br	10109a34 <__alt_data_end+0xfffe9a34>
10109dd0:	90ffff17 	ldw	r3,-4(r18)
10109dd4:	00bfff04 	movi	r2,-4
10109dd8:	a825883a 	mov	r18,r21
10109ddc:	1884703a 	and	r2,r3,r2
10109de0:	80a1883a 	add	r16,r16,r2
10109de4:	003f2406 	br	10109a78 <__alt_data_end+0xfffe9a78>
10109de8:	a8800217 	ldw	r2,8(r21)
10109dec:	b0800415 	stw	r2,16(r22)
10109df0:	a8800317 	ldw	r2,12(r21)
10109df4:	b0800515 	stw	r2,20(r22)
10109df8:	31000a26 	beq	r6,r4,10109e24 <_realloc_r+0x4e4>
10109dfc:	b0800604 	addi	r2,r22,24
10109e00:	ad400404 	addi	r21,r21,16
10109e04:	003fa906 	br	10109cac <__alt_data_end+0xfffe9cac>
10109e08:	a9000417 	ldw	r4,16(r21)
10109e0c:	90800604 	addi	r2,r18,24
10109e10:	a8c00604 	addi	r3,r21,24
10109e14:	91000415 	stw	r4,16(r18)
10109e18:	a9000517 	ldw	r4,20(r21)
10109e1c:	91000515 	stw	r4,20(r18)
10109e20:	003f0406 	br	10109a34 <__alt_data_end+0xfffe9a34>
10109e24:	a8c00417 	ldw	r3,16(r21)
10109e28:	ad400604 	addi	r21,r21,24
10109e2c:	b0800804 	addi	r2,r22,32
10109e30:	b0c00615 	stw	r3,24(r22)
10109e34:	a8ffff17 	ldw	r3,-4(r21)
10109e38:	b0c00715 	stw	r3,28(r22)
10109e3c:	003f9b06 	br	10109cac <__alt_data_end+0xfffe9cac>
10109e40:	9005883a 	mov	r2,r18
10109e44:	003fc706 	br	10109d64 <__alt_data_end+0xfffe9d64>
10109e48:	a80b883a 	mov	r5,r21
10109e4c:	9009883a 	mov	r4,r18
10109e50:	01087880 	call	10108788 <memmove>
10109e54:	003fc906 	br	10109d7c <__alt_data_end+0xfffe9d7c>
10109e58:	a8800217 	ldw	r2,8(r21)
10109e5c:	b0800415 	stw	r2,16(r22)
10109e60:	a8800317 	ldw	r2,12(r21)
10109e64:	b0800515 	stw	r2,20(r22)
10109e68:	31000726 	beq	r6,r4,10109e88 <_realloc_r+0x548>
10109e6c:	b0800604 	addi	r2,r22,24
10109e70:	ad400404 	addi	r21,r21,16
10109e74:	003fbb06 	br	10109d64 <__alt_data_end+0xfffe9d64>
10109e78:	a009883a 	mov	r4,r20
10109e7c:	010f5a00 	call	1010f5a0 <__malloc_unlock>
10109e80:	0005883a 	mov	r2,zero
10109e84:	003f0a06 	br	10109ab0 <__alt_data_end+0xfffe9ab0>
10109e88:	a8c00417 	ldw	r3,16(r21)
10109e8c:	ad400604 	addi	r21,r21,24
10109e90:	b0800804 	addi	r2,r22,32
10109e94:	b0c00615 	stw	r3,24(r22)
10109e98:	a8ffff17 	ldw	r3,-4(r21)
10109e9c:	b0c00715 	stw	r3,28(r22)
10109ea0:	003fb006 	br	10109d64 <__alt_data_end+0xfffe9d64>

10109ea4 <__fpclassifyd>:
10109ea4:	00a00034 	movhi	r2,32768
10109ea8:	10bfffc4 	addi	r2,r2,-1
10109eac:	2884703a 	and	r2,r5,r2
10109eb0:	10000726 	beq	r2,zero,10109ed0 <__fpclassifyd+0x2c>
10109eb4:	00fffc34 	movhi	r3,65520
10109eb8:	019ff834 	movhi	r6,32736
10109ebc:	28c7883a 	add	r3,r5,r3
10109ec0:	31bfffc4 	addi	r6,r6,-1
10109ec4:	30c00536 	bltu	r6,r3,10109edc <__fpclassifyd+0x38>
10109ec8:	00800104 	movi	r2,4
10109ecc:	f800283a 	ret
10109ed0:	2000021e 	bne	r4,zero,10109edc <__fpclassifyd+0x38>
10109ed4:	00800084 	movi	r2,2
10109ed8:	f800283a 	ret
10109edc:	00dffc34 	movhi	r3,32752
10109ee0:	019ff834 	movhi	r6,32736
10109ee4:	28cb883a 	add	r5,r5,r3
10109ee8:	31bfffc4 	addi	r6,r6,-1
10109eec:	317ff62e 	bgeu	r6,r5,10109ec8 <__alt_data_end+0xfffe9ec8>
10109ef0:	01400434 	movhi	r5,16
10109ef4:	297fffc4 	addi	r5,r5,-1
10109ef8:	28800236 	bltu	r5,r2,10109f04 <__fpclassifyd+0x60>
10109efc:	008000c4 	movi	r2,3
10109f00:	f800283a 	ret
10109f04:	10c00226 	beq	r2,r3,10109f10 <__fpclassifyd+0x6c>
10109f08:	0005883a 	mov	r2,zero
10109f0c:	f800283a 	ret
10109f10:	2005003a 	cmpeq	r2,r4,zero
10109f14:	f800283a 	ret

10109f18 <strcmp>:
10109f18:	2144b03a 	or	r2,r4,r5
10109f1c:	108000cc 	andi	r2,r2,3
10109f20:	1000171e 	bne	r2,zero,10109f80 <strcmp+0x68>
10109f24:	20800017 	ldw	r2,0(r4)
10109f28:	28c00017 	ldw	r3,0(r5)
10109f2c:	10c0141e 	bne	r2,r3,10109f80 <strcmp+0x68>
10109f30:	027fbff4 	movhi	r9,65279
10109f34:	4a7fbfc4 	addi	r9,r9,-257
10109f38:	0086303a 	nor	r3,zero,r2
10109f3c:	02202074 	movhi	r8,32897
10109f40:	1245883a 	add	r2,r2,r9
10109f44:	42202004 	addi	r8,r8,-32640
10109f48:	10c4703a 	and	r2,r2,r3
10109f4c:	1204703a 	and	r2,r2,r8
10109f50:	10000226 	beq	r2,zero,10109f5c <strcmp+0x44>
10109f54:	00002306 	br	10109fe4 <strcmp+0xcc>
10109f58:	1000221e 	bne	r2,zero,10109fe4 <strcmp+0xcc>
10109f5c:	21000104 	addi	r4,r4,4
10109f60:	20c00017 	ldw	r3,0(r4)
10109f64:	29400104 	addi	r5,r5,4
10109f68:	29800017 	ldw	r6,0(r5)
10109f6c:	1a4f883a 	add	r7,r3,r9
10109f70:	00c4303a 	nor	r2,zero,r3
10109f74:	3884703a 	and	r2,r7,r2
10109f78:	1204703a 	and	r2,r2,r8
10109f7c:	19bff626 	beq	r3,r6,10109f58 <__alt_data_end+0xfffe9f58>
10109f80:	20800003 	ldbu	r2,0(r4)
10109f84:	10c03fcc 	andi	r3,r2,255
10109f88:	18c0201c 	xori	r3,r3,128
10109f8c:	18ffe004 	addi	r3,r3,-128
10109f90:	18000c26 	beq	r3,zero,10109fc4 <strcmp+0xac>
10109f94:	29800007 	ldb	r6,0(r5)
10109f98:	19800326 	beq	r3,r6,10109fa8 <strcmp+0x90>
10109f9c:	00001306 	br	10109fec <strcmp+0xd4>
10109fa0:	29800007 	ldb	r6,0(r5)
10109fa4:	11800b1e 	bne	r2,r6,10109fd4 <strcmp+0xbc>
10109fa8:	21000044 	addi	r4,r4,1
10109fac:	20c00003 	ldbu	r3,0(r4)
10109fb0:	29400044 	addi	r5,r5,1
10109fb4:	18803fcc 	andi	r2,r3,255
10109fb8:	1080201c 	xori	r2,r2,128
10109fbc:	10bfe004 	addi	r2,r2,-128
10109fc0:	103ff71e 	bne	r2,zero,10109fa0 <__alt_data_end+0xfffe9fa0>
10109fc4:	0007883a 	mov	r3,zero
10109fc8:	28800003 	ldbu	r2,0(r5)
10109fcc:	1885c83a 	sub	r2,r3,r2
10109fd0:	f800283a 	ret
10109fd4:	28800003 	ldbu	r2,0(r5)
10109fd8:	18c03fcc 	andi	r3,r3,255
10109fdc:	1885c83a 	sub	r2,r3,r2
10109fe0:	f800283a 	ret
10109fe4:	0005883a 	mov	r2,zero
10109fe8:	f800283a 	ret
10109fec:	10c03fcc 	andi	r3,r2,255
10109ff0:	003ff506 	br	10109fc8 <__alt_data_end+0xfffe9fc8>

10109ff4 <__sprint_r.part.0>:
10109ff4:	28801917 	ldw	r2,100(r5)
10109ff8:	defff604 	addi	sp,sp,-40
10109ffc:	dd400515 	stw	r21,20(sp)
1010a000:	dfc00915 	stw	ra,36(sp)
1010a004:	df000815 	stw	fp,32(sp)
1010a008:	ddc00715 	stw	r23,28(sp)
1010a00c:	dd800615 	stw	r22,24(sp)
1010a010:	dd000415 	stw	r20,16(sp)
1010a014:	dcc00315 	stw	r19,12(sp)
1010a018:	dc800215 	stw	r18,8(sp)
1010a01c:	dc400115 	stw	r17,4(sp)
1010a020:	dc000015 	stw	r16,0(sp)
1010a024:	1088000c 	andi	r2,r2,8192
1010a028:	302b883a 	mov	r21,r6
1010a02c:	10002e26 	beq	r2,zero,1010a0e8 <__sprint_r.part.0+0xf4>
1010a030:	30800217 	ldw	r2,8(r6)
1010a034:	35800017 	ldw	r22,0(r6)
1010a038:	10002926 	beq	r2,zero,1010a0e0 <__sprint_r.part.0+0xec>
1010a03c:	2827883a 	mov	r19,r5
1010a040:	2029883a 	mov	r20,r4
1010a044:	b5c00104 	addi	r23,r22,4
1010a048:	04bfffc4 	movi	r18,-1
1010a04c:	bc400017 	ldw	r17,0(r23)
1010a050:	b4000017 	ldw	r16,0(r22)
1010a054:	0039883a 	mov	fp,zero
1010a058:	8822d0ba 	srli	r17,r17,2
1010a05c:	8800031e 	bne	r17,zero,1010a06c <__sprint_r.part.0+0x78>
1010a060:	00001806 	br	1010a0c4 <__sprint_r.part.0+0xd0>
1010a064:	84000104 	addi	r16,r16,4
1010a068:	8f001526 	beq	r17,fp,1010a0c0 <__sprint_r.part.0+0xcc>
1010a06c:	81400017 	ldw	r5,0(r16)
1010a070:	980d883a 	mov	r6,r19
1010a074:	a009883a 	mov	r4,r20
1010a078:	010b8640 	call	1010b864 <_fputwc_r>
1010a07c:	e7000044 	addi	fp,fp,1
1010a080:	14bff81e 	bne	r2,r18,1010a064 <__alt_data_end+0xfffea064>
1010a084:	9005883a 	mov	r2,r18
1010a088:	a8000215 	stw	zero,8(r21)
1010a08c:	a8000115 	stw	zero,4(r21)
1010a090:	dfc00917 	ldw	ra,36(sp)
1010a094:	df000817 	ldw	fp,32(sp)
1010a098:	ddc00717 	ldw	r23,28(sp)
1010a09c:	dd800617 	ldw	r22,24(sp)
1010a0a0:	dd400517 	ldw	r21,20(sp)
1010a0a4:	dd000417 	ldw	r20,16(sp)
1010a0a8:	dcc00317 	ldw	r19,12(sp)
1010a0ac:	dc800217 	ldw	r18,8(sp)
1010a0b0:	dc400117 	ldw	r17,4(sp)
1010a0b4:	dc000017 	ldw	r16,0(sp)
1010a0b8:	dec00a04 	addi	sp,sp,40
1010a0bc:	f800283a 	ret
1010a0c0:	a8800217 	ldw	r2,8(r21)
1010a0c4:	8c63883a 	add	r17,r17,r17
1010a0c8:	8c63883a 	add	r17,r17,r17
1010a0cc:	1445c83a 	sub	r2,r2,r17
1010a0d0:	a8800215 	stw	r2,8(r21)
1010a0d4:	b5800204 	addi	r22,r22,8
1010a0d8:	bdc00204 	addi	r23,r23,8
1010a0dc:	103fdb1e 	bne	r2,zero,1010a04c <__alt_data_end+0xfffea04c>
1010a0e0:	0005883a 	mov	r2,zero
1010a0e4:	003fe806 	br	1010a088 <__alt_data_end+0xfffea088>
1010a0e8:	0107f100 	call	10107f10 <__sfvwrite_r>
1010a0ec:	003fe606 	br	1010a088 <__alt_data_end+0xfffea088>

1010a0f0 <__sprint_r>:
1010a0f0:	30c00217 	ldw	r3,8(r6)
1010a0f4:	18000126 	beq	r3,zero,1010a0fc <__sprint_r+0xc>
1010a0f8:	0109ff41 	jmpi	10109ff4 <__sprint_r.part.0>
1010a0fc:	30000115 	stw	zero,4(r6)
1010a100:	0005883a 	mov	r2,zero
1010a104:	f800283a 	ret

1010a108 <___vfiprintf_internal_r>:
1010a108:	deffc904 	addi	sp,sp,-220
1010a10c:	df003515 	stw	fp,212(sp)
1010a110:	dd003115 	stw	r20,196(sp)
1010a114:	dfc03615 	stw	ra,216(sp)
1010a118:	ddc03415 	stw	r23,208(sp)
1010a11c:	dd803315 	stw	r22,204(sp)
1010a120:	dd403215 	stw	r21,200(sp)
1010a124:	dcc03015 	stw	r19,192(sp)
1010a128:	dc802f15 	stw	r18,188(sp)
1010a12c:	dc402e15 	stw	r17,184(sp)
1010a130:	dc002d15 	stw	r16,180(sp)
1010a134:	d9002015 	stw	r4,128(sp)
1010a138:	d9c02215 	stw	r7,136(sp)
1010a13c:	2829883a 	mov	r20,r5
1010a140:	3039883a 	mov	fp,r6
1010a144:	20000226 	beq	r4,zero,1010a150 <___vfiprintf_internal_r+0x48>
1010a148:	20800e17 	ldw	r2,56(r4)
1010a14c:	1000cf26 	beq	r2,zero,1010a48c <___vfiprintf_internal_r+0x384>
1010a150:	a080030b 	ldhu	r2,12(r20)
1010a154:	10c8000c 	andi	r3,r2,8192
1010a158:	1800061e 	bne	r3,zero,1010a174 <___vfiprintf_internal_r+0x6c>
1010a15c:	a1001917 	ldw	r4,100(r20)
1010a160:	00f7ffc4 	movi	r3,-8193
1010a164:	10880014 	ori	r2,r2,8192
1010a168:	20c6703a 	and	r3,r4,r3
1010a16c:	a080030d 	sth	r2,12(r20)
1010a170:	a0c01915 	stw	r3,100(r20)
1010a174:	10c0020c 	andi	r3,r2,8
1010a178:	1800a926 	beq	r3,zero,1010a420 <___vfiprintf_internal_r+0x318>
1010a17c:	a0c00417 	ldw	r3,16(r20)
1010a180:	1800a726 	beq	r3,zero,1010a420 <___vfiprintf_internal_r+0x318>
1010a184:	1080068c 	andi	r2,r2,26
1010a188:	00c00284 	movi	r3,10
1010a18c:	10c0ac26 	beq	r2,r3,1010a440 <___vfiprintf_internal_r+0x338>
1010a190:	da801a04 	addi	r10,sp,104
1010a194:	da801e15 	stw	r10,120(sp)
1010a198:	d8801e17 	ldw	r2,120(sp)
1010a19c:	da8019c4 	addi	r10,sp,103
1010a1a0:	05840474 	movhi	r22,4113
1010a1a4:	05c40474 	movhi	r23,4113
1010a1a8:	da801f15 	stw	r10,124(sp)
1010a1ac:	1295c83a 	sub	r10,r2,r10
1010a1b0:	b585f404 	addi	r22,r22,6096
1010a1b4:	bdc5f004 	addi	r23,r23,6080
1010a1b8:	dec01a15 	stw	sp,104(sp)
1010a1bc:	d8001c15 	stw	zero,112(sp)
1010a1c0:	d8001b15 	stw	zero,108(sp)
1010a1c4:	d8002615 	stw	zero,152(sp)
1010a1c8:	d8002315 	stw	zero,140(sp)
1010a1cc:	da802715 	stw	r10,156(sp)
1010a1d0:	d811883a 	mov	r8,sp
1010a1d4:	dd002115 	stw	r20,132(sp)
1010a1d8:	e021883a 	mov	r16,fp
1010a1dc:	80800007 	ldb	r2,0(r16)
1010a1e0:	1003ea26 	beq	r2,zero,1010b18c <___vfiprintf_internal_r+0x1084>
1010a1e4:	00c00944 	movi	r3,37
1010a1e8:	8025883a 	mov	r18,r16
1010a1ec:	10c0021e 	bne	r2,r3,1010a1f8 <___vfiprintf_internal_r+0xf0>
1010a1f0:	00001606 	br	1010a24c <___vfiprintf_internal_r+0x144>
1010a1f4:	10c00326 	beq	r2,r3,1010a204 <___vfiprintf_internal_r+0xfc>
1010a1f8:	94800044 	addi	r18,r18,1
1010a1fc:	90800007 	ldb	r2,0(r18)
1010a200:	103ffc1e 	bne	r2,zero,1010a1f4 <__alt_data_end+0xfffea1f4>
1010a204:	9423c83a 	sub	r17,r18,r16
1010a208:	88001026 	beq	r17,zero,1010a24c <___vfiprintf_internal_r+0x144>
1010a20c:	d8c01c17 	ldw	r3,112(sp)
1010a210:	d8801b17 	ldw	r2,108(sp)
1010a214:	44000015 	stw	r16,0(r8)
1010a218:	88c7883a 	add	r3,r17,r3
1010a21c:	10800044 	addi	r2,r2,1
1010a220:	44400115 	stw	r17,4(r8)
1010a224:	d8c01c15 	stw	r3,112(sp)
1010a228:	d8801b15 	stw	r2,108(sp)
1010a22c:	010001c4 	movi	r4,7
1010a230:	2080760e 	bge	r4,r2,1010a40c <___vfiprintf_internal_r+0x304>
1010a234:	1803821e 	bne	r3,zero,1010b040 <___vfiprintf_internal_r+0xf38>
1010a238:	da802317 	ldw	r10,140(sp)
1010a23c:	d8001b15 	stw	zero,108(sp)
1010a240:	d811883a 	mov	r8,sp
1010a244:	5455883a 	add	r10,r10,r17
1010a248:	da802315 	stw	r10,140(sp)
1010a24c:	90800007 	ldb	r2,0(r18)
1010a250:	10044626 	beq	r2,zero,1010b36c <___vfiprintf_internal_r+0x1264>
1010a254:	90c00047 	ldb	r3,1(r18)
1010a258:	94000044 	addi	r16,r18,1
1010a25c:	d8001d85 	stb	zero,118(sp)
1010a260:	0009883a 	mov	r4,zero
1010a264:	000f883a 	mov	r7,zero
1010a268:	027fffc4 	movi	r9,-1
1010a26c:	0023883a 	mov	r17,zero
1010a270:	0029883a 	mov	r20,zero
1010a274:	01401604 	movi	r5,88
1010a278:	01800244 	movi	r6,9
1010a27c:	03400a84 	movi	r13,42
1010a280:	03001b04 	movi	r12,108
1010a284:	84000044 	addi	r16,r16,1
1010a288:	18bff804 	addi	r2,r3,-32
1010a28c:	28827336 	bltu	r5,r2,1010ac5c <___vfiprintf_internal_r+0xb54>
1010a290:	100490ba 	slli	r2,r2,2
1010a294:	02840474 	movhi	r10,4113
1010a298:	52a8aa04 	addi	r10,r10,-23896
1010a29c:	1285883a 	add	r2,r2,r10
1010a2a0:	10800017 	ldw	r2,0(r2)
1010a2a4:	1000683a 	jmp	r2
1010a2a8:	1010a990 	cmplti	zero,r2,17062
1010a2ac:	1010ac5c 	xori	zero,r2,17073
1010a2b0:	1010ac5c 	xori	zero,r2,17073
1010a2b4:	1010a9b0 	cmpltui	zero,r2,17062
1010a2b8:	1010ac5c 	xori	zero,r2,17073
1010a2bc:	1010ac5c 	xori	zero,r2,17073
1010a2c0:	1010ac5c 	xori	zero,r2,17073
1010a2c4:	1010ac5c 	xori	zero,r2,17073
1010a2c8:	1010ac5c 	xori	zero,r2,17073
1010a2cc:	1010ac5c 	xori	zero,r2,17073
1010a2d0:	1010ab98 	cmpnei	zero,r2,17070
1010a2d4:	1010abb4 	orhi	zero,r2,17070
1010a2d8:	1010ac5c 	xori	zero,r2,17073
1010a2dc:	1010a49c 	xori	zero,r2,17042
1010a2e0:	1010abc4 	addi	zero,r2,17071
1010a2e4:	1010ac5c 	xori	zero,r2,17073
1010a2e8:	1010a9bc 	xorhi	zero,r2,17062
1010a2ec:	1010a9c8 	cmpgei	zero,r2,17063
1010a2f0:	1010a9c8 	cmpgei	zero,r2,17063
1010a2f4:	1010a9c8 	cmpgei	zero,r2,17063
1010a2f8:	1010a9c8 	cmpgei	zero,r2,17063
1010a2fc:	1010a9c8 	cmpgei	zero,r2,17063
1010a300:	1010a9c8 	cmpgei	zero,r2,17063
1010a304:	1010a9c8 	cmpgei	zero,r2,17063
1010a308:	1010a9c8 	cmpgei	zero,r2,17063
1010a30c:	1010a9c8 	cmpgei	zero,r2,17063
1010a310:	1010ac5c 	xori	zero,r2,17073
1010a314:	1010ac5c 	xori	zero,r2,17073
1010a318:	1010ac5c 	xori	zero,r2,17073
1010a31c:	1010ac5c 	xori	zero,r2,17073
1010a320:	1010ac5c 	xori	zero,r2,17073
1010a324:	1010ac5c 	xori	zero,r2,17073
1010a328:	1010ac5c 	xori	zero,r2,17073
1010a32c:	1010ac5c 	xori	zero,r2,17073
1010a330:	1010ac5c 	xori	zero,r2,17073
1010a334:	1010ac5c 	xori	zero,r2,17073
1010a338:	1010a9f4 	orhi	zero,r2,17063
1010a33c:	1010ac5c 	xori	zero,r2,17073
1010a340:	1010ac5c 	xori	zero,r2,17073
1010a344:	1010ac5c 	xori	zero,r2,17073
1010a348:	1010ac5c 	xori	zero,r2,17073
1010a34c:	1010ac5c 	xori	zero,r2,17073
1010a350:	1010ac5c 	xori	zero,r2,17073
1010a354:	1010ac5c 	xori	zero,r2,17073
1010a358:	1010ac5c 	xori	zero,r2,17073
1010a35c:	1010ac5c 	xori	zero,r2,17073
1010a360:	1010ac5c 	xori	zero,r2,17073
1010a364:	1010aa2c 	andhi	zero,r2,17064
1010a368:	1010ac5c 	xori	zero,r2,17073
1010a36c:	1010ac5c 	xori	zero,r2,17073
1010a370:	1010ac5c 	xori	zero,r2,17073
1010a374:	1010ac5c 	xori	zero,r2,17073
1010a378:	1010ac5c 	xori	zero,r2,17073
1010a37c:	1010aa84 	addi	zero,r2,17066
1010a380:	1010ac5c 	xori	zero,r2,17073
1010a384:	1010ac5c 	xori	zero,r2,17073
1010a388:	1010aaf4 	orhi	zero,r2,17067
1010a38c:	1010ac5c 	xori	zero,r2,17073
1010a390:	1010ac5c 	xori	zero,r2,17073
1010a394:	1010ac5c 	xori	zero,r2,17073
1010a398:	1010ac5c 	xori	zero,r2,17073
1010a39c:	1010ac5c 	xori	zero,r2,17073
1010a3a0:	1010ac5c 	xori	zero,r2,17073
1010a3a4:	1010ac5c 	xori	zero,r2,17073
1010a3a8:	1010ac5c 	xori	zero,r2,17073
1010a3ac:	1010ac5c 	xori	zero,r2,17073
1010a3b0:	1010ac5c 	xori	zero,r2,17073
1010a3b4:	1010a8a0 	cmpeqi	zero,r2,17058
1010a3b8:	1010a8cc 	andi	zero,r2,17059
1010a3bc:	1010ac5c 	xori	zero,r2,17073
1010a3c0:	1010ac5c 	xori	zero,r2,17073
1010a3c4:	1010ac5c 	xori	zero,r2,17073
1010a3c8:	1010ac04 	addi	zero,r2,17072
1010a3cc:	1010a8cc 	andi	zero,r2,17059
1010a3d0:	1010ac5c 	xori	zero,r2,17073
1010a3d4:	1010ac5c 	xori	zero,r2,17073
1010a3d8:	1010a760 	cmpeqi	zero,r2,17053
1010a3dc:	1010ac5c 	xori	zero,r2,17073
1010a3e0:	1010a770 	cmpltui	zero,r2,17053
1010a3e4:	1010a7ac 	andhi	zero,r2,17054
1010a3e8:	1010a4a8 	cmpgeui	zero,r2,17042
1010a3ec:	1010a754 	ori	zero,r2,17053
1010a3f0:	1010ac5c 	xori	zero,r2,17073
1010a3f4:	1010ab30 	cmpltui	zero,r2,17068
1010a3f8:	1010ac5c 	xori	zero,r2,17073
1010a3fc:	1010ab88 	cmpgei	zero,r2,17070
1010a400:	1010ac5c 	xori	zero,r2,17073
1010a404:	1010ac5c 	xori	zero,r2,17073
1010a408:	1010a84c 	andi	zero,r2,17057
1010a40c:	42000204 	addi	r8,r8,8
1010a410:	da802317 	ldw	r10,140(sp)
1010a414:	5455883a 	add	r10,r10,r17
1010a418:	da802315 	stw	r10,140(sp)
1010a41c:	003f8b06 	br	1010a24c <__alt_data_end+0xfffea24c>
1010a420:	d9002017 	ldw	r4,128(sp)
1010a424:	a00b883a 	mov	r5,r20
1010a428:	01064340 	call	10106434 <__swsetup_r>
1010a42c:	1003b11e 	bne	r2,zero,1010b2f4 <___vfiprintf_internal_r+0x11ec>
1010a430:	a080030b 	ldhu	r2,12(r20)
1010a434:	00c00284 	movi	r3,10
1010a438:	1080068c 	andi	r2,r2,26
1010a43c:	10ff541e 	bne	r2,r3,1010a190 <__alt_data_end+0xfffea190>
1010a440:	a080038f 	ldh	r2,14(r20)
1010a444:	103f5216 	blt	r2,zero,1010a190 <__alt_data_end+0xfffea190>
1010a448:	d9c02217 	ldw	r7,136(sp)
1010a44c:	d9002017 	ldw	r4,128(sp)
1010a450:	e00d883a 	mov	r6,fp
1010a454:	a00b883a 	mov	r5,r20
1010a458:	010b5800 	call	1010b580 <__sbprintf>
1010a45c:	dfc03617 	ldw	ra,216(sp)
1010a460:	df003517 	ldw	fp,212(sp)
1010a464:	ddc03417 	ldw	r23,208(sp)
1010a468:	dd803317 	ldw	r22,204(sp)
1010a46c:	dd403217 	ldw	r21,200(sp)
1010a470:	dd003117 	ldw	r20,196(sp)
1010a474:	dcc03017 	ldw	r19,192(sp)
1010a478:	dc802f17 	ldw	r18,188(sp)
1010a47c:	dc402e17 	ldw	r17,184(sp)
1010a480:	dc002d17 	ldw	r16,180(sp)
1010a484:	dec03704 	addi	sp,sp,220
1010a488:	f800283a 	ret
1010a48c:	010231c0 	call	1010231c <__sinit>
1010a490:	003f2f06 	br	1010a150 <__alt_data_end+0xfffea150>
1010a494:	0463c83a 	sub	r17,zero,r17
1010a498:	d8802215 	stw	r2,136(sp)
1010a49c:	a5000114 	ori	r20,r20,4
1010a4a0:	80c00007 	ldb	r3,0(r16)
1010a4a4:	003f7706 	br	1010a284 <__alt_data_end+0xfffea284>
1010a4a8:	00800c04 	movi	r2,48
1010a4ac:	da802217 	ldw	r10,136(sp)
1010a4b0:	d8801d05 	stb	r2,116(sp)
1010a4b4:	00801e04 	movi	r2,120
1010a4b8:	d8801d45 	stb	r2,117(sp)
1010a4bc:	d8001d85 	stb	zero,118(sp)
1010a4c0:	50c00104 	addi	r3,r10,4
1010a4c4:	54800017 	ldw	r18,0(r10)
1010a4c8:	0027883a 	mov	r19,zero
1010a4cc:	a0800094 	ori	r2,r20,2
1010a4d0:	48030b16 	blt	r9,zero,1010b100 <___vfiprintf_internal_r+0xff8>
1010a4d4:	00bfdfc4 	movi	r2,-129
1010a4d8:	a096703a 	and	r11,r20,r2
1010a4dc:	d8c02215 	stw	r3,136(sp)
1010a4e0:	5d000094 	ori	r20,r11,2
1010a4e4:	90032b1e 	bne	r18,zero,1010b194 <___vfiprintf_internal_r+0x108c>
1010a4e8:	00840474 	movhi	r2,4113
1010a4ec:	10859004 	addi	r2,r2,5696
1010a4f0:	d8802615 	stw	r2,152(sp)
1010a4f4:	0039883a 	mov	fp,zero
1010a4f8:	48017b1e 	bne	r9,zero,1010aae8 <___vfiprintf_internal_r+0x9e0>
1010a4fc:	0013883a 	mov	r9,zero
1010a500:	0027883a 	mov	r19,zero
1010a504:	dd401a04 	addi	r21,sp,104
1010a508:	4825883a 	mov	r18,r9
1010a50c:	4cc0010e 	bge	r9,r19,1010a514 <___vfiprintf_internal_r+0x40c>
1010a510:	9825883a 	mov	r18,r19
1010a514:	e7003fcc 	andi	fp,fp,255
1010a518:	e700201c 	xori	fp,fp,128
1010a51c:	e73fe004 	addi	fp,fp,-128
1010a520:	e0000126 	beq	fp,zero,1010a528 <___vfiprintf_internal_r+0x420>
1010a524:	94800044 	addi	r18,r18,1
1010a528:	a380008c 	andi	r14,r20,2
1010a52c:	70000126 	beq	r14,zero,1010a534 <___vfiprintf_internal_r+0x42c>
1010a530:	94800084 	addi	r18,r18,2
1010a534:	a700210c 	andi	fp,r20,132
1010a538:	e001df1e 	bne	fp,zero,1010acb8 <___vfiprintf_internal_r+0xbb0>
1010a53c:	8c87c83a 	sub	r3,r17,r18
1010a540:	00c1dd0e 	bge	zero,r3,1010acb8 <___vfiprintf_internal_r+0xbb0>
1010a544:	01c00404 	movi	r7,16
1010a548:	d8801c17 	ldw	r2,112(sp)
1010a54c:	38c3ad0e 	bge	r7,r3,1010b404 <___vfiprintf_internal_r+0x12fc>
1010a550:	02840474 	movhi	r10,4113
1010a554:	5285f404 	addi	r10,r10,6096
1010a558:	dc002915 	stw	r16,164(sp)
1010a55c:	d9801b17 	ldw	r6,108(sp)
1010a560:	da802415 	stw	r10,144(sp)
1010a564:	03c001c4 	movi	r15,7
1010a568:	da402515 	stw	r9,148(sp)
1010a56c:	db802815 	stw	r14,160(sp)
1010a570:	1821883a 	mov	r16,r3
1010a574:	00000506 	br	1010a58c <___vfiprintf_internal_r+0x484>
1010a578:	31400084 	addi	r5,r6,2
1010a57c:	42000204 	addi	r8,r8,8
1010a580:	200d883a 	mov	r6,r4
1010a584:	843ffc04 	addi	r16,r16,-16
1010a588:	3c000d0e 	bge	r7,r16,1010a5c0 <___vfiprintf_internal_r+0x4b8>
1010a58c:	10800404 	addi	r2,r2,16
1010a590:	31000044 	addi	r4,r6,1
1010a594:	45800015 	stw	r22,0(r8)
1010a598:	41c00115 	stw	r7,4(r8)
1010a59c:	d8801c15 	stw	r2,112(sp)
1010a5a0:	d9001b15 	stw	r4,108(sp)
1010a5a4:	793ff40e 	bge	r15,r4,1010a578 <__alt_data_end+0xfffea578>
1010a5a8:	1001b51e 	bne	r2,zero,1010ac80 <___vfiprintf_internal_r+0xb78>
1010a5ac:	843ffc04 	addi	r16,r16,-16
1010a5b0:	000d883a 	mov	r6,zero
1010a5b4:	01400044 	movi	r5,1
1010a5b8:	d811883a 	mov	r8,sp
1010a5bc:	3c3ff316 	blt	r7,r16,1010a58c <__alt_data_end+0xfffea58c>
1010a5c0:	8007883a 	mov	r3,r16
1010a5c4:	da402517 	ldw	r9,148(sp)
1010a5c8:	db802817 	ldw	r14,160(sp)
1010a5cc:	dc002917 	ldw	r16,164(sp)
1010a5d0:	da802417 	ldw	r10,144(sp)
1010a5d4:	1885883a 	add	r2,r3,r2
1010a5d8:	40c00115 	stw	r3,4(r8)
1010a5dc:	42800015 	stw	r10,0(r8)
1010a5e0:	d8801c15 	stw	r2,112(sp)
1010a5e4:	d9401b15 	stw	r5,108(sp)
1010a5e8:	00c001c4 	movi	r3,7
1010a5ec:	19426016 	blt	r3,r5,1010af70 <___vfiprintf_internal_r+0xe68>
1010a5f0:	d8c01d87 	ldb	r3,118(sp)
1010a5f4:	42000204 	addi	r8,r8,8
1010a5f8:	29000044 	addi	r4,r5,1
1010a5fc:	1801b31e 	bne	r3,zero,1010accc <___vfiprintf_internal_r+0xbc4>
1010a600:	7001c026 	beq	r14,zero,1010ad04 <___vfiprintf_internal_r+0xbfc>
1010a604:	d8c01d04 	addi	r3,sp,116
1010a608:	10800084 	addi	r2,r2,2
1010a60c:	40c00015 	stw	r3,0(r8)
1010a610:	00c00084 	movi	r3,2
1010a614:	40c00115 	stw	r3,4(r8)
1010a618:	d8801c15 	stw	r2,112(sp)
1010a61c:	d9001b15 	stw	r4,108(sp)
1010a620:	00c001c4 	movi	r3,7
1010a624:	1902650e 	bge	r3,r4,1010afbc <___vfiprintf_internal_r+0xeb4>
1010a628:	10029a1e 	bne	r2,zero,1010b094 <___vfiprintf_internal_r+0xf8c>
1010a62c:	00c02004 	movi	r3,128
1010a630:	01000044 	movi	r4,1
1010a634:	000b883a 	mov	r5,zero
1010a638:	d811883a 	mov	r8,sp
1010a63c:	e0c1b31e 	bne	fp,r3,1010ad0c <___vfiprintf_internal_r+0xc04>
1010a640:	8cb9c83a 	sub	fp,r17,r18
1010a644:	0701b10e 	bge	zero,fp,1010ad0c <___vfiprintf_internal_r+0xc04>
1010a648:	01c00404 	movi	r7,16
1010a64c:	3f03890e 	bge	r7,fp,1010b474 <___vfiprintf_internal_r+0x136c>
1010a650:	00c40474 	movhi	r3,4113
1010a654:	18c5f004 	addi	r3,r3,6080
1010a658:	d8c02415 	stw	r3,144(sp)
1010a65c:	8007883a 	mov	r3,r16
1010a660:	034001c4 	movi	r13,7
1010a664:	e021883a 	mov	r16,fp
1010a668:	da402515 	stw	r9,148(sp)
1010a66c:	1839883a 	mov	fp,r3
1010a670:	00000506 	br	1010a688 <___vfiprintf_internal_r+0x580>
1010a674:	29800084 	addi	r6,r5,2
1010a678:	42000204 	addi	r8,r8,8
1010a67c:	180b883a 	mov	r5,r3
1010a680:	843ffc04 	addi	r16,r16,-16
1010a684:	3c000d0e 	bge	r7,r16,1010a6bc <___vfiprintf_internal_r+0x5b4>
1010a688:	10800404 	addi	r2,r2,16
1010a68c:	28c00044 	addi	r3,r5,1
1010a690:	45c00015 	stw	r23,0(r8)
1010a694:	41c00115 	stw	r7,4(r8)
1010a698:	d8801c15 	stw	r2,112(sp)
1010a69c:	d8c01b15 	stw	r3,108(sp)
1010a6a0:	68fff40e 	bge	r13,r3,1010a674 <__alt_data_end+0xfffea674>
1010a6a4:	1002241e 	bne	r2,zero,1010af38 <___vfiprintf_internal_r+0xe30>
1010a6a8:	843ffc04 	addi	r16,r16,-16
1010a6ac:	01800044 	movi	r6,1
1010a6b0:	000b883a 	mov	r5,zero
1010a6b4:	d811883a 	mov	r8,sp
1010a6b8:	3c3ff316 	blt	r7,r16,1010a688 <__alt_data_end+0xfffea688>
1010a6bc:	da402517 	ldw	r9,148(sp)
1010a6c0:	e007883a 	mov	r3,fp
1010a6c4:	8039883a 	mov	fp,r16
1010a6c8:	1821883a 	mov	r16,r3
1010a6cc:	d8c02417 	ldw	r3,144(sp)
1010a6d0:	1705883a 	add	r2,r2,fp
1010a6d4:	47000115 	stw	fp,4(r8)
1010a6d8:	40c00015 	stw	r3,0(r8)
1010a6dc:	d8801c15 	stw	r2,112(sp)
1010a6e0:	d9801b15 	stw	r6,108(sp)
1010a6e4:	00c001c4 	movi	r3,7
1010a6e8:	19827616 	blt	r3,r6,1010b0c4 <___vfiprintf_internal_r+0xfbc>
1010a6ec:	4cf9c83a 	sub	fp,r9,r19
1010a6f0:	42000204 	addi	r8,r8,8
1010a6f4:	31000044 	addi	r4,r6,1
1010a6f8:	300b883a 	mov	r5,r6
1010a6fc:	07018516 	blt	zero,fp,1010ad14 <___vfiprintf_internal_r+0xc0c>
1010a700:	9885883a 	add	r2,r19,r2
1010a704:	45400015 	stw	r21,0(r8)
1010a708:	44c00115 	stw	r19,4(r8)
1010a70c:	d8801c15 	stw	r2,112(sp)
1010a710:	d9001b15 	stw	r4,108(sp)
1010a714:	00c001c4 	movi	r3,7
1010a718:	1901dd0e 	bge	r3,r4,1010ae90 <___vfiprintf_internal_r+0xd88>
1010a71c:	1002401e 	bne	r2,zero,1010b020 <___vfiprintf_internal_r+0xf18>
1010a720:	d8001b15 	stw	zero,108(sp)
1010a724:	a2c0010c 	andi	r11,r20,4
1010a728:	58000226 	beq	r11,zero,1010a734 <___vfiprintf_internal_r+0x62c>
1010a72c:	8ca7c83a 	sub	r19,r17,r18
1010a730:	04c2f216 	blt	zero,r19,1010b2fc <___vfiprintf_internal_r+0x11f4>
1010a734:	8c80010e 	bge	r17,r18,1010a73c <___vfiprintf_internal_r+0x634>
1010a738:	9023883a 	mov	r17,r18
1010a73c:	da802317 	ldw	r10,140(sp)
1010a740:	5455883a 	add	r10,r10,r17
1010a744:	da802315 	stw	r10,140(sp)
1010a748:	d8001b15 	stw	zero,108(sp)
1010a74c:	d811883a 	mov	r8,sp
1010a750:	003ea206 	br	1010a1dc <__alt_data_end+0xfffea1dc>
1010a754:	a5000814 	ori	r20,r20,32
1010a758:	80c00007 	ldb	r3,0(r16)
1010a75c:	003ec906 	br	1010a284 <__alt_data_end+0xfffea284>
1010a760:	80c00007 	ldb	r3,0(r16)
1010a764:	1b030926 	beq	r3,r12,1010b38c <___vfiprintf_internal_r+0x1284>
1010a768:	a5000414 	ori	r20,r20,16
1010a76c:	003ec506 	br	1010a284 <__alt_data_end+0xfffea284>
1010a770:	21003fcc 	andi	r4,r4,255
1010a774:	20035e1e 	bne	r4,zero,1010b4f0 <___vfiprintf_internal_r+0x13e8>
1010a778:	a080080c 	andi	r2,r20,32
1010a77c:	1002a526 	beq	r2,zero,1010b214 <___vfiprintf_internal_r+0x110c>
1010a780:	da802217 	ldw	r10,136(sp)
1010a784:	50800017 	ldw	r2,0(r10)
1010a788:	da802317 	ldw	r10,140(sp)
1010a78c:	5007d7fa 	srai	r3,r10,31
1010a790:	da802217 	ldw	r10,136(sp)
1010a794:	10c00115 	stw	r3,4(r2)
1010a798:	52800104 	addi	r10,r10,4
1010a79c:	da802215 	stw	r10,136(sp)
1010a7a0:	da802317 	ldw	r10,140(sp)
1010a7a4:	12800015 	stw	r10,0(r2)
1010a7a8:	003e8c06 	br	1010a1dc <__alt_data_end+0xfffea1dc>
1010a7ac:	21003fcc 	andi	r4,r4,255
1010a7b0:	2003511e 	bne	r4,zero,1010b4f8 <___vfiprintf_internal_r+0x13f0>
1010a7b4:	a080080c 	andi	r2,r20,32
1010a7b8:	1000a126 	beq	r2,zero,1010aa40 <___vfiprintf_internal_r+0x938>
1010a7bc:	da802217 	ldw	r10,136(sp)
1010a7c0:	d8001d85 	stb	zero,118(sp)
1010a7c4:	50800204 	addi	r2,r10,8
1010a7c8:	54800017 	ldw	r18,0(r10)
1010a7cc:	54c00117 	ldw	r19,4(r10)
1010a7d0:	4802b416 	blt	r9,zero,1010b2a4 <___vfiprintf_internal_r+0x119c>
1010a7d4:	013fdfc4 	movi	r4,-129
1010a7d8:	94c6b03a 	or	r3,r18,r19
1010a7dc:	d8802215 	stw	r2,136(sp)
1010a7e0:	a128703a 	and	r20,r20,r4
1010a7e4:	1800a226 	beq	r3,zero,1010aa70 <___vfiprintf_internal_r+0x968>
1010a7e8:	0039883a 	mov	fp,zero
1010a7ec:	dd401a04 	addi	r21,sp,104
1010a7f0:	9006d0fa 	srli	r3,r18,3
1010a7f4:	9808977a 	slli	r4,r19,29
1010a7f8:	9826d0fa 	srli	r19,r19,3
1010a7fc:	948001cc 	andi	r18,r18,7
1010a800:	90800c04 	addi	r2,r18,48
1010a804:	ad7fffc4 	addi	r21,r21,-1
1010a808:	20e4b03a 	or	r18,r4,r3
1010a80c:	a8800005 	stb	r2,0(r21)
1010a810:	94c6b03a 	or	r3,r18,r19
1010a814:	183ff61e 	bne	r3,zero,1010a7f0 <__alt_data_end+0xfffea7f0>
1010a818:	a0c0004c 	andi	r3,r20,1
1010a81c:	18005926 	beq	r3,zero,1010a984 <___vfiprintf_internal_r+0x87c>
1010a820:	10803fcc 	andi	r2,r2,255
1010a824:	1080201c 	xori	r2,r2,128
1010a828:	10bfe004 	addi	r2,r2,-128
1010a82c:	00c00c04 	movi	r3,48
1010a830:	10c05426 	beq	r2,r3,1010a984 <___vfiprintf_internal_r+0x87c>
1010a834:	da801e17 	ldw	r10,120(sp)
1010a838:	a8bfffc4 	addi	r2,r21,-1
1010a83c:	a8ffffc5 	stb	r3,-1(r21)
1010a840:	50a7c83a 	sub	r19,r10,r2
1010a844:	102b883a 	mov	r21,r2
1010a848:	003f2f06 	br	1010a508 <__alt_data_end+0xfffea508>
1010a84c:	21003fcc 	andi	r4,r4,255
1010a850:	2003421e 	bne	r4,zero,1010b55c <___vfiprintf_internal_r+0x1454>
1010a854:	00840474 	movhi	r2,4113
1010a858:	10859004 	addi	r2,r2,5696
1010a85c:	d8802615 	stw	r2,152(sp)
1010a860:	a080080c 	andi	r2,r20,32
1010a864:	1000aa26 	beq	r2,zero,1010ab10 <___vfiprintf_internal_r+0xa08>
1010a868:	da802217 	ldw	r10,136(sp)
1010a86c:	54800017 	ldw	r18,0(r10)
1010a870:	54c00117 	ldw	r19,4(r10)
1010a874:	52800204 	addi	r10,r10,8
1010a878:	da802215 	stw	r10,136(sp)
1010a87c:	a080004c 	andi	r2,r20,1
1010a880:	1001d226 	beq	r2,zero,1010afcc <___vfiprintf_internal_r+0xec4>
1010a884:	94c4b03a 	or	r2,r18,r19
1010a888:	1002351e 	bne	r2,zero,1010b160 <___vfiprintf_internal_r+0x1058>
1010a88c:	d8001d85 	stb	zero,118(sp)
1010a890:	48022216 	blt	r9,zero,1010b11c <___vfiprintf_internal_r+0x1014>
1010a894:	00bfdfc4 	movi	r2,-129
1010a898:	a0a8703a 	and	r20,r20,r2
1010a89c:	003f1506 	br	1010a4f4 <__alt_data_end+0xfffea4f4>
1010a8a0:	da802217 	ldw	r10,136(sp)
1010a8a4:	04800044 	movi	r18,1
1010a8a8:	d8001d85 	stb	zero,118(sp)
1010a8ac:	50800017 	ldw	r2,0(r10)
1010a8b0:	52800104 	addi	r10,r10,4
1010a8b4:	da802215 	stw	r10,136(sp)
1010a8b8:	d8801005 	stb	r2,64(sp)
1010a8bc:	9027883a 	mov	r19,r18
1010a8c0:	dd401004 	addi	r21,sp,64
1010a8c4:	0013883a 	mov	r9,zero
1010a8c8:	003f1706 	br	1010a528 <__alt_data_end+0xfffea528>
1010a8cc:	21003fcc 	andi	r4,r4,255
1010a8d0:	2003201e 	bne	r4,zero,1010b554 <___vfiprintf_internal_r+0x144c>
1010a8d4:	a080080c 	andi	r2,r20,32
1010a8d8:	10004b26 	beq	r2,zero,1010aa08 <___vfiprintf_internal_r+0x900>
1010a8dc:	da802217 	ldw	r10,136(sp)
1010a8e0:	50800117 	ldw	r2,4(r10)
1010a8e4:	54800017 	ldw	r18,0(r10)
1010a8e8:	52800204 	addi	r10,r10,8
1010a8ec:	da802215 	stw	r10,136(sp)
1010a8f0:	1027883a 	mov	r19,r2
1010a8f4:	10022c16 	blt	r2,zero,1010b1a8 <___vfiprintf_internal_r+0x10a0>
1010a8f8:	df001d83 	ldbu	fp,118(sp)
1010a8fc:	48007216 	blt	r9,zero,1010aac8 <___vfiprintf_internal_r+0x9c0>
1010a900:	00ffdfc4 	movi	r3,-129
1010a904:	94c4b03a 	or	r2,r18,r19
1010a908:	a0e8703a 	and	r20,r20,r3
1010a90c:	1000cc26 	beq	r2,zero,1010ac40 <___vfiprintf_internal_r+0xb38>
1010a910:	98021026 	beq	r19,zero,1010b154 <___vfiprintf_internal_r+0x104c>
1010a914:	dc402415 	stw	r17,144(sp)
1010a918:	dc002515 	stw	r16,148(sp)
1010a91c:	9823883a 	mov	r17,r19
1010a920:	9021883a 	mov	r16,r18
1010a924:	dd401a04 	addi	r21,sp,104
1010a928:	4825883a 	mov	r18,r9
1010a92c:	4027883a 	mov	r19,r8
1010a930:	8009883a 	mov	r4,r16
1010a934:	880b883a 	mov	r5,r17
1010a938:	01800284 	movi	r6,10
1010a93c:	000f883a 	mov	r7,zero
1010a940:	010c1c00 	call	1010c1c0 <__umoddi3>
1010a944:	10800c04 	addi	r2,r2,48
1010a948:	ad7fffc4 	addi	r21,r21,-1
1010a94c:	8009883a 	mov	r4,r16
1010a950:	880b883a 	mov	r5,r17
1010a954:	a8800005 	stb	r2,0(r21)
1010a958:	01800284 	movi	r6,10
1010a95c:	000f883a 	mov	r7,zero
1010a960:	010bc480 	call	1010bc48 <__udivdi3>
1010a964:	1021883a 	mov	r16,r2
1010a968:	10c4b03a 	or	r2,r2,r3
1010a96c:	1823883a 	mov	r17,r3
1010a970:	103fef1e 	bne	r2,zero,1010a930 <__alt_data_end+0xfffea930>
1010a974:	dc402417 	ldw	r17,144(sp)
1010a978:	dc002517 	ldw	r16,148(sp)
1010a97c:	9013883a 	mov	r9,r18
1010a980:	9811883a 	mov	r8,r19
1010a984:	da801e17 	ldw	r10,120(sp)
1010a988:	5567c83a 	sub	r19,r10,r21
1010a98c:	003ede06 	br	1010a508 <__alt_data_end+0xfffea508>
1010a990:	38803fcc 	andi	r2,r7,255
1010a994:	1080201c 	xori	r2,r2,128
1010a998:	10bfe004 	addi	r2,r2,-128
1010a99c:	1002371e 	bne	r2,zero,1010b27c <___vfiprintf_internal_r+0x1174>
1010a9a0:	01000044 	movi	r4,1
1010a9a4:	01c00804 	movi	r7,32
1010a9a8:	80c00007 	ldb	r3,0(r16)
1010a9ac:	003e3506 	br	1010a284 <__alt_data_end+0xfffea284>
1010a9b0:	a5000054 	ori	r20,r20,1
1010a9b4:	80c00007 	ldb	r3,0(r16)
1010a9b8:	003e3206 	br	1010a284 <__alt_data_end+0xfffea284>
1010a9bc:	a5002014 	ori	r20,r20,128
1010a9c0:	80c00007 	ldb	r3,0(r16)
1010a9c4:	003e2f06 	br	1010a284 <__alt_data_end+0xfffea284>
1010a9c8:	8015883a 	mov	r10,r16
1010a9cc:	0023883a 	mov	r17,zero
1010a9d0:	18bff404 	addi	r2,r3,-48
1010a9d4:	50c00007 	ldb	r3,0(r10)
1010a9d8:	8c4002a4 	muli	r17,r17,10
1010a9dc:	84000044 	addi	r16,r16,1
1010a9e0:	8015883a 	mov	r10,r16
1010a9e4:	1463883a 	add	r17,r2,r17
1010a9e8:	18bff404 	addi	r2,r3,-48
1010a9ec:	30bff92e 	bgeu	r6,r2,1010a9d4 <__alt_data_end+0xfffea9d4>
1010a9f0:	003e2506 	br	1010a288 <__alt_data_end+0xfffea288>
1010a9f4:	21003fcc 	andi	r4,r4,255
1010a9f8:	2002d41e 	bne	r4,zero,1010b54c <___vfiprintf_internal_r+0x1444>
1010a9fc:	a5000414 	ori	r20,r20,16
1010aa00:	a080080c 	andi	r2,r20,32
1010aa04:	103fb51e 	bne	r2,zero,1010a8dc <__alt_data_end+0xfffea8dc>
1010aa08:	a080040c 	andi	r2,r20,16
1010aa0c:	1001f826 	beq	r2,zero,1010b1f0 <___vfiprintf_internal_r+0x10e8>
1010aa10:	da802217 	ldw	r10,136(sp)
1010aa14:	54800017 	ldw	r18,0(r10)
1010aa18:	52800104 	addi	r10,r10,4
1010aa1c:	da802215 	stw	r10,136(sp)
1010aa20:	9027d7fa 	srai	r19,r18,31
1010aa24:	9805883a 	mov	r2,r19
1010aa28:	003fb206 	br	1010a8f4 <__alt_data_end+0xfffea8f4>
1010aa2c:	21003fcc 	andi	r4,r4,255
1010aa30:	2002c41e 	bne	r4,zero,1010b544 <___vfiprintf_internal_r+0x143c>
1010aa34:	a5000414 	ori	r20,r20,16
1010aa38:	a080080c 	andi	r2,r20,32
1010aa3c:	103f5f1e 	bne	r2,zero,1010a7bc <__alt_data_end+0xfffea7bc>
1010aa40:	a080040c 	andi	r2,r20,16
1010aa44:	10020f26 	beq	r2,zero,1010b284 <___vfiprintf_internal_r+0x117c>
1010aa48:	da802217 	ldw	r10,136(sp)
1010aa4c:	d8001d85 	stb	zero,118(sp)
1010aa50:	0027883a 	mov	r19,zero
1010aa54:	50800104 	addi	r2,r10,4
1010aa58:	54800017 	ldw	r18,0(r10)
1010aa5c:	48021116 	blt	r9,zero,1010b2a4 <___vfiprintf_internal_r+0x119c>
1010aa60:	00ffdfc4 	movi	r3,-129
1010aa64:	d8802215 	stw	r2,136(sp)
1010aa68:	a0e8703a 	and	r20,r20,r3
1010aa6c:	903f5e1e 	bne	r18,zero,1010a7e8 <__alt_data_end+0xfffea7e8>
1010aa70:	0039883a 	mov	fp,zero
1010aa74:	4802a626 	beq	r9,zero,1010b510 <___vfiprintf_internal_r+0x1408>
1010aa78:	0025883a 	mov	r18,zero
1010aa7c:	0027883a 	mov	r19,zero
1010aa80:	003f5a06 	br	1010a7ec <__alt_data_end+0xfffea7ec>
1010aa84:	21003fcc 	andi	r4,r4,255
1010aa88:	20029f1e 	bne	r4,zero,1010b508 <___vfiprintf_internal_r+0x1400>
1010aa8c:	a5000414 	ori	r20,r20,16
1010aa90:	a080080c 	andi	r2,r20,32
1010aa94:	10005e1e 	bne	r2,zero,1010ac10 <___vfiprintf_internal_r+0xb08>
1010aa98:	a080040c 	andi	r2,r20,16
1010aa9c:	1001a21e 	bne	r2,zero,1010b128 <___vfiprintf_internal_r+0x1020>
1010aaa0:	a080100c 	andi	r2,r20,64
1010aaa4:	d8001d85 	stb	zero,118(sp)
1010aaa8:	da802217 	ldw	r10,136(sp)
1010aaac:	1002231e 	bne	r2,zero,1010b33c <___vfiprintf_internal_r+0x1234>
1010aab0:	50800104 	addi	r2,r10,4
1010aab4:	54800017 	ldw	r18,0(r10)
1010aab8:	0027883a 	mov	r19,zero
1010aabc:	4801a00e 	bge	r9,zero,1010b140 <___vfiprintf_internal_r+0x1038>
1010aac0:	d8802215 	stw	r2,136(sp)
1010aac4:	0039883a 	mov	fp,zero
1010aac8:	94c4b03a 	or	r2,r18,r19
1010aacc:	103f901e 	bne	r2,zero,1010a910 <__alt_data_end+0xfffea910>
1010aad0:	00800044 	movi	r2,1
1010aad4:	10803fcc 	andi	r2,r2,255
1010aad8:	00c00044 	movi	r3,1
1010aadc:	10c05926 	beq	r2,r3,1010ac44 <___vfiprintf_internal_r+0xb3c>
1010aae0:	00c00084 	movi	r3,2
1010aae4:	10ffe41e 	bne	r2,r3,1010aa78 <__alt_data_end+0xfffeaa78>
1010aae8:	0025883a 	mov	r18,zero
1010aaec:	0027883a 	mov	r19,zero
1010aaf0:	00013d06 	br	1010afe8 <___vfiprintf_internal_r+0xee0>
1010aaf4:	21003fcc 	andi	r4,r4,255
1010aaf8:	2002811e 	bne	r4,zero,1010b500 <___vfiprintf_internal_r+0x13f8>
1010aafc:	00840474 	movhi	r2,4113
1010ab00:	10858b04 	addi	r2,r2,5676
1010ab04:	d8802615 	stw	r2,152(sp)
1010ab08:	a080080c 	andi	r2,r20,32
1010ab0c:	103f561e 	bne	r2,zero,1010a868 <__alt_data_end+0xfffea868>
1010ab10:	a080040c 	andi	r2,r20,16
1010ab14:	1001d126 	beq	r2,zero,1010b25c <___vfiprintf_internal_r+0x1154>
1010ab18:	da802217 	ldw	r10,136(sp)
1010ab1c:	0027883a 	mov	r19,zero
1010ab20:	54800017 	ldw	r18,0(r10)
1010ab24:	52800104 	addi	r10,r10,4
1010ab28:	da802215 	stw	r10,136(sp)
1010ab2c:	003f5306 	br	1010a87c <__alt_data_end+0xfffea87c>
1010ab30:	da802217 	ldw	r10,136(sp)
1010ab34:	d8001d85 	stb	zero,118(sp)
1010ab38:	55400017 	ldw	r21,0(r10)
1010ab3c:	50c00104 	addi	r3,r10,4
1010ab40:	a8024226 	beq	r21,zero,1010b44c <___vfiprintf_internal_r+0x1344>
1010ab44:	48021816 	blt	r9,zero,1010b3a8 <___vfiprintf_internal_r+0x12a0>
1010ab48:	480d883a 	mov	r6,r9
1010ab4c:	000b883a 	mov	r5,zero
1010ab50:	a809883a 	mov	r4,r21
1010ab54:	d8c02a15 	stw	r3,168(sp)
1010ab58:	da002b15 	stw	r8,172(sp)
1010ab5c:	da402c15 	stw	r9,176(sp)
1010ab60:	010855c0 	call	1010855c <memchr>
1010ab64:	d8c02a17 	ldw	r3,168(sp)
1010ab68:	da002b17 	ldw	r8,172(sp)
1010ab6c:	da402c17 	ldw	r9,176(sp)
1010ab70:	10024826 	beq	r2,zero,1010b494 <___vfiprintf_internal_r+0x138c>
1010ab74:	1567c83a 	sub	r19,r2,r21
1010ab78:	df001d83 	ldbu	fp,118(sp)
1010ab7c:	d8c02215 	stw	r3,136(sp)
1010ab80:	0013883a 	mov	r9,zero
1010ab84:	003e6006 	br	1010a508 <__alt_data_end+0xfffea508>
1010ab88:	21003fcc 	andi	r4,r4,255
1010ab8c:	203fc026 	beq	r4,zero,1010aa90 <__alt_data_end+0xfffeaa90>
1010ab90:	d9c01d85 	stb	r7,118(sp)
1010ab94:	003fbe06 	br	1010aa90 <__alt_data_end+0xfffeaa90>
1010ab98:	da802217 	ldw	r10,136(sp)
1010ab9c:	54400017 	ldw	r17,0(r10)
1010aba0:	50800104 	addi	r2,r10,4
1010aba4:	883e3b16 	blt	r17,zero,1010a494 <__alt_data_end+0xfffea494>
1010aba8:	d8802215 	stw	r2,136(sp)
1010abac:	80c00007 	ldb	r3,0(r16)
1010abb0:	003db406 	br	1010a284 <__alt_data_end+0xfffea284>
1010abb4:	01000044 	movi	r4,1
1010abb8:	01c00ac4 	movi	r7,43
1010abbc:	80c00007 	ldb	r3,0(r16)
1010abc0:	003db006 	br	1010a284 <__alt_data_end+0xfffea284>
1010abc4:	80c00007 	ldb	r3,0(r16)
1010abc8:	82800044 	addi	r10,r16,1
1010abcc:	1b423c26 	beq	r3,r13,1010b4c0 <___vfiprintf_internal_r+0x13b8>
1010abd0:	18bff404 	addi	r2,r3,-48
1010abd4:	0013883a 	mov	r9,zero
1010abd8:	30822b36 	bltu	r6,r2,1010b488 <___vfiprintf_internal_r+0x1380>
1010abdc:	50c00007 	ldb	r3,0(r10)
1010abe0:	4a4002a4 	muli	r9,r9,10
1010abe4:	54000044 	addi	r16,r10,1
1010abe8:	8015883a 	mov	r10,r16
1010abec:	4893883a 	add	r9,r9,r2
1010abf0:	18bff404 	addi	r2,r3,-48
1010abf4:	30bff92e 	bgeu	r6,r2,1010abdc <__alt_data_end+0xfffeabdc>
1010abf8:	483da30e 	bge	r9,zero,1010a288 <__alt_data_end+0xfffea288>
1010abfc:	027fffc4 	movi	r9,-1
1010ac00:	003da106 	br	1010a288 <__alt_data_end+0xfffea288>
1010ac04:	a5001014 	ori	r20,r20,64
1010ac08:	80c00007 	ldb	r3,0(r16)
1010ac0c:	003d9d06 	br	1010a284 <__alt_data_end+0xfffea284>
1010ac10:	da802217 	ldw	r10,136(sp)
1010ac14:	d8001d85 	stb	zero,118(sp)
1010ac18:	50c00204 	addi	r3,r10,8
1010ac1c:	54800017 	ldw	r18,0(r10)
1010ac20:	54c00117 	ldw	r19,4(r10)
1010ac24:	4801ca16 	blt	r9,zero,1010b350 <___vfiprintf_internal_r+0x1248>
1010ac28:	013fdfc4 	movi	r4,-129
1010ac2c:	94c4b03a 	or	r2,r18,r19
1010ac30:	d8c02215 	stw	r3,136(sp)
1010ac34:	a128703a 	and	r20,r20,r4
1010ac38:	0039883a 	mov	fp,zero
1010ac3c:	103f341e 	bne	r2,zero,1010a910 <__alt_data_end+0xfffea910>
1010ac40:	483e2e26 	beq	r9,zero,1010a4fc <__alt_data_end+0xfffea4fc>
1010ac44:	0025883a 	mov	r18,zero
1010ac48:	94800c04 	addi	r18,r18,48
1010ac4c:	dc8019c5 	stb	r18,103(sp)
1010ac50:	dcc02717 	ldw	r19,156(sp)
1010ac54:	dd4019c4 	addi	r21,sp,103
1010ac58:	003e2b06 	br	1010a508 <__alt_data_end+0xfffea508>
1010ac5c:	21003fcc 	andi	r4,r4,255
1010ac60:	2002361e 	bne	r4,zero,1010b53c <___vfiprintf_internal_r+0x1434>
1010ac64:	1801c126 	beq	r3,zero,1010b36c <___vfiprintf_internal_r+0x1264>
1010ac68:	04800044 	movi	r18,1
1010ac6c:	d8c01005 	stb	r3,64(sp)
1010ac70:	d8001d85 	stb	zero,118(sp)
1010ac74:	9027883a 	mov	r19,r18
1010ac78:	dd401004 	addi	r21,sp,64
1010ac7c:	003f1106 	br	1010a8c4 <__alt_data_end+0xfffea8c4>
1010ac80:	d9402117 	ldw	r5,132(sp)
1010ac84:	d9002017 	ldw	r4,128(sp)
1010ac88:	d9801a04 	addi	r6,sp,104
1010ac8c:	d9c02b15 	stw	r7,172(sp)
1010ac90:	dbc02a15 	stw	r15,168(sp)
1010ac94:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010ac98:	d9c02b17 	ldw	r7,172(sp)
1010ac9c:	dbc02a17 	ldw	r15,168(sp)
1010aca0:	10006d1e 	bne	r2,zero,1010ae58 <___vfiprintf_internal_r+0xd50>
1010aca4:	d9801b17 	ldw	r6,108(sp)
1010aca8:	d8801c17 	ldw	r2,112(sp)
1010acac:	d811883a 	mov	r8,sp
1010acb0:	31400044 	addi	r5,r6,1
1010acb4:	003e3306 	br	1010a584 <__alt_data_end+0xfffea584>
1010acb8:	d9401b17 	ldw	r5,108(sp)
1010acbc:	d8801c17 	ldw	r2,112(sp)
1010acc0:	29000044 	addi	r4,r5,1
1010acc4:	d8c01d87 	ldb	r3,118(sp)
1010acc8:	183e4d26 	beq	r3,zero,1010a600 <__alt_data_end+0xfffea600>
1010accc:	00c00044 	movi	r3,1
1010acd0:	d9401d84 	addi	r5,sp,118
1010acd4:	10c5883a 	add	r2,r2,r3
1010acd8:	41400015 	stw	r5,0(r8)
1010acdc:	40c00115 	stw	r3,4(r8)
1010ace0:	d8801c15 	stw	r2,112(sp)
1010ace4:	d9001b15 	stw	r4,108(sp)
1010ace8:	014001c4 	movi	r5,7
1010acec:	2900a90e 	bge	r5,r4,1010af94 <___vfiprintf_internal_r+0xe8c>
1010acf0:	1000da1e 	bne	r2,zero,1010b05c <___vfiprintf_internal_r+0xf54>
1010acf4:	7000ab1e 	bne	r14,zero,1010afa4 <___vfiprintf_internal_r+0xe9c>
1010acf8:	000b883a 	mov	r5,zero
1010acfc:	1809883a 	mov	r4,r3
1010ad00:	d811883a 	mov	r8,sp
1010ad04:	00c02004 	movi	r3,128
1010ad08:	e0fe4d26 	beq	fp,r3,1010a640 <__alt_data_end+0xfffea640>
1010ad0c:	4cf9c83a 	sub	fp,r9,r19
1010ad10:	073e7b0e 	bge	zero,fp,1010a700 <__alt_data_end+0xfffea700>
1010ad14:	01c00404 	movi	r7,16
1010ad18:	3f01900e 	bge	r7,fp,1010b35c <___vfiprintf_internal_r+0x1254>
1010ad1c:	00c40474 	movhi	r3,4113
1010ad20:	18c5f004 	addi	r3,r3,6080
1010ad24:	d8c02415 	stw	r3,144(sp)
1010ad28:	034001c4 	movi	r13,7
1010ad2c:	00000506 	br	1010ad44 <___vfiprintf_internal_r+0xc3c>
1010ad30:	29000084 	addi	r4,r5,2
1010ad34:	42000204 	addi	r8,r8,8
1010ad38:	180b883a 	mov	r5,r3
1010ad3c:	e73ffc04 	addi	fp,fp,-16
1010ad40:	3f000d0e 	bge	r7,fp,1010ad78 <___vfiprintf_internal_r+0xc70>
1010ad44:	10800404 	addi	r2,r2,16
1010ad48:	28c00044 	addi	r3,r5,1
1010ad4c:	45c00015 	stw	r23,0(r8)
1010ad50:	41c00115 	stw	r7,4(r8)
1010ad54:	d8801c15 	stw	r2,112(sp)
1010ad58:	d8c01b15 	stw	r3,108(sp)
1010ad5c:	68fff40e 	bge	r13,r3,1010ad30 <__alt_data_end+0xfffead30>
1010ad60:	1000101e 	bne	r2,zero,1010ada4 <___vfiprintf_internal_r+0xc9c>
1010ad64:	e73ffc04 	addi	fp,fp,-16
1010ad68:	01000044 	movi	r4,1
1010ad6c:	000b883a 	mov	r5,zero
1010ad70:	d811883a 	mov	r8,sp
1010ad74:	3f3ff316 	blt	r7,fp,1010ad44 <__alt_data_end+0xfffead44>
1010ad78:	da802417 	ldw	r10,144(sp)
1010ad7c:	1705883a 	add	r2,r2,fp
1010ad80:	47000115 	stw	fp,4(r8)
1010ad84:	42800015 	stw	r10,0(r8)
1010ad88:	d8801c15 	stw	r2,112(sp)
1010ad8c:	d9001b15 	stw	r4,108(sp)
1010ad90:	00c001c4 	movi	r3,7
1010ad94:	19003616 	blt	r3,r4,1010ae70 <___vfiprintf_internal_r+0xd68>
1010ad98:	42000204 	addi	r8,r8,8
1010ad9c:	21000044 	addi	r4,r4,1
1010ada0:	003e5706 	br	1010a700 <__alt_data_end+0xfffea700>
1010ada4:	d9402117 	ldw	r5,132(sp)
1010ada8:	d9002017 	ldw	r4,128(sp)
1010adac:	d9801a04 	addi	r6,sp,104
1010adb0:	d9c02b15 	stw	r7,172(sp)
1010adb4:	db402a15 	stw	r13,168(sp)
1010adb8:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010adbc:	d9c02b17 	ldw	r7,172(sp)
1010adc0:	db402a17 	ldw	r13,168(sp)
1010adc4:	1000241e 	bne	r2,zero,1010ae58 <___vfiprintf_internal_r+0xd50>
1010adc8:	d9401b17 	ldw	r5,108(sp)
1010adcc:	d8801c17 	ldw	r2,112(sp)
1010add0:	d811883a 	mov	r8,sp
1010add4:	29000044 	addi	r4,r5,1
1010add8:	003fd806 	br	1010ad3c <__alt_data_end+0xfffead3c>
1010addc:	d9401b17 	ldw	r5,108(sp)
1010ade0:	00c40474 	movhi	r3,4113
1010ade4:	18c5f404 	addi	r3,r3,6096
1010ade8:	d8c02415 	stw	r3,144(sp)
1010adec:	29400044 	addi	r5,r5,1
1010adf0:	d8c02417 	ldw	r3,144(sp)
1010adf4:	14c5883a 	add	r2,r2,r19
1010adf8:	44c00115 	stw	r19,4(r8)
1010adfc:	40c00015 	stw	r3,0(r8)
1010ae00:	d8801c15 	stw	r2,112(sp)
1010ae04:	d9401b15 	stw	r5,108(sp)
1010ae08:	00c001c4 	movi	r3,7
1010ae0c:	1940070e 	bge	r3,r5,1010ae2c <___vfiprintf_internal_r+0xd24>
1010ae10:	103e4826 	beq	r2,zero,1010a734 <__alt_data_end+0xfffea734>
1010ae14:	d9402117 	ldw	r5,132(sp)
1010ae18:	d9002017 	ldw	r4,128(sp)
1010ae1c:	d9801a04 	addi	r6,sp,104
1010ae20:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010ae24:	10000c1e 	bne	r2,zero,1010ae58 <___vfiprintf_internal_r+0xd50>
1010ae28:	d8801c17 	ldw	r2,112(sp)
1010ae2c:	8c80010e 	bge	r17,r18,1010ae34 <___vfiprintf_internal_r+0xd2c>
1010ae30:	9023883a 	mov	r17,r18
1010ae34:	da802317 	ldw	r10,140(sp)
1010ae38:	5455883a 	add	r10,r10,r17
1010ae3c:	da802315 	stw	r10,140(sp)
1010ae40:	103e4126 	beq	r2,zero,1010a748 <__alt_data_end+0xfffea748>
1010ae44:	d9402117 	ldw	r5,132(sp)
1010ae48:	d9002017 	ldw	r4,128(sp)
1010ae4c:	d9801a04 	addi	r6,sp,104
1010ae50:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010ae54:	103e3c26 	beq	r2,zero,1010a748 <__alt_data_end+0xfffea748>
1010ae58:	dd002117 	ldw	r20,132(sp)
1010ae5c:	a080030b 	ldhu	r2,12(r20)
1010ae60:	1080100c 	andi	r2,r2,64
1010ae64:	1001231e 	bne	r2,zero,1010b2f4 <___vfiprintf_internal_r+0x11ec>
1010ae68:	d8802317 	ldw	r2,140(sp)
1010ae6c:	003d7b06 	br	1010a45c <__alt_data_end+0xfffea45c>
1010ae70:	1000991e 	bne	r2,zero,1010b0d8 <___vfiprintf_internal_r+0xfd0>
1010ae74:	00c00044 	movi	r3,1
1010ae78:	9805883a 	mov	r2,r19
1010ae7c:	dd400015 	stw	r21,0(sp)
1010ae80:	dcc00115 	stw	r19,4(sp)
1010ae84:	dcc01c15 	stw	r19,112(sp)
1010ae88:	d8c01b15 	stw	r3,108(sp)
1010ae8c:	d811883a 	mov	r8,sp
1010ae90:	42000204 	addi	r8,r8,8
1010ae94:	a2c0010c 	andi	r11,r20,4
1010ae98:	583fe426 	beq	r11,zero,1010ae2c <__alt_data_end+0xfffeae2c>
1010ae9c:	8ca7c83a 	sub	r19,r17,r18
1010aea0:	04ffe20e 	bge	zero,r19,1010ae2c <__alt_data_end+0xfffeae2c>
1010aea4:	01c00404 	movi	r7,16
1010aea8:	3cffcc0e 	bge	r7,r19,1010addc <__alt_data_end+0xfffeaddc>
1010aeac:	02840474 	movhi	r10,4113
1010aeb0:	5285f404 	addi	r10,r10,6096
1010aeb4:	d9001b17 	ldw	r4,108(sp)
1010aeb8:	da802415 	stw	r10,144(sp)
1010aebc:	382b883a 	mov	r21,r7
1010aec0:	050001c4 	movi	r20,7
1010aec4:	df002017 	ldw	fp,128(sp)
1010aec8:	00000506 	br	1010aee0 <___vfiprintf_internal_r+0xdd8>
1010aecc:	21400084 	addi	r5,r4,2
1010aed0:	42000204 	addi	r8,r8,8
1010aed4:	1809883a 	mov	r4,r3
1010aed8:	9cfffc04 	addi	r19,r19,-16
1010aedc:	acffc40e 	bge	r21,r19,1010adf0 <__alt_data_end+0xfffeadf0>
1010aee0:	10800404 	addi	r2,r2,16
1010aee4:	20c00044 	addi	r3,r4,1
1010aee8:	45800015 	stw	r22,0(r8)
1010aeec:	45400115 	stw	r21,4(r8)
1010aef0:	d8801c15 	stw	r2,112(sp)
1010aef4:	d8c01b15 	stw	r3,108(sp)
1010aef8:	a0fff40e 	bge	r20,r3,1010aecc <__alt_data_end+0xfffeaecc>
1010aefc:	1000041e 	bne	r2,zero,1010af10 <___vfiprintf_internal_r+0xe08>
1010af00:	01400044 	movi	r5,1
1010af04:	0009883a 	mov	r4,zero
1010af08:	d811883a 	mov	r8,sp
1010af0c:	003ff206 	br	1010aed8 <__alt_data_end+0xfffeaed8>
1010af10:	d9402117 	ldw	r5,132(sp)
1010af14:	d9801a04 	addi	r6,sp,104
1010af18:	e009883a 	mov	r4,fp
1010af1c:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010af20:	103fcd1e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010af24:	d9001b17 	ldw	r4,108(sp)
1010af28:	d8801c17 	ldw	r2,112(sp)
1010af2c:	d811883a 	mov	r8,sp
1010af30:	21400044 	addi	r5,r4,1
1010af34:	003fe806 	br	1010aed8 <__alt_data_end+0xfffeaed8>
1010af38:	d9402117 	ldw	r5,132(sp)
1010af3c:	d9002017 	ldw	r4,128(sp)
1010af40:	d9801a04 	addi	r6,sp,104
1010af44:	d9c02b15 	stw	r7,172(sp)
1010af48:	db402a15 	stw	r13,168(sp)
1010af4c:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010af50:	d9c02b17 	ldw	r7,172(sp)
1010af54:	db402a17 	ldw	r13,168(sp)
1010af58:	103fbf1e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010af5c:	d9401b17 	ldw	r5,108(sp)
1010af60:	d8801c17 	ldw	r2,112(sp)
1010af64:	d811883a 	mov	r8,sp
1010af68:	29800044 	addi	r6,r5,1
1010af6c:	003dc406 	br	1010a680 <__alt_data_end+0xfffea680>
1010af70:	1000d21e 	bne	r2,zero,1010b2bc <___vfiprintf_internal_r+0x11b4>
1010af74:	d8c01d87 	ldb	r3,118(sp)
1010af78:	18009526 	beq	r3,zero,1010b1d0 <___vfiprintf_internal_r+0x10c8>
1010af7c:	00800044 	movi	r2,1
1010af80:	d8c01d84 	addi	r3,sp,118
1010af84:	1009883a 	mov	r4,r2
1010af88:	d8c00015 	stw	r3,0(sp)
1010af8c:	d8800115 	stw	r2,4(sp)
1010af90:	d811883a 	mov	r8,sp
1010af94:	200b883a 	mov	r5,r4
1010af98:	42000204 	addi	r8,r8,8
1010af9c:	21000044 	addi	r4,r4,1
1010afa0:	003d9706 	br	1010a600 <__alt_data_end+0xfffea600>
1010afa4:	d9001d04 	addi	r4,sp,116
1010afa8:	00800084 	movi	r2,2
1010afac:	d9000015 	stw	r4,0(sp)
1010afb0:	d8800115 	stw	r2,4(sp)
1010afb4:	1809883a 	mov	r4,r3
1010afb8:	d811883a 	mov	r8,sp
1010afbc:	200b883a 	mov	r5,r4
1010afc0:	42000204 	addi	r8,r8,8
1010afc4:	21000044 	addi	r4,r4,1
1010afc8:	003f4e06 	br	1010ad04 <__alt_data_end+0xfffead04>
1010afcc:	d8001d85 	stb	zero,118(sp)
1010afd0:	48005016 	blt	r9,zero,1010b114 <___vfiprintf_internal_r+0x100c>
1010afd4:	00ffdfc4 	movi	r3,-129
1010afd8:	94c4b03a 	or	r2,r18,r19
1010afdc:	a0e8703a 	and	r20,r20,r3
1010afe0:	103d4426 	beq	r2,zero,1010a4f4 <__alt_data_end+0xfffea4f4>
1010afe4:	0039883a 	mov	fp,zero
1010afe8:	d9002617 	ldw	r4,152(sp)
1010afec:	dd401a04 	addi	r21,sp,104
1010aff0:	908003cc 	andi	r2,r18,15
1010aff4:	9806973a 	slli	r3,r19,28
1010aff8:	2085883a 	add	r2,r4,r2
1010affc:	9024d13a 	srli	r18,r18,4
1010b000:	10800003 	ldbu	r2,0(r2)
1010b004:	9826d13a 	srli	r19,r19,4
1010b008:	ad7fffc4 	addi	r21,r21,-1
1010b00c:	1ca4b03a 	or	r18,r3,r18
1010b010:	a8800005 	stb	r2,0(r21)
1010b014:	94c4b03a 	or	r2,r18,r19
1010b018:	103ff51e 	bne	r2,zero,1010aff0 <__alt_data_end+0xfffeaff0>
1010b01c:	003e5906 	br	1010a984 <__alt_data_end+0xfffea984>
1010b020:	d9402117 	ldw	r5,132(sp)
1010b024:	d9002017 	ldw	r4,128(sp)
1010b028:	d9801a04 	addi	r6,sp,104
1010b02c:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b030:	103f891e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b034:	d8801c17 	ldw	r2,112(sp)
1010b038:	d811883a 	mov	r8,sp
1010b03c:	003f9506 	br	1010ae94 <__alt_data_end+0xfffeae94>
1010b040:	d9402117 	ldw	r5,132(sp)
1010b044:	d9002017 	ldw	r4,128(sp)
1010b048:	d9801a04 	addi	r6,sp,104
1010b04c:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b050:	103f811e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b054:	d811883a 	mov	r8,sp
1010b058:	003ced06 	br	1010a410 <__alt_data_end+0xfffea410>
1010b05c:	d9402117 	ldw	r5,132(sp)
1010b060:	d9002017 	ldw	r4,128(sp)
1010b064:	d9801a04 	addi	r6,sp,104
1010b068:	da402c15 	stw	r9,176(sp)
1010b06c:	db802a15 	stw	r14,168(sp)
1010b070:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b074:	da402c17 	ldw	r9,176(sp)
1010b078:	db802a17 	ldw	r14,168(sp)
1010b07c:	103f761e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b080:	d9401b17 	ldw	r5,108(sp)
1010b084:	d8801c17 	ldw	r2,112(sp)
1010b088:	d811883a 	mov	r8,sp
1010b08c:	29000044 	addi	r4,r5,1
1010b090:	003d5b06 	br	1010a600 <__alt_data_end+0xfffea600>
1010b094:	d9402117 	ldw	r5,132(sp)
1010b098:	d9002017 	ldw	r4,128(sp)
1010b09c:	d9801a04 	addi	r6,sp,104
1010b0a0:	da402c15 	stw	r9,176(sp)
1010b0a4:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b0a8:	da402c17 	ldw	r9,176(sp)
1010b0ac:	103f6a1e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b0b0:	d9401b17 	ldw	r5,108(sp)
1010b0b4:	d8801c17 	ldw	r2,112(sp)
1010b0b8:	d811883a 	mov	r8,sp
1010b0bc:	29000044 	addi	r4,r5,1
1010b0c0:	003f1006 	br	1010ad04 <__alt_data_end+0xfffead04>
1010b0c4:	1000c31e 	bne	r2,zero,1010b3d4 <___vfiprintf_internal_r+0x12cc>
1010b0c8:	01000044 	movi	r4,1
1010b0cc:	000b883a 	mov	r5,zero
1010b0d0:	d811883a 	mov	r8,sp
1010b0d4:	003f0d06 	br	1010ad0c <__alt_data_end+0xfffead0c>
1010b0d8:	d9402117 	ldw	r5,132(sp)
1010b0dc:	d9002017 	ldw	r4,128(sp)
1010b0e0:	d9801a04 	addi	r6,sp,104
1010b0e4:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b0e8:	103f5b1e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b0ec:	d9001b17 	ldw	r4,108(sp)
1010b0f0:	d8801c17 	ldw	r2,112(sp)
1010b0f4:	d811883a 	mov	r8,sp
1010b0f8:	21000044 	addi	r4,r4,1
1010b0fc:	003d8006 	br	1010a700 <__alt_data_end+0xfffea700>
1010b100:	01040474 	movhi	r4,4113
1010b104:	21059004 	addi	r4,r4,5696
1010b108:	d9002615 	stw	r4,152(sp)
1010b10c:	d8c02215 	stw	r3,136(sp)
1010b110:	1029883a 	mov	r20,r2
1010b114:	94c4b03a 	or	r2,r18,r19
1010b118:	103fb21e 	bne	r2,zero,1010afe4 <__alt_data_end+0xfffeafe4>
1010b11c:	0039883a 	mov	fp,zero
1010b120:	00800084 	movi	r2,2
1010b124:	003e6b06 	br	1010aad4 <__alt_data_end+0xfffeaad4>
1010b128:	da802217 	ldw	r10,136(sp)
1010b12c:	d8001d85 	stb	zero,118(sp)
1010b130:	0027883a 	mov	r19,zero
1010b134:	50800104 	addi	r2,r10,4
1010b138:	54800017 	ldw	r18,0(r10)
1010b13c:	483e6016 	blt	r9,zero,1010aac0 <__alt_data_end+0xfffeaac0>
1010b140:	00ffdfc4 	movi	r3,-129
1010b144:	d8802215 	stw	r2,136(sp)
1010b148:	a0e8703a 	and	r20,r20,r3
1010b14c:	0039883a 	mov	fp,zero
1010b150:	903ebb26 	beq	r18,zero,1010ac40 <__alt_data_end+0xfffeac40>
1010b154:	00800244 	movi	r2,9
1010b158:	14bdee36 	bltu	r2,r18,1010a914 <__alt_data_end+0xfffea914>
1010b15c:	003eba06 	br	1010ac48 <__alt_data_end+0xfffeac48>
1010b160:	00800c04 	movi	r2,48
1010b164:	d8c01d45 	stb	r3,117(sp)
1010b168:	d8801d05 	stb	r2,116(sp)
1010b16c:	d8001d85 	stb	zero,118(sp)
1010b170:	a0c00094 	ori	r3,r20,2
1010b174:	4800a916 	blt	r9,zero,1010b41c <___vfiprintf_internal_r+0x1314>
1010b178:	00bfdfc4 	movi	r2,-129
1010b17c:	a096703a 	and	r11,r20,r2
1010b180:	5d000094 	ori	r20,r11,2
1010b184:	0039883a 	mov	fp,zero
1010b188:	003f9706 	br	1010afe8 <__alt_data_end+0xfffeafe8>
1010b18c:	8025883a 	mov	r18,r16
1010b190:	003c2e06 	br	1010a24c <__alt_data_end+0xfffea24c>
1010b194:	00840474 	movhi	r2,4113
1010b198:	10859004 	addi	r2,r2,5696
1010b19c:	0039883a 	mov	fp,zero
1010b1a0:	d8802615 	stw	r2,152(sp)
1010b1a4:	003f9006 	br	1010afe8 <__alt_data_end+0xfffeafe8>
1010b1a8:	04a5c83a 	sub	r18,zero,r18
1010b1ac:	07000b44 	movi	fp,45
1010b1b0:	9004c03a 	cmpne	r2,r18,zero
1010b1b4:	04e7c83a 	sub	r19,zero,r19
1010b1b8:	df001d85 	stb	fp,118(sp)
1010b1bc:	98a7c83a 	sub	r19,r19,r2
1010b1c0:	48009f16 	blt	r9,zero,1010b440 <___vfiprintf_internal_r+0x1338>
1010b1c4:	00bfdfc4 	movi	r2,-129
1010b1c8:	a0a8703a 	and	r20,r20,r2
1010b1cc:	003dd006 	br	1010a910 <__alt_data_end+0xfffea910>
1010b1d0:	70004c26 	beq	r14,zero,1010b304 <___vfiprintf_internal_r+0x11fc>
1010b1d4:	00800084 	movi	r2,2
1010b1d8:	d8c01d04 	addi	r3,sp,116
1010b1dc:	d8c00015 	stw	r3,0(sp)
1010b1e0:	d8800115 	stw	r2,4(sp)
1010b1e4:	01000044 	movi	r4,1
1010b1e8:	d811883a 	mov	r8,sp
1010b1ec:	003f7306 	br	1010afbc <__alt_data_end+0xfffeafbc>
1010b1f0:	a080100c 	andi	r2,r20,64
1010b1f4:	da802217 	ldw	r10,136(sp)
1010b1f8:	103e0626 	beq	r2,zero,1010aa14 <__alt_data_end+0xfffeaa14>
1010b1fc:	5480000f 	ldh	r18,0(r10)
1010b200:	52800104 	addi	r10,r10,4
1010b204:	da802215 	stw	r10,136(sp)
1010b208:	9027d7fa 	srai	r19,r18,31
1010b20c:	9805883a 	mov	r2,r19
1010b210:	003db806 	br	1010a8f4 <__alt_data_end+0xfffea8f4>
1010b214:	a080040c 	andi	r2,r20,16
1010b218:	1000091e 	bne	r2,zero,1010b240 <___vfiprintf_internal_r+0x1138>
1010b21c:	a2c0100c 	andi	r11,r20,64
1010b220:	58000726 	beq	r11,zero,1010b240 <___vfiprintf_internal_r+0x1138>
1010b224:	da802217 	ldw	r10,136(sp)
1010b228:	50800017 	ldw	r2,0(r10)
1010b22c:	52800104 	addi	r10,r10,4
1010b230:	da802215 	stw	r10,136(sp)
1010b234:	da802317 	ldw	r10,140(sp)
1010b238:	1280000d 	sth	r10,0(r2)
1010b23c:	003be706 	br	1010a1dc <__alt_data_end+0xfffea1dc>
1010b240:	da802217 	ldw	r10,136(sp)
1010b244:	50800017 	ldw	r2,0(r10)
1010b248:	52800104 	addi	r10,r10,4
1010b24c:	da802215 	stw	r10,136(sp)
1010b250:	da802317 	ldw	r10,140(sp)
1010b254:	12800015 	stw	r10,0(r2)
1010b258:	003be006 	br	1010a1dc <__alt_data_end+0xfffea1dc>
1010b25c:	a080100c 	andi	r2,r20,64
1010b260:	da802217 	ldw	r10,136(sp)
1010b264:	10003026 	beq	r2,zero,1010b328 <___vfiprintf_internal_r+0x1220>
1010b268:	5480000b 	ldhu	r18,0(r10)
1010b26c:	52800104 	addi	r10,r10,4
1010b270:	0027883a 	mov	r19,zero
1010b274:	da802215 	stw	r10,136(sp)
1010b278:	003d8006 	br	1010a87c <__alt_data_end+0xfffea87c>
1010b27c:	80c00007 	ldb	r3,0(r16)
1010b280:	003c0006 	br	1010a284 <__alt_data_end+0xfffea284>
1010b284:	a080100c 	andi	r2,r20,64
1010b288:	d8001d85 	stb	zero,118(sp)
1010b28c:	da802217 	ldw	r10,136(sp)
1010b290:	1000201e 	bne	r2,zero,1010b314 <___vfiprintf_internal_r+0x120c>
1010b294:	50800104 	addi	r2,r10,4
1010b298:	54800017 	ldw	r18,0(r10)
1010b29c:	0027883a 	mov	r19,zero
1010b2a0:	483def0e 	bge	r9,zero,1010aa60 <__alt_data_end+0xfffeaa60>
1010b2a4:	94c6b03a 	or	r3,r18,r19
1010b2a8:	d8802215 	stw	r2,136(sp)
1010b2ac:	183d4e1e 	bne	r3,zero,1010a7e8 <__alt_data_end+0xfffea7e8>
1010b2b0:	0039883a 	mov	fp,zero
1010b2b4:	0005883a 	mov	r2,zero
1010b2b8:	003e0606 	br	1010aad4 <__alt_data_end+0xfffeaad4>
1010b2bc:	d9402117 	ldw	r5,132(sp)
1010b2c0:	d9002017 	ldw	r4,128(sp)
1010b2c4:	d9801a04 	addi	r6,sp,104
1010b2c8:	da402c15 	stw	r9,176(sp)
1010b2cc:	db802a15 	stw	r14,168(sp)
1010b2d0:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b2d4:	da402c17 	ldw	r9,176(sp)
1010b2d8:	db802a17 	ldw	r14,168(sp)
1010b2dc:	103ede1e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b2e0:	d9401b17 	ldw	r5,108(sp)
1010b2e4:	d8801c17 	ldw	r2,112(sp)
1010b2e8:	d811883a 	mov	r8,sp
1010b2ec:	29000044 	addi	r4,r5,1
1010b2f0:	003e7406 	br	1010acc4 <__alt_data_end+0xfffeacc4>
1010b2f4:	00bfffc4 	movi	r2,-1
1010b2f8:	003c5806 	br	1010a45c <__alt_data_end+0xfffea45c>
1010b2fc:	d811883a 	mov	r8,sp
1010b300:	003ee806 	br	1010aea4 <__alt_data_end+0xfffeaea4>
1010b304:	000b883a 	mov	r5,zero
1010b308:	01000044 	movi	r4,1
1010b30c:	d811883a 	mov	r8,sp
1010b310:	003e7c06 	br	1010ad04 <__alt_data_end+0xfffead04>
1010b314:	50800104 	addi	r2,r10,4
1010b318:	5480000b 	ldhu	r18,0(r10)
1010b31c:	0027883a 	mov	r19,zero
1010b320:	483dcf0e 	bge	r9,zero,1010aa60 <__alt_data_end+0xfffeaa60>
1010b324:	003fdf06 	br	1010b2a4 <__alt_data_end+0xfffeb2a4>
1010b328:	54800017 	ldw	r18,0(r10)
1010b32c:	52800104 	addi	r10,r10,4
1010b330:	0027883a 	mov	r19,zero
1010b334:	da802215 	stw	r10,136(sp)
1010b338:	003d5006 	br	1010a87c <__alt_data_end+0xfffea87c>
1010b33c:	50800104 	addi	r2,r10,4
1010b340:	5480000b 	ldhu	r18,0(r10)
1010b344:	0027883a 	mov	r19,zero
1010b348:	483f7d0e 	bge	r9,zero,1010b140 <__alt_data_end+0xfffeb140>
1010b34c:	003ddc06 	br	1010aac0 <__alt_data_end+0xfffeaac0>
1010b350:	d8c02215 	stw	r3,136(sp)
1010b354:	0039883a 	mov	fp,zero
1010b358:	003ddb06 	br	1010aac8 <__alt_data_end+0xfffeaac8>
1010b35c:	02840474 	movhi	r10,4113
1010b360:	5285f004 	addi	r10,r10,6080
1010b364:	da802415 	stw	r10,144(sp)
1010b368:	003e8306 	br	1010ad78 <__alt_data_end+0xfffead78>
1010b36c:	d8801c17 	ldw	r2,112(sp)
1010b370:	dd002117 	ldw	r20,132(sp)
1010b374:	103eb926 	beq	r2,zero,1010ae5c <__alt_data_end+0xfffeae5c>
1010b378:	d9002017 	ldw	r4,128(sp)
1010b37c:	d9801a04 	addi	r6,sp,104
1010b380:	a00b883a 	mov	r5,r20
1010b384:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b388:	003eb406 	br	1010ae5c <__alt_data_end+0xfffeae5c>
1010b38c:	80c00043 	ldbu	r3,1(r16)
1010b390:	a5000814 	ori	r20,r20,32
1010b394:	84000044 	addi	r16,r16,1
1010b398:	18c03fcc 	andi	r3,r3,255
1010b39c:	18c0201c 	xori	r3,r3,128
1010b3a0:	18ffe004 	addi	r3,r3,-128
1010b3a4:	003bb706 	br	1010a284 <__alt_data_end+0xfffea284>
1010b3a8:	a809883a 	mov	r4,r21
1010b3ac:	d8c02a15 	stw	r3,168(sp)
1010b3b0:	da002b15 	stw	r8,172(sp)
1010b3b4:	010406c0 	call	1010406c <strlen>
1010b3b8:	d8c02a17 	ldw	r3,168(sp)
1010b3bc:	1027883a 	mov	r19,r2
1010b3c0:	df001d83 	ldbu	fp,118(sp)
1010b3c4:	d8c02215 	stw	r3,136(sp)
1010b3c8:	0013883a 	mov	r9,zero
1010b3cc:	da002b17 	ldw	r8,172(sp)
1010b3d0:	003c4d06 	br	1010a508 <__alt_data_end+0xfffea508>
1010b3d4:	d9402117 	ldw	r5,132(sp)
1010b3d8:	d9002017 	ldw	r4,128(sp)
1010b3dc:	d9801a04 	addi	r6,sp,104
1010b3e0:	da402c15 	stw	r9,176(sp)
1010b3e4:	0109ff40 	call	10109ff4 <__sprint_r.part.0>
1010b3e8:	da402c17 	ldw	r9,176(sp)
1010b3ec:	103e9a1e 	bne	r2,zero,1010ae58 <__alt_data_end+0xfffeae58>
1010b3f0:	d9401b17 	ldw	r5,108(sp)
1010b3f4:	d8801c17 	ldw	r2,112(sp)
1010b3f8:	d811883a 	mov	r8,sp
1010b3fc:	29000044 	addi	r4,r5,1
1010b400:	003e4206 	br	1010ad0c <__alt_data_end+0xfffead0c>
1010b404:	d9401b17 	ldw	r5,108(sp)
1010b408:	01040474 	movhi	r4,4113
1010b40c:	2105f404 	addi	r4,r4,6096
1010b410:	d9002415 	stw	r4,144(sp)
1010b414:	29400044 	addi	r5,r5,1
1010b418:	003c6d06 	br	1010a5d0 <__alt_data_end+0xfffea5d0>
1010b41c:	0039883a 	mov	fp,zero
1010b420:	00800084 	movi	r2,2
1010b424:	10803fcc 	andi	r2,r2,255
1010b428:	01000044 	movi	r4,1
1010b42c:	11001e26 	beq	r2,r4,1010b4a8 <___vfiprintf_internal_r+0x13a0>
1010b430:	01000084 	movi	r4,2
1010b434:	11001e1e 	bne	r2,r4,1010b4b0 <___vfiprintf_internal_r+0x13a8>
1010b438:	1829883a 	mov	r20,r3
1010b43c:	003eea06 	br	1010afe8 <__alt_data_end+0xfffeafe8>
1010b440:	a007883a 	mov	r3,r20
1010b444:	00800044 	movi	r2,1
1010b448:	003ff606 	br	1010b424 <__alt_data_end+0xfffeb424>
1010b44c:	00800184 	movi	r2,6
1010b450:	1240012e 	bgeu	r2,r9,1010b458 <___vfiprintf_internal_r+0x1350>
1010b454:	1013883a 	mov	r9,r2
1010b458:	4827883a 	mov	r19,r9
1010b45c:	4825883a 	mov	r18,r9
1010b460:	48001516 	blt	r9,zero,1010b4b8 <___vfiprintf_internal_r+0x13b0>
1010b464:	05440474 	movhi	r21,4113
1010b468:	d8c02215 	stw	r3,136(sp)
1010b46c:	ad459504 	addi	r21,r21,5716
1010b470:	003d1406 	br	1010a8c4 <__alt_data_end+0xfffea8c4>
1010b474:	02840474 	movhi	r10,4113
1010b478:	5285f004 	addi	r10,r10,6080
1010b47c:	da802415 	stw	r10,144(sp)
1010b480:	200d883a 	mov	r6,r4
1010b484:	003c9106 	br	1010a6cc <__alt_data_end+0xfffea6cc>
1010b488:	5021883a 	mov	r16,r10
1010b48c:	0013883a 	mov	r9,zero
1010b490:	003b7d06 	br	1010a288 <__alt_data_end+0xfffea288>
1010b494:	4827883a 	mov	r19,r9
1010b498:	df001d83 	ldbu	fp,118(sp)
1010b49c:	d8c02215 	stw	r3,136(sp)
1010b4a0:	0013883a 	mov	r9,zero
1010b4a4:	003c1806 	br	1010a508 <__alt_data_end+0xfffea508>
1010b4a8:	1829883a 	mov	r20,r3
1010b4ac:	003d1806 	br	1010a910 <__alt_data_end+0xfffea910>
1010b4b0:	1829883a 	mov	r20,r3
1010b4b4:	003ccd06 	br	1010a7ec <__alt_data_end+0xfffea7ec>
1010b4b8:	0025883a 	mov	r18,zero
1010b4bc:	003fe906 	br	1010b464 <__alt_data_end+0xfffeb464>
1010b4c0:	d8802217 	ldw	r2,136(sp)
1010b4c4:	80c00043 	ldbu	r3,1(r16)
1010b4c8:	5021883a 	mov	r16,r10
1010b4cc:	12400017 	ldw	r9,0(r2)
1010b4d0:	10800104 	addi	r2,r2,4
1010b4d4:	d8802215 	stw	r2,136(sp)
1010b4d8:	483faf0e 	bge	r9,zero,1010b398 <__alt_data_end+0xfffeb398>
1010b4dc:	18c03fcc 	andi	r3,r3,255
1010b4e0:	18c0201c 	xori	r3,r3,128
1010b4e4:	027fffc4 	movi	r9,-1
1010b4e8:	18ffe004 	addi	r3,r3,-128
1010b4ec:	003b6506 	br	1010a284 <__alt_data_end+0xfffea284>
1010b4f0:	d9c01d85 	stb	r7,118(sp)
1010b4f4:	003ca006 	br	1010a778 <__alt_data_end+0xfffea778>
1010b4f8:	d9c01d85 	stb	r7,118(sp)
1010b4fc:	003cad06 	br	1010a7b4 <__alt_data_end+0xfffea7b4>
1010b500:	d9c01d85 	stb	r7,118(sp)
1010b504:	003d7d06 	br	1010aafc <__alt_data_end+0xfffeaafc>
1010b508:	d9c01d85 	stb	r7,118(sp)
1010b50c:	003d5f06 	br	1010aa8c <__alt_data_end+0xfffeaa8c>
1010b510:	a080004c 	andi	r2,r20,1
1010b514:	0039883a 	mov	fp,zero
1010b518:	10000526 	beq	r2,zero,1010b530 <___vfiprintf_internal_r+0x1428>
1010b51c:	00800c04 	movi	r2,48
1010b520:	d88019c5 	stb	r2,103(sp)
1010b524:	dcc02717 	ldw	r19,156(sp)
1010b528:	dd4019c4 	addi	r21,sp,103
1010b52c:	003bf606 	br	1010a508 <__alt_data_end+0xfffea508>
1010b530:	0027883a 	mov	r19,zero
1010b534:	dd401a04 	addi	r21,sp,104
1010b538:	003bf306 	br	1010a508 <__alt_data_end+0xfffea508>
1010b53c:	d9c01d85 	stb	r7,118(sp)
1010b540:	003dc806 	br	1010ac64 <__alt_data_end+0xfffeac64>
1010b544:	d9c01d85 	stb	r7,118(sp)
1010b548:	003d3a06 	br	1010aa34 <__alt_data_end+0xfffeaa34>
1010b54c:	d9c01d85 	stb	r7,118(sp)
1010b550:	003d2a06 	br	1010a9fc <__alt_data_end+0xfffea9fc>
1010b554:	d9c01d85 	stb	r7,118(sp)
1010b558:	003cde06 	br	1010a8d4 <__alt_data_end+0xfffea8d4>
1010b55c:	d9c01d85 	stb	r7,118(sp)
1010b560:	003cbc06 	br	1010a854 <__alt_data_end+0xfffea854>

1010b564 <__vfiprintf_internal>:
1010b564:	00840474 	movhi	r2,4113
1010b568:	108cf104 	addi	r2,r2,13252
1010b56c:	300f883a 	mov	r7,r6
1010b570:	280d883a 	mov	r6,r5
1010b574:	200b883a 	mov	r5,r4
1010b578:	11000017 	ldw	r4,0(r2)
1010b57c:	010a1081 	jmpi	1010a108 <___vfiprintf_internal_r>

1010b580 <__sbprintf>:
1010b580:	2880030b 	ldhu	r2,12(r5)
1010b584:	2ac01917 	ldw	r11,100(r5)
1010b588:	2a80038b 	ldhu	r10,14(r5)
1010b58c:	2a400717 	ldw	r9,28(r5)
1010b590:	2a000917 	ldw	r8,36(r5)
1010b594:	defee204 	addi	sp,sp,-1144
1010b598:	00c10004 	movi	r3,1024
1010b59c:	dc011a15 	stw	r16,1128(sp)
1010b5a0:	10bfff4c 	andi	r2,r2,65533
1010b5a4:	2821883a 	mov	r16,r5
1010b5a8:	d8cb883a 	add	r5,sp,r3
1010b5ac:	dc811c15 	stw	r18,1136(sp)
1010b5b0:	dc411b15 	stw	r17,1132(sp)
1010b5b4:	dfc11d15 	stw	ra,1140(sp)
1010b5b8:	2025883a 	mov	r18,r4
1010b5bc:	d881030d 	sth	r2,1036(sp)
1010b5c0:	dac11915 	stw	r11,1124(sp)
1010b5c4:	da81038d 	sth	r10,1038(sp)
1010b5c8:	da410715 	stw	r9,1052(sp)
1010b5cc:	da010915 	stw	r8,1060(sp)
1010b5d0:	dec10015 	stw	sp,1024(sp)
1010b5d4:	dec10415 	stw	sp,1040(sp)
1010b5d8:	d8c10215 	stw	r3,1032(sp)
1010b5dc:	d8c10515 	stw	r3,1044(sp)
1010b5e0:	d8010615 	stw	zero,1048(sp)
1010b5e4:	010a1080 	call	1010a108 <___vfiprintf_internal_r>
1010b5e8:	1023883a 	mov	r17,r2
1010b5ec:	10000416 	blt	r2,zero,1010b600 <__sbprintf+0x80>
1010b5f0:	d9410004 	addi	r5,sp,1024
1010b5f4:	9009883a 	mov	r4,r18
1010b5f8:	0101f400 	call	10101f40 <_fflush_r>
1010b5fc:	10000d1e 	bne	r2,zero,1010b634 <__sbprintf+0xb4>
1010b600:	d881030b 	ldhu	r2,1036(sp)
1010b604:	1080100c 	andi	r2,r2,64
1010b608:	10000326 	beq	r2,zero,1010b618 <__sbprintf+0x98>
1010b60c:	8080030b 	ldhu	r2,12(r16)
1010b610:	10801014 	ori	r2,r2,64
1010b614:	8080030d 	sth	r2,12(r16)
1010b618:	8805883a 	mov	r2,r17
1010b61c:	dfc11d17 	ldw	ra,1140(sp)
1010b620:	dc811c17 	ldw	r18,1136(sp)
1010b624:	dc411b17 	ldw	r17,1132(sp)
1010b628:	dc011a17 	ldw	r16,1128(sp)
1010b62c:	dec11e04 	addi	sp,sp,1144
1010b630:	f800283a 	ret
1010b634:	047fffc4 	movi	r17,-1
1010b638:	003ff106 	br	1010b600 <__alt_data_end+0xfffeb600>

1010b63c <_calloc_r>:
1010b63c:	298b383a 	mul	r5,r5,r6
1010b640:	defffe04 	addi	sp,sp,-8
1010b644:	dfc00115 	stw	ra,4(sp)
1010b648:	dc000015 	stw	r16,0(sp)
1010b64c:	01032180 	call	10103218 <_malloc_r>
1010b650:	10002926 	beq	r2,zero,1010b6f8 <_calloc_r+0xbc>
1010b654:	11bfff17 	ldw	r6,-4(r2)
1010b658:	1021883a 	mov	r16,r2
1010b65c:	00bfff04 	movi	r2,-4
1010b660:	308c703a 	and	r6,r6,r2
1010b664:	00c00904 	movi	r3,36
1010b668:	308d883a 	add	r6,r6,r2
1010b66c:	19801636 	bltu	r3,r6,1010b6c8 <_calloc_r+0x8c>
1010b670:	008004c4 	movi	r2,19
1010b674:	11800b2e 	bgeu	r2,r6,1010b6a4 <_calloc_r+0x68>
1010b678:	80000015 	stw	zero,0(r16)
1010b67c:	80000115 	stw	zero,4(r16)
1010b680:	008006c4 	movi	r2,27
1010b684:	11801a2e 	bgeu	r2,r6,1010b6f0 <_calloc_r+0xb4>
1010b688:	80000215 	stw	zero,8(r16)
1010b68c:	80000315 	stw	zero,12(r16)
1010b690:	30c0151e 	bne	r6,r3,1010b6e8 <_calloc_r+0xac>
1010b694:	80000415 	stw	zero,16(r16)
1010b698:	80800604 	addi	r2,r16,24
1010b69c:	80000515 	stw	zero,20(r16)
1010b6a0:	00000106 	br	1010b6a8 <_calloc_r+0x6c>
1010b6a4:	8005883a 	mov	r2,r16
1010b6a8:	10000015 	stw	zero,0(r2)
1010b6ac:	10000115 	stw	zero,4(r2)
1010b6b0:	10000215 	stw	zero,8(r2)
1010b6b4:	8005883a 	mov	r2,r16
1010b6b8:	dfc00117 	ldw	ra,4(sp)
1010b6bc:	dc000017 	ldw	r16,0(sp)
1010b6c0:	dec00204 	addi	sp,sp,8
1010b6c4:	f800283a 	ret
1010b6c8:	000b883a 	mov	r5,zero
1010b6cc:	8009883a 	mov	r4,r16
1010b6d0:	0103a240 	call	10103a24 <memset>
1010b6d4:	8005883a 	mov	r2,r16
1010b6d8:	dfc00117 	ldw	ra,4(sp)
1010b6dc:	dc000017 	ldw	r16,0(sp)
1010b6e0:	dec00204 	addi	sp,sp,8
1010b6e4:	f800283a 	ret
1010b6e8:	80800404 	addi	r2,r16,16
1010b6ec:	003fee06 	br	1010b6a8 <__alt_data_end+0xfffeb6a8>
1010b6f0:	80800204 	addi	r2,r16,8
1010b6f4:	003fec06 	br	1010b6a8 <__alt_data_end+0xfffeb6a8>
1010b6f8:	0005883a 	mov	r2,zero
1010b6fc:	003fee06 	br	1010b6b8 <__alt_data_end+0xfffeb6b8>

1010b700 <__fputwc>:
1010b700:	defff804 	addi	sp,sp,-32
1010b704:	dcc00415 	stw	r19,16(sp)
1010b708:	dc800315 	stw	r18,12(sp)
1010b70c:	dc000115 	stw	r16,4(sp)
1010b710:	dfc00715 	stw	ra,28(sp)
1010b714:	dd400615 	stw	r21,24(sp)
1010b718:	dd000515 	stw	r20,20(sp)
1010b71c:	dc400215 	stw	r17,8(sp)
1010b720:	2027883a 	mov	r19,r4
1010b724:	2825883a 	mov	r18,r5
1010b728:	3021883a 	mov	r16,r6
1010b72c:	01084a80 	call	101084a8 <__locale_mb_cur_max>
1010b730:	00c00044 	movi	r3,1
1010b734:	10c03e26 	beq	r2,r3,1010b830 <__fputwc+0x130>
1010b738:	81c01704 	addi	r7,r16,92
1010b73c:	900d883a 	mov	r6,r18
1010b740:	d80b883a 	mov	r5,sp
1010b744:	9809883a 	mov	r4,r19
1010b748:	010ba600 	call	1010ba60 <_wcrtomb_r>
1010b74c:	1029883a 	mov	r20,r2
1010b750:	00bfffc4 	movi	r2,-1
1010b754:	a0802026 	beq	r20,r2,1010b7d8 <__fputwc+0xd8>
1010b758:	d9400003 	ldbu	r5,0(sp)
1010b75c:	a0001c26 	beq	r20,zero,1010b7d0 <__fputwc+0xd0>
1010b760:	0023883a 	mov	r17,zero
1010b764:	05400284 	movi	r21,10
1010b768:	00000906 	br	1010b790 <__fputwc+0x90>
1010b76c:	80800017 	ldw	r2,0(r16)
1010b770:	11400005 	stb	r5,0(r2)
1010b774:	80c00017 	ldw	r3,0(r16)
1010b778:	18c00044 	addi	r3,r3,1
1010b77c:	80c00015 	stw	r3,0(r16)
1010b780:	8c400044 	addi	r17,r17,1
1010b784:	dc45883a 	add	r2,sp,r17
1010b788:	8d00112e 	bgeu	r17,r20,1010b7d0 <__fputwc+0xd0>
1010b78c:	11400003 	ldbu	r5,0(r2)
1010b790:	80c00217 	ldw	r3,8(r16)
1010b794:	18ffffc4 	addi	r3,r3,-1
1010b798:	80c00215 	stw	r3,8(r16)
1010b79c:	183ff30e 	bge	r3,zero,1010b76c <__alt_data_end+0xfffeb76c>
1010b7a0:	80800617 	ldw	r2,24(r16)
1010b7a4:	18801916 	blt	r3,r2,1010b80c <__fputwc+0x10c>
1010b7a8:	80800017 	ldw	r2,0(r16)
1010b7ac:	11400005 	stb	r5,0(r2)
1010b7b0:	80800017 	ldw	r2,0(r16)
1010b7b4:	10c00003 	ldbu	r3,0(r2)
1010b7b8:	10800044 	addi	r2,r2,1
1010b7bc:	1d402326 	beq	r3,r21,1010b84c <__fputwc+0x14c>
1010b7c0:	80800015 	stw	r2,0(r16)
1010b7c4:	8c400044 	addi	r17,r17,1
1010b7c8:	dc45883a 	add	r2,sp,r17
1010b7cc:	8d3fef36 	bltu	r17,r20,1010b78c <__alt_data_end+0xfffeb78c>
1010b7d0:	9005883a 	mov	r2,r18
1010b7d4:	00000406 	br	1010b7e8 <__fputwc+0xe8>
1010b7d8:	80c0030b 	ldhu	r3,12(r16)
1010b7dc:	a005883a 	mov	r2,r20
1010b7e0:	18c01014 	ori	r3,r3,64
1010b7e4:	80c0030d 	sth	r3,12(r16)
1010b7e8:	dfc00717 	ldw	ra,28(sp)
1010b7ec:	dd400617 	ldw	r21,24(sp)
1010b7f0:	dd000517 	ldw	r20,20(sp)
1010b7f4:	dcc00417 	ldw	r19,16(sp)
1010b7f8:	dc800317 	ldw	r18,12(sp)
1010b7fc:	dc400217 	ldw	r17,8(sp)
1010b800:	dc000117 	ldw	r16,4(sp)
1010b804:	dec00804 	addi	sp,sp,32
1010b808:	f800283a 	ret
1010b80c:	800d883a 	mov	r6,r16
1010b810:	29403fcc 	andi	r5,r5,255
1010b814:	9809883a 	mov	r4,r19
1010b818:	010b9080 	call	1010b908 <__swbuf_r>
1010b81c:	10bfffe0 	cmpeqi	r2,r2,-1
1010b820:	10803fcc 	andi	r2,r2,255
1010b824:	103fd626 	beq	r2,zero,1010b780 <__alt_data_end+0xfffeb780>
1010b828:	00bfffc4 	movi	r2,-1
1010b82c:	003fee06 	br	1010b7e8 <__alt_data_end+0xfffeb7e8>
1010b830:	90ffffc4 	addi	r3,r18,-1
1010b834:	01003f84 	movi	r4,254
1010b838:	20ffbf36 	bltu	r4,r3,1010b738 <__alt_data_end+0xfffeb738>
1010b83c:	900b883a 	mov	r5,r18
1010b840:	dc800005 	stb	r18,0(sp)
1010b844:	1029883a 	mov	r20,r2
1010b848:	003fc506 	br	1010b760 <__alt_data_end+0xfffeb760>
1010b84c:	800d883a 	mov	r6,r16
1010b850:	a80b883a 	mov	r5,r21
1010b854:	9809883a 	mov	r4,r19
1010b858:	010b9080 	call	1010b908 <__swbuf_r>
1010b85c:	10bfffe0 	cmpeqi	r2,r2,-1
1010b860:	003fef06 	br	1010b820 <__alt_data_end+0xfffeb820>

1010b864 <_fputwc_r>:
1010b864:	3080030b 	ldhu	r2,12(r6)
1010b868:	10c8000c 	andi	r3,r2,8192
1010b86c:	1800051e 	bne	r3,zero,1010b884 <_fputwc_r+0x20>
1010b870:	30c01917 	ldw	r3,100(r6)
1010b874:	10880014 	ori	r2,r2,8192
1010b878:	3080030d 	sth	r2,12(r6)
1010b87c:	18880014 	ori	r2,r3,8192
1010b880:	30801915 	stw	r2,100(r6)
1010b884:	010b7001 	jmpi	1010b700 <__fputwc>

1010b888 <fputwc>:
1010b888:	00840474 	movhi	r2,4113
1010b88c:	defffc04 	addi	sp,sp,-16
1010b890:	108cf104 	addi	r2,r2,13252
1010b894:	dc000115 	stw	r16,4(sp)
1010b898:	14000017 	ldw	r16,0(r2)
1010b89c:	dc400215 	stw	r17,8(sp)
1010b8a0:	dfc00315 	stw	ra,12(sp)
1010b8a4:	2023883a 	mov	r17,r4
1010b8a8:	80000226 	beq	r16,zero,1010b8b4 <fputwc+0x2c>
1010b8ac:	80800e17 	ldw	r2,56(r16)
1010b8b0:	10001026 	beq	r2,zero,1010b8f4 <fputwc+0x6c>
1010b8b4:	2880030b 	ldhu	r2,12(r5)
1010b8b8:	10c8000c 	andi	r3,r2,8192
1010b8bc:	1800051e 	bne	r3,zero,1010b8d4 <fputwc+0x4c>
1010b8c0:	28c01917 	ldw	r3,100(r5)
1010b8c4:	10880014 	ori	r2,r2,8192
1010b8c8:	2880030d 	sth	r2,12(r5)
1010b8cc:	18880014 	ori	r2,r3,8192
1010b8d0:	28801915 	stw	r2,100(r5)
1010b8d4:	280d883a 	mov	r6,r5
1010b8d8:	8009883a 	mov	r4,r16
1010b8dc:	880b883a 	mov	r5,r17
1010b8e0:	dfc00317 	ldw	ra,12(sp)
1010b8e4:	dc400217 	ldw	r17,8(sp)
1010b8e8:	dc000117 	ldw	r16,4(sp)
1010b8ec:	dec00404 	addi	sp,sp,16
1010b8f0:	010b7001 	jmpi	1010b700 <__fputwc>
1010b8f4:	8009883a 	mov	r4,r16
1010b8f8:	d9400015 	stw	r5,0(sp)
1010b8fc:	010231c0 	call	1010231c <__sinit>
1010b900:	d9400017 	ldw	r5,0(sp)
1010b904:	003feb06 	br	1010b8b4 <__alt_data_end+0xfffeb8b4>

1010b908 <__swbuf_r>:
1010b908:	defffb04 	addi	sp,sp,-20
1010b90c:	dcc00315 	stw	r19,12(sp)
1010b910:	dc800215 	stw	r18,8(sp)
1010b914:	dc000015 	stw	r16,0(sp)
1010b918:	dfc00415 	stw	ra,16(sp)
1010b91c:	dc400115 	stw	r17,4(sp)
1010b920:	2025883a 	mov	r18,r4
1010b924:	2827883a 	mov	r19,r5
1010b928:	3021883a 	mov	r16,r6
1010b92c:	20000226 	beq	r4,zero,1010b938 <__swbuf_r+0x30>
1010b930:	20800e17 	ldw	r2,56(r4)
1010b934:	10004226 	beq	r2,zero,1010ba40 <__swbuf_r+0x138>
1010b938:	80800617 	ldw	r2,24(r16)
1010b93c:	8100030b 	ldhu	r4,12(r16)
1010b940:	80800215 	stw	r2,8(r16)
1010b944:	2080020c 	andi	r2,r4,8
1010b948:	10003626 	beq	r2,zero,1010ba24 <__swbuf_r+0x11c>
1010b94c:	80c00417 	ldw	r3,16(r16)
1010b950:	18003426 	beq	r3,zero,1010ba24 <__swbuf_r+0x11c>
1010b954:	2088000c 	andi	r2,r4,8192
1010b958:	9c403fcc 	andi	r17,r19,255
1010b95c:	10001a26 	beq	r2,zero,1010b9c8 <__swbuf_r+0xc0>
1010b960:	80800017 	ldw	r2,0(r16)
1010b964:	81000517 	ldw	r4,20(r16)
1010b968:	10c7c83a 	sub	r3,r2,r3
1010b96c:	1900200e 	bge	r3,r4,1010b9f0 <__swbuf_r+0xe8>
1010b970:	18c00044 	addi	r3,r3,1
1010b974:	81000217 	ldw	r4,8(r16)
1010b978:	11400044 	addi	r5,r2,1
1010b97c:	81400015 	stw	r5,0(r16)
1010b980:	213fffc4 	addi	r4,r4,-1
1010b984:	81000215 	stw	r4,8(r16)
1010b988:	14c00005 	stb	r19,0(r2)
1010b98c:	80800517 	ldw	r2,20(r16)
1010b990:	10c01e26 	beq	r2,r3,1010ba0c <__swbuf_r+0x104>
1010b994:	8080030b 	ldhu	r2,12(r16)
1010b998:	1080004c 	andi	r2,r2,1
1010b99c:	10000226 	beq	r2,zero,1010b9a8 <__swbuf_r+0xa0>
1010b9a0:	00800284 	movi	r2,10
1010b9a4:	88801926 	beq	r17,r2,1010ba0c <__swbuf_r+0x104>
1010b9a8:	8805883a 	mov	r2,r17
1010b9ac:	dfc00417 	ldw	ra,16(sp)
1010b9b0:	dcc00317 	ldw	r19,12(sp)
1010b9b4:	dc800217 	ldw	r18,8(sp)
1010b9b8:	dc400117 	ldw	r17,4(sp)
1010b9bc:	dc000017 	ldw	r16,0(sp)
1010b9c0:	dec00504 	addi	sp,sp,20
1010b9c4:	f800283a 	ret
1010b9c8:	81401917 	ldw	r5,100(r16)
1010b9cc:	00b7ffc4 	movi	r2,-8193
1010b9d0:	21080014 	ori	r4,r4,8192
1010b9d4:	2884703a 	and	r2,r5,r2
1010b9d8:	80801915 	stw	r2,100(r16)
1010b9dc:	80800017 	ldw	r2,0(r16)
1010b9e0:	8100030d 	sth	r4,12(r16)
1010b9e4:	81000517 	ldw	r4,20(r16)
1010b9e8:	10c7c83a 	sub	r3,r2,r3
1010b9ec:	193fe016 	blt	r3,r4,1010b970 <__alt_data_end+0xfffeb970>
1010b9f0:	800b883a 	mov	r5,r16
1010b9f4:	9009883a 	mov	r4,r18
1010b9f8:	0101f400 	call	10101f40 <_fflush_r>
1010b9fc:	1000071e 	bne	r2,zero,1010ba1c <__swbuf_r+0x114>
1010ba00:	80800017 	ldw	r2,0(r16)
1010ba04:	00c00044 	movi	r3,1
1010ba08:	003fda06 	br	1010b974 <__alt_data_end+0xfffeb974>
1010ba0c:	800b883a 	mov	r5,r16
1010ba10:	9009883a 	mov	r4,r18
1010ba14:	0101f400 	call	10101f40 <_fflush_r>
1010ba18:	103fe326 	beq	r2,zero,1010b9a8 <__alt_data_end+0xfffeb9a8>
1010ba1c:	00bfffc4 	movi	r2,-1
1010ba20:	003fe206 	br	1010b9ac <__alt_data_end+0xfffeb9ac>
1010ba24:	800b883a 	mov	r5,r16
1010ba28:	9009883a 	mov	r4,r18
1010ba2c:	01064340 	call	10106434 <__swsetup_r>
1010ba30:	103ffa1e 	bne	r2,zero,1010ba1c <__alt_data_end+0xfffeba1c>
1010ba34:	8100030b 	ldhu	r4,12(r16)
1010ba38:	80c00417 	ldw	r3,16(r16)
1010ba3c:	003fc506 	br	1010b954 <__alt_data_end+0xfffeb954>
1010ba40:	010231c0 	call	1010231c <__sinit>
1010ba44:	003fbc06 	br	1010b938 <__alt_data_end+0xfffeb938>

1010ba48 <__swbuf>:
1010ba48:	00840474 	movhi	r2,4113
1010ba4c:	108cf104 	addi	r2,r2,13252
1010ba50:	280d883a 	mov	r6,r5
1010ba54:	200b883a 	mov	r5,r4
1010ba58:	11000017 	ldw	r4,0(r2)
1010ba5c:	010b9081 	jmpi	1010b908 <__swbuf_r>

1010ba60 <_wcrtomb_r>:
1010ba60:	defff604 	addi	sp,sp,-40
1010ba64:	00840474 	movhi	r2,4113
1010ba68:	dc800815 	stw	r18,32(sp)
1010ba6c:	dc400715 	stw	r17,28(sp)
1010ba70:	dc000615 	stw	r16,24(sp)
1010ba74:	108cf504 	addi	r2,r2,13268
1010ba78:	dfc00915 	stw	ra,36(sp)
1010ba7c:	2021883a 	mov	r16,r4
1010ba80:	3823883a 	mov	r17,r7
1010ba84:	14800017 	ldw	r18,0(r2)
1010ba88:	28001426 	beq	r5,zero,1010badc <_wcrtomb_r+0x7c>
1010ba8c:	d9400415 	stw	r5,16(sp)
1010ba90:	d9800515 	stw	r6,20(sp)
1010ba94:	010849c0 	call	1010849c <__locale_charset>
1010ba98:	d9800517 	ldw	r6,20(sp)
1010ba9c:	d9400417 	ldw	r5,16(sp)
1010baa0:	100f883a 	mov	r7,r2
1010baa4:	dc400015 	stw	r17,0(sp)
1010baa8:	8009883a 	mov	r4,r16
1010baac:	903ee83a 	callr	r18
1010bab0:	00ffffc4 	movi	r3,-1
1010bab4:	10c0031e 	bne	r2,r3,1010bac4 <_wcrtomb_r+0x64>
1010bab8:	88000015 	stw	zero,0(r17)
1010babc:	00c02284 	movi	r3,138
1010bac0:	80c00015 	stw	r3,0(r16)
1010bac4:	dfc00917 	ldw	ra,36(sp)
1010bac8:	dc800817 	ldw	r18,32(sp)
1010bacc:	dc400717 	ldw	r17,28(sp)
1010bad0:	dc000617 	ldw	r16,24(sp)
1010bad4:	dec00a04 	addi	sp,sp,40
1010bad8:	f800283a 	ret
1010badc:	010849c0 	call	1010849c <__locale_charset>
1010bae0:	100f883a 	mov	r7,r2
1010bae4:	dc400015 	stw	r17,0(sp)
1010bae8:	000d883a 	mov	r6,zero
1010baec:	d9400104 	addi	r5,sp,4
1010baf0:	8009883a 	mov	r4,r16
1010baf4:	903ee83a 	callr	r18
1010baf8:	003fed06 	br	1010bab0 <__alt_data_end+0xfffebab0>

1010bafc <wcrtomb>:
1010bafc:	defff604 	addi	sp,sp,-40
1010bb00:	00840474 	movhi	r2,4113
1010bb04:	dc800615 	stw	r18,24(sp)
1010bb08:	dc400515 	stw	r17,20(sp)
1010bb0c:	108cf104 	addi	r2,r2,13252
1010bb10:	dfc00915 	stw	ra,36(sp)
1010bb14:	dd000815 	stw	r20,32(sp)
1010bb18:	dcc00715 	stw	r19,28(sp)
1010bb1c:	dc000415 	stw	r16,16(sp)
1010bb20:	3025883a 	mov	r18,r6
1010bb24:	14400017 	ldw	r17,0(r2)
1010bb28:	20001926 	beq	r4,zero,1010bb90 <wcrtomb+0x94>
1010bb2c:	00840474 	movhi	r2,4113
1010bb30:	108cf504 	addi	r2,r2,13268
1010bb34:	15000017 	ldw	r20,0(r2)
1010bb38:	2021883a 	mov	r16,r4
1010bb3c:	2827883a 	mov	r19,r5
1010bb40:	010849c0 	call	1010849c <__locale_charset>
1010bb44:	100f883a 	mov	r7,r2
1010bb48:	dc800015 	stw	r18,0(sp)
1010bb4c:	980d883a 	mov	r6,r19
1010bb50:	800b883a 	mov	r5,r16
1010bb54:	8809883a 	mov	r4,r17
1010bb58:	a03ee83a 	callr	r20
1010bb5c:	00ffffc4 	movi	r3,-1
1010bb60:	10c0031e 	bne	r2,r3,1010bb70 <wcrtomb+0x74>
1010bb64:	90000015 	stw	zero,0(r18)
1010bb68:	00c02284 	movi	r3,138
1010bb6c:	88c00015 	stw	r3,0(r17)
1010bb70:	dfc00917 	ldw	ra,36(sp)
1010bb74:	dd000817 	ldw	r20,32(sp)
1010bb78:	dcc00717 	ldw	r19,28(sp)
1010bb7c:	dc800617 	ldw	r18,24(sp)
1010bb80:	dc400517 	ldw	r17,20(sp)
1010bb84:	dc000417 	ldw	r16,16(sp)
1010bb88:	dec00a04 	addi	sp,sp,40
1010bb8c:	f800283a 	ret
1010bb90:	00840474 	movhi	r2,4113
1010bb94:	108cf504 	addi	r2,r2,13268
1010bb98:	14000017 	ldw	r16,0(r2)
1010bb9c:	010849c0 	call	1010849c <__locale_charset>
1010bba0:	100f883a 	mov	r7,r2
1010bba4:	dc800015 	stw	r18,0(sp)
1010bba8:	000d883a 	mov	r6,zero
1010bbac:	d9400104 	addi	r5,sp,4
1010bbb0:	8809883a 	mov	r4,r17
1010bbb4:	803ee83a 	callr	r16
1010bbb8:	003fe806 	br	1010bb5c <__alt_data_end+0xfffebb5c>

1010bbbc <__ascii_wctomb>:
1010bbbc:	28000526 	beq	r5,zero,1010bbd4 <__ascii_wctomb+0x18>
1010bbc0:	00803fc4 	movi	r2,255
1010bbc4:	11800536 	bltu	r2,r6,1010bbdc <__ascii_wctomb+0x20>
1010bbc8:	29800005 	stb	r6,0(r5)
1010bbcc:	00800044 	movi	r2,1
1010bbd0:	f800283a 	ret
1010bbd4:	0005883a 	mov	r2,zero
1010bbd8:	f800283a 	ret
1010bbdc:	00802284 	movi	r2,138
1010bbe0:	20800015 	stw	r2,0(r4)
1010bbe4:	00bfffc4 	movi	r2,-1
1010bbe8:	f800283a 	ret

1010bbec <_wctomb_r>:
1010bbec:	00840474 	movhi	r2,4113
1010bbf0:	defff904 	addi	sp,sp,-28
1010bbf4:	108cf504 	addi	r2,r2,13268
1010bbf8:	dfc00615 	stw	ra,24(sp)
1010bbfc:	dc400515 	stw	r17,20(sp)
1010bc00:	dc000415 	stw	r16,16(sp)
1010bc04:	3823883a 	mov	r17,r7
1010bc08:	14000017 	ldw	r16,0(r2)
1010bc0c:	d9000115 	stw	r4,4(sp)
1010bc10:	d9400215 	stw	r5,8(sp)
1010bc14:	d9800315 	stw	r6,12(sp)
1010bc18:	010849c0 	call	1010849c <__locale_charset>
1010bc1c:	d9800317 	ldw	r6,12(sp)
1010bc20:	d9400217 	ldw	r5,8(sp)
1010bc24:	d9000117 	ldw	r4,4(sp)
1010bc28:	100f883a 	mov	r7,r2
1010bc2c:	dc400015 	stw	r17,0(sp)
1010bc30:	803ee83a 	callr	r16
1010bc34:	dfc00617 	ldw	ra,24(sp)
1010bc38:	dc400517 	ldw	r17,20(sp)
1010bc3c:	dc000417 	ldw	r16,16(sp)
1010bc40:	dec00704 	addi	sp,sp,28
1010bc44:	f800283a 	ret

1010bc48 <__udivdi3>:
1010bc48:	defff504 	addi	sp,sp,-44
1010bc4c:	dcc00415 	stw	r19,16(sp)
1010bc50:	dc000115 	stw	r16,4(sp)
1010bc54:	dfc00a15 	stw	ra,40(sp)
1010bc58:	df000915 	stw	fp,36(sp)
1010bc5c:	ddc00815 	stw	r23,32(sp)
1010bc60:	dd800715 	stw	r22,28(sp)
1010bc64:	dd400615 	stw	r21,24(sp)
1010bc68:	dd000515 	stw	r20,20(sp)
1010bc6c:	dc800315 	stw	r18,12(sp)
1010bc70:	dc400215 	stw	r17,8(sp)
1010bc74:	2027883a 	mov	r19,r4
1010bc78:	2821883a 	mov	r16,r5
1010bc7c:	3800411e 	bne	r7,zero,1010bd84 <__udivdi3+0x13c>
1010bc80:	3023883a 	mov	r17,r6
1010bc84:	2025883a 	mov	r18,r4
1010bc88:	2980522e 	bgeu	r5,r6,1010bdd4 <__udivdi3+0x18c>
1010bc8c:	00bfffd4 	movui	r2,65535
1010bc90:	282d883a 	mov	r22,r5
1010bc94:	1180a836 	bltu	r2,r6,1010bf38 <__udivdi3+0x2f0>
1010bc98:	00803fc4 	movi	r2,255
1010bc9c:	1185803a 	cmpltu	r2,r2,r6
1010bca0:	100490fa 	slli	r2,r2,3
1010bca4:	3086d83a 	srl	r3,r6,r2
1010bca8:	01040474 	movhi	r4,4113
1010bcac:	2105f804 	addi	r4,r4,6112
1010bcb0:	20c7883a 	add	r3,r4,r3
1010bcb4:	18c00003 	ldbu	r3,0(r3)
1010bcb8:	1885883a 	add	r2,r3,r2
1010bcbc:	00c00804 	movi	r3,32
1010bcc0:	1887c83a 	sub	r3,r3,r2
1010bcc4:	18000526 	beq	r3,zero,1010bcdc <__udivdi3+0x94>
1010bcc8:	80e0983a 	sll	r16,r16,r3
1010bccc:	9884d83a 	srl	r2,r19,r2
1010bcd0:	30e2983a 	sll	r17,r6,r3
1010bcd4:	98e4983a 	sll	r18,r19,r3
1010bcd8:	142cb03a 	or	r22,r2,r16
1010bcdc:	882ad43a 	srli	r21,r17,16
1010bce0:	b009883a 	mov	r4,r22
1010bce4:	8d3fffcc 	andi	r20,r17,65535
1010bce8:	a80b883a 	mov	r5,r21
1010bcec:	0101bc80 	call	10101bc8 <__umodsi3>
1010bcf0:	b009883a 	mov	r4,r22
1010bcf4:	a80b883a 	mov	r5,r21
1010bcf8:	1027883a 	mov	r19,r2
1010bcfc:	0101b640 	call	10101b64 <__udivsi3>
1010bd00:	102d883a 	mov	r22,r2
1010bd04:	9826943a 	slli	r19,r19,16
1010bd08:	9004d43a 	srli	r2,r18,16
1010bd0c:	a5a1383a 	mul	r16,r20,r22
1010bd10:	14c4b03a 	or	r2,r2,r19
1010bd14:	1400052e 	bgeu	r2,r16,1010bd2c <__udivdi3+0xe4>
1010bd18:	1445883a 	add	r2,r2,r17
1010bd1c:	b0ffffc4 	addi	r3,r22,-1
1010bd20:	14400136 	bltu	r2,r17,1010bd28 <__udivdi3+0xe0>
1010bd24:	14012336 	bltu	r2,r16,1010c1b4 <__udivdi3+0x56c>
1010bd28:	182d883a 	mov	r22,r3
1010bd2c:	1421c83a 	sub	r16,r2,r16
1010bd30:	a80b883a 	mov	r5,r21
1010bd34:	8009883a 	mov	r4,r16
1010bd38:	0101bc80 	call	10101bc8 <__umodsi3>
1010bd3c:	1027883a 	mov	r19,r2
1010bd40:	a80b883a 	mov	r5,r21
1010bd44:	8009883a 	mov	r4,r16
1010bd48:	0101b640 	call	10101b64 <__udivsi3>
1010bd4c:	9826943a 	slli	r19,r19,16
1010bd50:	a0a9383a 	mul	r20,r20,r2
1010bd54:	94bfffcc 	andi	r18,r18,65535
1010bd58:	94e4b03a 	or	r18,r18,r19
1010bd5c:	9500052e 	bgeu	r18,r20,1010bd74 <__udivdi3+0x12c>
1010bd60:	8ca5883a 	add	r18,r17,r18
1010bd64:	10ffffc4 	addi	r3,r2,-1
1010bd68:	9440f136 	bltu	r18,r17,1010c130 <__udivdi3+0x4e8>
1010bd6c:	9500f02e 	bgeu	r18,r20,1010c130 <__udivdi3+0x4e8>
1010bd70:	10bfff84 	addi	r2,r2,-2
1010bd74:	b00c943a 	slli	r6,r22,16
1010bd78:	0007883a 	mov	r3,zero
1010bd7c:	3084b03a 	or	r2,r6,r2
1010bd80:	00005906 	br	1010bee8 <__udivdi3+0x2a0>
1010bd84:	29c05636 	bltu	r5,r7,1010bee0 <__udivdi3+0x298>
1010bd88:	00bfffd4 	movui	r2,65535
1010bd8c:	11c0622e 	bgeu	r2,r7,1010bf18 <__udivdi3+0x2d0>
1010bd90:	00804034 	movhi	r2,256
1010bd94:	10bfffc4 	addi	r2,r2,-1
1010bd98:	11c0ee36 	bltu	r2,r7,1010c154 <__udivdi3+0x50c>
1010bd9c:	00800404 	movi	r2,16
1010bda0:	3886d83a 	srl	r3,r7,r2
1010bda4:	01040474 	movhi	r4,4113
1010bda8:	2105f804 	addi	r4,r4,6112
1010bdac:	20c7883a 	add	r3,r4,r3
1010bdb0:	18c00003 	ldbu	r3,0(r3)
1010bdb4:	05400804 	movi	r21,32
1010bdb8:	1885883a 	add	r2,r3,r2
1010bdbc:	a8abc83a 	sub	r21,r21,r2
1010bdc0:	a800621e 	bne	r21,zero,1010bf4c <__udivdi3+0x304>
1010bdc4:	3c00e936 	bltu	r7,r16,1010c16c <__udivdi3+0x524>
1010bdc8:	9985403a 	cmpgeu	r2,r19,r6
1010bdcc:	0007883a 	mov	r3,zero
1010bdd0:	00004506 	br	1010bee8 <__udivdi3+0x2a0>
1010bdd4:	3000041e 	bne	r6,zero,1010bde8 <__udivdi3+0x1a0>
1010bdd8:	000b883a 	mov	r5,zero
1010bddc:	01000044 	movi	r4,1
1010bde0:	0101b640 	call	10101b64 <__udivsi3>
1010bde4:	1023883a 	mov	r17,r2
1010bde8:	00bfffd4 	movui	r2,65535
1010bdec:	14404e2e 	bgeu	r2,r17,1010bf28 <__udivdi3+0x2e0>
1010bdf0:	00804034 	movhi	r2,256
1010bdf4:	10bfffc4 	addi	r2,r2,-1
1010bdf8:	1440d836 	bltu	r2,r17,1010c15c <__udivdi3+0x514>
1010bdfc:	00800404 	movi	r2,16
1010be00:	8886d83a 	srl	r3,r17,r2
1010be04:	01040474 	movhi	r4,4113
1010be08:	2105f804 	addi	r4,r4,6112
1010be0c:	20c7883a 	add	r3,r4,r3
1010be10:	18c00003 	ldbu	r3,0(r3)
1010be14:	1885883a 	add	r2,r3,r2
1010be18:	00c00804 	movi	r3,32
1010be1c:	1887c83a 	sub	r3,r3,r2
1010be20:	18008f1e 	bne	r3,zero,1010c060 <__udivdi3+0x418>
1010be24:	882ad43a 	srli	r21,r17,16
1010be28:	8461c83a 	sub	r16,r16,r17
1010be2c:	8d3fffcc 	andi	r20,r17,65535
1010be30:	00c00044 	movi	r3,1
1010be34:	8009883a 	mov	r4,r16
1010be38:	a80b883a 	mov	r5,r21
1010be3c:	d8c00015 	stw	r3,0(sp)
1010be40:	0101bc80 	call	10101bc8 <__umodsi3>
1010be44:	8009883a 	mov	r4,r16
1010be48:	a80b883a 	mov	r5,r21
1010be4c:	1027883a 	mov	r19,r2
1010be50:	0101b640 	call	10101b64 <__udivsi3>
1010be54:	9826943a 	slli	r19,r19,16
1010be58:	9008d43a 	srli	r4,r18,16
1010be5c:	1521383a 	mul	r16,r2,r20
1010be60:	102d883a 	mov	r22,r2
1010be64:	24c8b03a 	or	r4,r4,r19
1010be68:	d8c00017 	ldw	r3,0(sp)
1010be6c:	2400052e 	bgeu	r4,r16,1010be84 <__udivdi3+0x23c>
1010be70:	2449883a 	add	r4,r4,r17
1010be74:	b0bfffc4 	addi	r2,r22,-1
1010be78:	24400136 	bltu	r4,r17,1010be80 <__udivdi3+0x238>
1010be7c:	2400ca36 	bltu	r4,r16,1010c1a8 <__udivdi3+0x560>
1010be80:	102d883a 	mov	r22,r2
1010be84:	2421c83a 	sub	r16,r4,r16
1010be88:	a80b883a 	mov	r5,r21
1010be8c:	8009883a 	mov	r4,r16
1010be90:	d8c00015 	stw	r3,0(sp)
1010be94:	0101bc80 	call	10101bc8 <__umodsi3>
1010be98:	1027883a 	mov	r19,r2
1010be9c:	a80b883a 	mov	r5,r21
1010bea0:	8009883a 	mov	r4,r16
1010bea4:	0101b640 	call	10101b64 <__udivsi3>
1010bea8:	9826943a 	slli	r19,r19,16
1010beac:	1529383a 	mul	r20,r2,r20
1010beb0:	94bfffcc 	andi	r18,r18,65535
1010beb4:	94e4b03a 	or	r18,r18,r19
1010beb8:	d8c00017 	ldw	r3,0(sp)
1010bebc:	9500052e 	bgeu	r18,r20,1010bed4 <__udivdi3+0x28c>
1010bec0:	8ca5883a 	add	r18,r17,r18
1010bec4:	113fffc4 	addi	r4,r2,-1
1010bec8:	94409736 	bltu	r18,r17,1010c128 <__udivdi3+0x4e0>
1010becc:	9500962e 	bgeu	r18,r20,1010c128 <__udivdi3+0x4e0>
1010bed0:	10bfff84 	addi	r2,r2,-2
1010bed4:	b00c943a 	slli	r6,r22,16
1010bed8:	3084b03a 	or	r2,r6,r2
1010bedc:	00000206 	br	1010bee8 <__udivdi3+0x2a0>
1010bee0:	0007883a 	mov	r3,zero
1010bee4:	0005883a 	mov	r2,zero
1010bee8:	dfc00a17 	ldw	ra,40(sp)
1010beec:	df000917 	ldw	fp,36(sp)
1010bef0:	ddc00817 	ldw	r23,32(sp)
1010bef4:	dd800717 	ldw	r22,28(sp)
1010bef8:	dd400617 	ldw	r21,24(sp)
1010befc:	dd000517 	ldw	r20,20(sp)
1010bf00:	dcc00417 	ldw	r19,16(sp)
1010bf04:	dc800317 	ldw	r18,12(sp)
1010bf08:	dc400217 	ldw	r17,8(sp)
1010bf0c:	dc000117 	ldw	r16,4(sp)
1010bf10:	dec00b04 	addi	sp,sp,44
1010bf14:	f800283a 	ret
1010bf18:	00803fc4 	movi	r2,255
1010bf1c:	11c5803a 	cmpltu	r2,r2,r7
1010bf20:	100490fa 	slli	r2,r2,3
1010bf24:	003f9e06 	br	1010bda0 <__alt_data_end+0xfffebda0>
1010bf28:	00803fc4 	movi	r2,255
1010bf2c:	1445803a 	cmpltu	r2,r2,r17
1010bf30:	100490fa 	slli	r2,r2,3
1010bf34:	003fb206 	br	1010be00 <__alt_data_end+0xfffebe00>
1010bf38:	00804034 	movhi	r2,256
1010bf3c:	10bfffc4 	addi	r2,r2,-1
1010bf40:	11808836 	bltu	r2,r6,1010c164 <__udivdi3+0x51c>
1010bf44:	00800404 	movi	r2,16
1010bf48:	003f5606 	br	1010bca4 <__alt_data_end+0xfffebca4>
1010bf4c:	30aed83a 	srl	r23,r6,r2
1010bf50:	3d4e983a 	sll	r7,r7,r21
1010bf54:	80acd83a 	srl	r22,r16,r2
1010bf58:	9884d83a 	srl	r2,r19,r2
1010bf5c:	3deeb03a 	or	r23,r7,r23
1010bf60:	b824d43a 	srli	r18,r23,16
1010bf64:	8560983a 	sll	r16,r16,r21
1010bf68:	b009883a 	mov	r4,r22
1010bf6c:	900b883a 	mov	r5,r18
1010bf70:	3568983a 	sll	r20,r6,r21
1010bf74:	1420b03a 	or	r16,r2,r16
1010bf78:	0101bc80 	call	10101bc8 <__umodsi3>
1010bf7c:	b009883a 	mov	r4,r22
1010bf80:	900b883a 	mov	r5,r18
1010bf84:	1023883a 	mov	r17,r2
1010bf88:	0101b640 	call	10101b64 <__udivsi3>
1010bf8c:	8808943a 	slli	r4,r17,16
1010bf90:	bf3fffcc 	andi	fp,r23,65535
1010bf94:	8006d43a 	srli	r3,r16,16
1010bf98:	e0a3383a 	mul	r17,fp,r2
1010bf9c:	100d883a 	mov	r6,r2
1010bfa0:	1906b03a 	or	r3,r3,r4
1010bfa4:	1c40042e 	bgeu	r3,r17,1010bfb8 <__udivdi3+0x370>
1010bfa8:	1dc7883a 	add	r3,r3,r23
1010bfac:	10bfffc4 	addi	r2,r2,-1
1010bfb0:	1dc0752e 	bgeu	r3,r23,1010c188 <__udivdi3+0x540>
1010bfb4:	100d883a 	mov	r6,r2
1010bfb8:	1c63c83a 	sub	r17,r3,r17
1010bfbc:	900b883a 	mov	r5,r18
1010bfc0:	8809883a 	mov	r4,r17
1010bfc4:	d9800015 	stw	r6,0(sp)
1010bfc8:	0101bc80 	call	10101bc8 <__umodsi3>
1010bfcc:	102d883a 	mov	r22,r2
1010bfd0:	8809883a 	mov	r4,r17
1010bfd4:	900b883a 	mov	r5,r18
1010bfd8:	0101b640 	call	10101b64 <__udivsi3>
1010bfdc:	b02c943a 	slli	r22,r22,16
1010bfe0:	e089383a 	mul	r4,fp,r2
1010bfe4:	843fffcc 	andi	r16,r16,65535
1010bfe8:	85a0b03a 	or	r16,r16,r22
1010bfec:	d9800017 	ldw	r6,0(sp)
1010bff0:	8100042e 	bgeu	r16,r4,1010c004 <__udivdi3+0x3bc>
1010bff4:	85e1883a 	add	r16,r16,r23
1010bff8:	10ffffc4 	addi	r3,r2,-1
1010bffc:	85c05e2e 	bgeu	r16,r23,1010c178 <__udivdi3+0x530>
1010c000:	1805883a 	mov	r2,r3
1010c004:	300c943a 	slli	r6,r6,16
1010c008:	a17fffcc 	andi	r5,r20,65535
1010c00c:	a028d43a 	srli	r20,r20,16
1010c010:	3084b03a 	or	r2,r6,r2
1010c014:	10ffffcc 	andi	r3,r2,65535
1010c018:	100cd43a 	srli	r6,r2,16
1010c01c:	194f383a 	mul	r7,r3,r5
1010c020:	1d07383a 	mul	r3,r3,r20
1010c024:	314b383a 	mul	r5,r6,r5
1010c028:	3810d43a 	srli	r8,r7,16
1010c02c:	8121c83a 	sub	r16,r16,r4
1010c030:	1947883a 	add	r3,r3,r5
1010c034:	40c7883a 	add	r3,r8,r3
1010c038:	350d383a 	mul	r6,r6,r20
1010c03c:	1940022e 	bgeu	r3,r5,1010c048 <__udivdi3+0x400>
1010c040:	01000074 	movhi	r4,1
1010c044:	310d883a 	add	r6,r6,r4
1010c048:	1828d43a 	srli	r20,r3,16
1010c04c:	a18d883a 	add	r6,r20,r6
1010c050:	81803e36 	bltu	r16,r6,1010c14c <__udivdi3+0x504>
1010c054:	81803826 	beq	r16,r6,1010c138 <__udivdi3+0x4f0>
1010c058:	0007883a 	mov	r3,zero
1010c05c:	003fa206 	br	1010bee8 <__alt_data_end+0xfffebee8>
1010c060:	88e2983a 	sll	r17,r17,r3
1010c064:	80a8d83a 	srl	r20,r16,r2
1010c068:	80e0983a 	sll	r16,r16,r3
1010c06c:	882ad43a 	srli	r21,r17,16
1010c070:	9884d83a 	srl	r2,r19,r2
1010c074:	a009883a 	mov	r4,r20
1010c078:	a80b883a 	mov	r5,r21
1010c07c:	142eb03a 	or	r23,r2,r16
1010c080:	98e4983a 	sll	r18,r19,r3
1010c084:	0101bc80 	call	10101bc8 <__umodsi3>
1010c088:	a009883a 	mov	r4,r20
1010c08c:	a80b883a 	mov	r5,r21
1010c090:	1021883a 	mov	r16,r2
1010c094:	0101b640 	call	10101b64 <__udivsi3>
1010c098:	1039883a 	mov	fp,r2
1010c09c:	8d3fffcc 	andi	r20,r17,65535
1010c0a0:	8020943a 	slli	r16,r16,16
1010c0a4:	b804d43a 	srli	r2,r23,16
1010c0a8:	a72d383a 	mul	r22,r20,fp
1010c0ac:	1404b03a 	or	r2,r2,r16
1010c0b0:	1580062e 	bgeu	r2,r22,1010c0cc <__udivdi3+0x484>
1010c0b4:	1445883a 	add	r2,r2,r17
1010c0b8:	e0ffffc4 	addi	r3,fp,-1
1010c0bc:	14403836 	bltu	r2,r17,1010c1a0 <__udivdi3+0x558>
1010c0c0:	1580372e 	bgeu	r2,r22,1010c1a0 <__udivdi3+0x558>
1010c0c4:	e73fff84 	addi	fp,fp,-2
1010c0c8:	1445883a 	add	r2,r2,r17
1010c0cc:	15adc83a 	sub	r22,r2,r22
1010c0d0:	a80b883a 	mov	r5,r21
1010c0d4:	b009883a 	mov	r4,r22
1010c0d8:	0101bc80 	call	10101bc8 <__umodsi3>
1010c0dc:	1027883a 	mov	r19,r2
1010c0e0:	b009883a 	mov	r4,r22
1010c0e4:	a80b883a 	mov	r5,r21
1010c0e8:	0101b640 	call	10101b64 <__udivsi3>
1010c0ec:	9826943a 	slli	r19,r19,16
1010c0f0:	a0a1383a 	mul	r16,r20,r2
1010c0f4:	b93fffcc 	andi	r4,r23,65535
1010c0f8:	24c8b03a 	or	r4,r4,r19
1010c0fc:	2400062e 	bgeu	r4,r16,1010c118 <__udivdi3+0x4d0>
1010c100:	2449883a 	add	r4,r4,r17
1010c104:	10ffffc4 	addi	r3,r2,-1
1010c108:	24402336 	bltu	r4,r17,1010c198 <__udivdi3+0x550>
1010c10c:	2400222e 	bgeu	r4,r16,1010c198 <__udivdi3+0x550>
1010c110:	10bfff84 	addi	r2,r2,-2
1010c114:	2449883a 	add	r4,r4,r17
1010c118:	e038943a 	slli	fp,fp,16
1010c11c:	2421c83a 	sub	r16,r4,r16
1010c120:	e086b03a 	or	r3,fp,r2
1010c124:	003f4306 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c128:	2005883a 	mov	r2,r4
1010c12c:	003f6906 	br	1010bed4 <__alt_data_end+0xfffebed4>
1010c130:	1805883a 	mov	r2,r3
1010c134:	003f0f06 	br	1010bd74 <__alt_data_end+0xfffebd74>
1010c138:	1806943a 	slli	r3,r3,16
1010c13c:	9d66983a 	sll	r19,r19,r21
1010c140:	39ffffcc 	andi	r7,r7,65535
1010c144:	19c7883a 	add	r3,r3,r7
1010c148:	98ffc32e 	bgeu	r19,r3,1010c058 <__alt_data_end+0xfffec058>
1010c14c:	10bfffc4 	addi	r2,r2,-1
1010c150:	003fc106 	br	1010c058 <__alt_data_end+0xfffec058>
1010c154:	00800604 	movi	r2,24
1010c158:	003f1106 	br	1010bda0 <__alt_data_end+0xfffebda0>
1010c15c:	00800604 	movi	r2,24
1010c160:	003f2706 	br	1010be00 <__alt_data_end+0xfffebe00>
1010c164:	00800604 	movi	r2,24
1010c168:	003ece06 	br	1010bca4 <__alt_data_end+0xfffebca4>
1010c16c:	0007883a 	mov	r3,zero
1010c170:	00800044 	movi	r2,1
1010c174:	003f5c06 	br	1010bee8 <__alt_data_end+0xfffebee8>
1010c178:	813fa12e 	bgeu	r16,r4,1010c000 <__alt_data_end+0xfffec000>
1010c17c:	10bfff84 	addi	r2,r2,-2
1010c180:	85e1883a 	add	r16,r16,r23
1010c184:	003f9f06 	br	1010c004 <__alt_data_end+0xfffec004>
1010c188:	1c7f8a2e 	bgeu	r3,r17,1010bfb4 <__alt_data_end+0xfffebfb4>
1010c18c:	31bfff84 	addi	r6,r6,-2
1010c190:	1dc7883a 	add	r3,r3,r23
1010c194:	003f8806 	br	1010bfb8 <__alt_data_end+0xfffebfb8>
1010c198:	1805883a 	mov	r2,r3
1010c19c:	003fde06 	br	1010c118 <__alt_data_end+0xfffec118>
1010c1a0:	1839883a 	mov	fp,r3
1010c1a4:	003fc906 	br	1010c0cc <__alt_data_end+0xfffec0cc>
1010c1a8:	b5bfff84 	addi	r22,r22,-2
1010c1ac:	2449883a 	add	r4,r4,r17
1010c1b0:	003f3406 	br	1010be84 <__alt_data_end+0xfffebe84>
1010c1b4:	b5bfff84 	addi	r22,r22,-2
1010c1b8:	1445883a 	add	r2,r2,r17
1010c1bc:	003edb06 	br	1010bd2c <__alt_data_end+0xfffebd2c>

1010c1c0 <__umoddi3>:
1010c1c0:	defff404 	addi	sp,sp,-48
1010c1c4:	df000a15 	stw	fp,40(sp)
1010c1c8:	dc400315 	stw	r17,12(sp)
1010c1cc:	dc000215 	stw	r16,8(sp)
1010c1d0:	dfc00b15 	stw	ra,44(sp)
1010c1d4:	ddc00915 	stw	r23,36(sp)
1010c1d8:	dd800815 	stw	r22,32(sp)
1010c1dc:	dd400715 	stw	r21,28(sp)
1010c1e0:	dd000615 	stw	r20,24(sp)
1010c1e4:	dcc00515 	stw	r19,20(sp)
1010c1e8:	dc800415 	stw	r18,16(sp)
1010c1ec:	2021883a 	mov	r16,r4
1010c1f0:	2823883a 	mov	r17,r5
1010c1f4:	2839883a 	mov	fp,r5
1010c1f8:	38003c1e 	bne	r7,zero,1010c2ec <__umoddi3+0x12c>
1010c1fc:	3027883a 	mov	r19,r6
1010c200:	2029883a 	mov	r20,r4
1010c204:	2980512e 	bgeu	r5,r6,1010c34c <__umoddi3+0x18c>
1010c208:	00bfffd4 	movui	r2,65535
1010c20c:	11809a36 	bltu	r2,r6,1010c478 <__umoddi3+0x2b8>
1010c210:	01003fc4 	movi	r4,255
1010c214:	2189803a 	cmpltu	r4,r4,r6
1010c218:	200890fa 	slli	r4,r4,3
1010c21c:	3104d83a 	srl	r2,r6,r4
1010c220:	00c40474 	movhi	r3,4113
1010c224:	18c5f804 	addi	r3,r3,6112
1010c228:	1885883a 	add	r2,r3,r2
1010c22c:	10c00003 	ldbu	r3,0(r2)
1010c230:	00800804 	movi	r2,32
1010c234:	1909883a 	add	r4,r3,r4
1010c238:	1125c83a 	sub	r18,r2,r4
1010c23c:	90000526 	beq	r18,zero,1010c254 <__umoddi3+0x94>
1010c240:	8ca2983a 	sll	r17,r17,r18
1010c244:	8108d83a 	srl	r4,r16,r4
1010c248:	34a6983a 	sll	r19,r6,r18
1010c24c:	84a8983a 	sll	r20,r16,r18
1010c250:	2478b03a 	or	fp,r4,r17
1010c254:	982ed43a 	srli	r23,r19,16
1010c258:	e009883a 	mov	r4,fp
1010c25c:	9dbfffcc 	andi	r22,r19,65535
1010c260:	b80b883a 	mov	r5,r23
1010c264:	0101bc80 	call	10101bc8 <__umodsi3>
1010c268:	e009883a 	mov	r4,fp
1010c26c:	b80b883a 	mov	r5,r23
1010c270:	102b883a 	mov	r21,r2
1010c274:	0101b640 	call	10101b64 <__udivsi3>
1010c278:	a806943a 	slli	r3,r21,16
1010c27c:	a008d43a 	srli	r4,r20,16
1010c280:	b085383a 	mul	r2,r22,r2
1010c284:	20c8b03a 	or	r4,r4,r3
1010c288:	2080032e 	bgeu	r4,r2,1010c298 <__umoddi3+0xd8>
1010c28c:	24c9883a 	add	r4,r4,r19
1010c290:	24c00136 	bltu	r4,r19,1010c298 <__umoddi3+0xd8>
1010c294:	20811036 	bltu	r4,r2,1010c6d8 <__umoddi3+0x518>
1010c298:	20abc83a 	sub	r21,r4,r2
1010c29c:	b80b883a 	mov	r5,r23
1010c2a0:	a809883a 	mov	r4,r21
1010c2a4:	0101bc80 	call	10101bc8 <__umodsi3>
1010c2a8:	1023883a 	mov	r17,r2
1010c2ac:	b80b883a 	mov	r5,r23
1010c2b0:	a809883a 	mov	r4,r21
1010c2b4:	0101b640 	call	10101b64 <__udivsi3>
1010c2b8:	8822943a 	slli	r17,r17,16
1010c2bc:	b085383a 	mul	r2,r22,r2
1010c2c0:	a0ffffcc 	andi	r3,r20,65535
1010c2c4:	1c46b03a 	or	r3,r3,r17
1010c2c8:	1880042e 	bgeu	r3,r2,1010c2dc <__umoddi3+0x11c>
1010c2cc:	1cc7883a 	add	r3,r3,r19
1010c2d0:	1cc00236 	bltu	r3,r19,1010c2dc <__umoddi3+0x11c>
1010c2d4:	1880012e 	bgeu	r3,r2,1010c2dc <__umoddi3+0x11c>
1010c2d8:	1cc7883a 	add	r3,r3,r19
1010c2dc:	1885c83a 	sub	r2,r3,r2
1010c2e0:	1484d83a 	srl	r2,r2,r18
1010c2e4:	0007883a 	mov	r3,zero
1010c2e8:	00004f06 	br	1010c428 <__umoddi3+0x268>
1010c2ec:	29c04c36 	bltu	r5,r7,1010c420 <__umoddi3+0x260>
1010c2f0:	00bfffd4 	movui	r2,65535
1010c2f4:	11c0582e 	bgeu	r2,r7,1010c458 <__umoddi3+0x298>
1010c2f8:	00804034 	movhi	r2,256
1010c2fc:	10bfffc4 	addi	r2,r2,-1
1010c300:	11c0e736 	bltu	r2,r7,1010c6a0 <__umoddi3+0x4e0>
1010c304:	01000404 	movi	r4,16
1010c308:	3904d83a 	srl	r2,r7,r4
1010c30c:	00c40474 	movhi	r3,4113
1010c310:	18c5f804 	addi	r3,r3,6112
1010c314:	1885883a 	add	r2,r3,r2
1010c318:	14c00003 	ldbu	r19,0(r2)
1010c31c:	00c00804 	movi	r3,32
1010c320:	9927883a 	add	r19,r19,r4
1010c324:	1ce9c83a 	sub	r20,r3,r19
1010c328:	a000581e 	bne	r20,zero,1010c48c <__umoddi3+0x2cc>
1010c32c:	3c400136 	bltu	r7,r17,1010c334 <__umoddi3+0x174>
1010c330:	8180eb36 	bltu	r16,r6,1010c6e0 <__umoddi3+0x520>
1010c334:	8185c83a 	sub	r2,r16,r6
1010c338:	89e3c83a 	sub	r17,r17,r7
1010c33c:	8089803a 	cmpltu	r4,r16,r2
1010c340:	8939c83a 	sub	fp,r17,r4
1010c344:	e007883a 	mov	r3,fp
1010c348:	00003706 	br	1010c428 <__umoddi3+0x268>
1010c34c:	3000041e 	bne	r6,zero,1010c360 <__umoddi3+0x1a0>
1010c350:	000b883a 	mov	r5,zero
1010c354:	01000044 	movi	r4,1
1010c358:	0101b640 	call	10101b64 <__udivsi3>
1010c35c:	1027883a 	mov	r19,r2
1010c360:	00bfffd4 	movui	r2,65535
1010c364:	14c0402e 	bgeu	r2,r19,1010c468 <__umoddi3+0x2a8>
1010c368:	00804034 	movhi	r2,256
1010c36c:	10bfffc4 	addi	r2,r2,-1
1010c370:	14c0cd36 	bltu	r2,r19,1010c6a8 <__umoddi3+0x4e8>
1010c374:	00800404 	movi	r2,16
1010c378:	9886d83a 	srl	r3,r19,r2
1010c37c:	01040474 	movhi	r4,4113
1010c380:	2105f804 	addi	r4,r4,6112
1010c384:	20c7883a 	add	r3,r4,r3
1010c388:	18c00003 	ldbu	r3,0(r3)
1010c38c:	1887883a 	add	r3,r3,r2
1010c390:	00800804 	movi	r2,32
1010c394:	10e5c83a 	sub	r18,r2,r3
1010c398:	9000901e 	bne	r18,zero,1010c5dc <__umoddi3+0x41c>
1010c39c:	982cd43a 	srli	r22,r19,16
1010c3a0:	8ce3c83a 	sub	r17,r17,r19
1010c3a4:	9d7fffcc 	andi	r21,r19,65535
1010c3a8:	b00b883a 	mov	r5,r22
1010c3ac:	8809883a 	mov	r4,r17
1010c3b0:	0101bc80 	call	10101bc8 <__umodsi3>
1010c3b4:	8809883a 	mov	r4,r17
1010c3b8:	b00b883a 	mov	r5,r22
1010c3bc:	1021883a 	mov	r16,r2
1010c3c0:	0101b640 	call	10101b64 <__udivsi3>
1010c3c4:	8006943a 	slli	r3,r16,16
1010c3c8:	a008d43a 	srli	r4,r20,16
1010c3cc:	1545383a 	mul	r2,r2,r21
1010c3d0:	20c8b03a 	or	r4,r4,r3
1010c3d4:	2080042e 	bgeu	r4,r2,1010c3e8 <__umoddi3+0x228>
1010c3d8:	24c9883a 	add	r4,r4,r19
1010c3dc:	24c00236 	bltu	r4,r19,1010c3e8 <__umoddi3+0x228>
1010c3e0:	2080012e 	bgeu	r4,r2,1010c3e8 <__umoddi3+0x228>
1010c3e4:	24c9883a 	add	r4,r4,r19
1010c3e8:	20a1c83a 	sub	r16,r4,r2
1010c3ec:	b00b883a 	mov	r5,r22
1010c3f0:	8009883a 	mov	r4,r16
1010c3f4:	0101bc80 	call	10101bc8 <__umodsi3>
1010c3f8:	1023883a 	mov	r17,r2
1010c3fc:	b00b883a 	mov	r5,r22
1010c400:	8009883a 	mov	r4,r16
1010c404:	0101b640 	call	10101b64 <__udivsi3>
1010c408:	8822943a 	slli	r17,r17,16
1010c40c:	1545383a 	mul	r2,r2,r21
1010c410:	a53fffcc 	andi	r20,r20,65535
1010c414:	a446b03a 	or	r3,r20,r17
1010c418:	18bfb02e 	bgeu	r3,r2,1010c2dc <__alt_data_end+0xfffec2dc>
1010c41c:	003fab06 	br	1010c2cc <__alt_data_end+0xfffec2cc>
1010c420:	2005883a 	mov	r2,r4
1010c424:	2807883a 	mov	r3,r5
1010c428:	dfc00b17 	ldw	ra,44(sp)
1010c42c:	df000a17 	ldw	fp,40(sp)
1010c430:	ddc00917 	ldw	r23,36(sp)
1010c434:	dd800817 	ldw	r22,32(sp)
1010c438:	dd400717 	ldw	r21,28(sp)
1010c43c:	dd000617 	ldw	r20,24(sp)
1010c440:	dcc00517 	ldw	r19,20(sp)
1010c444:	dc800417 	ldw	r18,16(sp)
1010c448:	dc400317 	ldw	r17,12(sp)
1010c44c:	dc000217 	ldw	r16,8(sp)
1010c450:	dec00c04 	addi	sp,sp,48
1010c454:	f800283a 	ret
1010c458:	04c03fc4 	movi	r19,255
1010c45c:	99c9803a 	cmpltu	r4,r19,r7
1010c460:	200890fa 	slli	r4,r4,3
1010c464:	003fa806 	br	1010c308 <__alt_data_end+0xfffec308>
1010c468:	00803fc4 	movi	r2,255
1010c46c:	14c5803a 	cmpltu	r2,r2,r19
1010c470:	100490fa 	slli	r2,r2,3
1010c474:	003fc006 	br	1010c378 <__alt_data_end+0xfffec378>
1010c478:	00804034 	movhi	r2,256
1010c47c:	10bfffc4 	addi	r2,r2,-1
1010c480:	11808b36 	bltu	r2,r6,1010c6b0 <__umoddi3+0x4f0>
1010c484:	01000404 	movi	r4,16
1010c488:	003f6406 	br	1010c21c <__alt_data_end+0xfffec21c>
1010c48c:	34c4d83a 	srl	r2,r6,r19
1010c490:	3d0e983a 	sll	r7,r7,r20
1010c494:	8cf8d83a 	srl	fp,r17,r19
1010c498:	8d10983a 	sll	r8,r17,r20
1010c49c:	38aab03a 	or	r21,r7,r2
1010c4a0:	a82cd43a 	srli	r22,r21,16
1010c4a4:	84e2d83a 	srl	r17,r16,r19
1010c4a8:	e009883a 	mov	r4,fp
1010c4ac:	b00b883a 	mov	r5,r22
1010c4b0:	8a22b03a 	or	r17,r17,r8
1010c4b4:	3524983a 	sll	r18,r6,r20
1010c4b8:	0101bc80 	call	10101bc8 <__umodsi3>
1010c4bc:	e009883a 	mov	r4,fp
1010c4c0:	b00b883a 	mov	r5,r22
1010c4c4:	102f883a 	mov	r23,r2
1010c4c8:	0101b640 	call	10101b64 <__udivsi3>
1010c4cc:	100d883a 	mov	r6,r2
1010c4d0:	b808943a 	slli	r4,r23,16
1010c4d4:	aa3fffcc 	andi	r8,r21,65535
1010c4d8:	8804d43a 	srli	r2,r17,16
1010c4dc:	41af383a 	mul	r23,r8,r6
1010c4e0:	8520983a 	sll	r16,r16,r20
1010c4e4:	1104b03a 	or	r2,r2,r4
1010c4e8:	15c0042e 	bgeu	r2,r23,1010c4fc <__umoddi3+0x33c>
1010c4ec:	1545883a 	add	r2,r2,r21
1010c4f0:	30ffffc4 	addi	r3,r6,-1
1010c4f4:	1540742e 	bgeu	r2,r21,1010c6c8 <__umoddi3+0x508>
1010c4f8:	180d883a 	mov	r6,r3
1010c4fc:	15efc83a 	sub	r23,r2,r23
1010c500:	b00b883a 	mov	r5,r22
1010c504:	b809883a 	mov	r4,r23
1010c508:	d9800115 	stw	r6,4(sp)
1010c50c:	da000015 	stw	r8,0(sp)
1010c510:	0101bc80 	call	10101bc8 <__umodsi3>
1010c514:	b00b883a 	mov	r5,r22
1010c518:	b809883a 	mov	r4,r23
1010c51c:	1039883a 	mov	fp,r2
1010c520:	0101b640 	call	10101b64 <__udivsi3>
1010c524:	da000017 	ldw	r8,0(sp)
1010c528:	e038943a 	slli	fp,fp,16
1010c52c:	100b883a 	mov	r5,r2
1010c530:	4089383a 	mul	r4,r8,r2
1010c534:	8a3fffcc 	andi	r8,r17,65535
1010c538:	4710b03a 	or	r8,r8,fp
1010c53c:	d9800117 	ldw	r6,4(sp)
1010c540:	4100042e 	bgeu	r8,r4,1010c554 <__umoddi3+0x394>
1010c544:	4551883a 	add	r8,r8,r21
1010c548:	10bfffc4 	addi	r2,r2,-1
1010c54c:	45405a2e 	bgeu	r8,r21,1010c6b8 <__umoddi3+0x4f8>
1010c550:	100b883a 	mov	r5,r2
1010c554:	300c943a 	slli	r6,r6,16
1010c558:	91ffffcc 	andi	r7,r18,65535
1010c55c:	9004d43a 	srli	r2,r18,16
1010c560:	314cb03a 	or	r6,r6,r5
1010c564:	317fffcc 	andi	r5,r6,65535
1010c568:	300cd43a 	srli	r6,r6,16
1010c56c:	29d3383a 	mul	r9,r5,r7
1010c570:	288b383a 	mul	r5,r5,r2
1010c574:	31cf383a 	mul	r7,r6,r7
1010c578:	4806d43a 	srli	r3,r9,16
1010c57c:	4111c83a 	sub	r8,r8,r4
1010c580:	29cb883a 	add	r5,r5,r7
1010c584:	194b883a 	add	r5,r3,r5
1010c588:	3085383a 	mul	r2,r6,r2
1010c58c:	29c0022e 	bgeu	r5,r7,1010c598 <__umoddi3+0x3d8>
1010c590:	00c00074 	movhi	r3,1
1010c594:	10c5883a 	add	r2,r2,r3
1010c598:	2808d43a 	srli	r4,r5,16
1010c59c:	280a943a 	slli	r5,r5,16
1010c5a0:	4a7fffcc 	andi	r9,r9,65535
1010c5a4:	2085883a 	add	r2,r4,r2
1010c5a8:	2a4b883a 	add	r5,r5,r9
1010c5ac:	40803636 	bltu	r8,r2,1010c688 <__umoddi3+0x4c8>
1010c5b0:	40804d26 	beq	r8,r2,1010c6e8 <__umoddi3+0x528>
1010c5b4:	4089c83a 	sub	r4,r8,r2
1010c5b8:	280f883a 	mov	r7,r5
1010c5bc:	81cfc83a 	sub	r7,r16,r7
1010c5c0:	81c7803a 	cmpltu	r3,r16,r7
1010c5c4:	20c7c83a 	sub	r3,r4,r3
1010c5c8:	1cc4983a 	sll	r2,r3,r19
1010c5cc:	3d0ed83a 	srl	r7,r7,r20
1010c5d0:	1d06d83a 	srl	r3,r3,r20
1010c5d4:	11c4b03a 	or	r2,r2,r7
1010c5d8:	003f9306 	br	1010c428 <__alt_data_end+0xfffec428>
1010c5dc:	9ca6983a 	sll	r19,r19,r18
1010c5e0:	88e8d83a 	srl	r20,r17,r3
1010c5e4:	80c4d83a 	srl	r2,r16,r3
1010c5e8:	982cd43a 	srli	r22,r19,16
1010c5ec:	8ca2983a 	sll	r17,r17,r18
1010c5f0:	a009883a 	mov	r4,r20
1010c5f4:	b00b883a 	mov	r5,r22
1010c5f8:	1478b03a 	or	fp,r2,r17
1010c5fc:	0101bc80 	call	10101bc8 <__umodsi3>
1010c600:	a009883a 	mov	r4,r20
1010c604:	b00b883a 	mov	r5,r22
1010c608:	1023883a 	mov	r17,r2
1010c60c:	0101b640 	call	10101b64 <__udivsi3>
1010c610:	9d7fffcc 	andi	r21,r19,65535
1010c614:	880a943a 	slli	r5,r17,16
1010c618:	e008d43a 	srli	r4,fp,16
1010c61c:	a885383a 	mul	r2,r21,r2
1010c620:	84a8983a 	sll	r20,r16,r18
1010c624:	2148b03a 	or	r4,r4,r5
1010c628:	2080042e 	bgeu	r4,r2,1010c63c <__umoddi3+0x47c>
1010c62c:	24c9883a 	add	r4,r4,r19
1010c630:	24c00236 	bltu	r4,r19,1010c63c <__umoddi3+0x47c>
1010c634:	2080012e 	bgeu	r4,r2,1010c63c <__umoddi3+0x47c>
1010c638:	24c9883a 	add	r4,r4,r19
1010c63c:	20a3c83a 	sub	r17,r4,r2
1010c640:	b00b883a 	mov	r5,r22
1010c644:	8809883a 	mov	r4,r17
1010c648:	0101bc80 	call	10101bc8 <__umodsi3>
1010c64c:	102f883a 	mov	r23,r2
1010c650:	8809883a 	mov	r4,r17
1010c654:	b00b883a 	mov	r5,r22
1010c658:	0101b640 	call	10101b64 <__udivsi3>
1010c65c:	b82e943a 	slli	r23,r23,16
1010c660:	a885383a 	mul	r2,r21,r2
1010c664:	e13fffcc 	andi	r4,fp,65535
1010c668:	25c8b03a 	or	r4,r4,r23
1010c66c:	2080042e 	bgeu	r4,r2,1010c680 <__umoddi3+0x4c0>
1010c670:	24c9883a 	add	r4,r4,r19
1010c674:	24c00236 	bltu	r4,r19,1010c680 <__umoddi3+0x4c0>
1010c678:	2080012e 	bgeu	r4,r2,1010c680 <__umoddi3+0x4c0>
1010c67c:	24c9883a 	add	r4,r4,r19
1010c680:	20a3c83a 	sub	r17,r4,r2
1010c684:	003f4806 	br	1010c3a8 <__alt_data_end+0xfffec3a8>
1010c688:	2c8fc83a 	sub	r7,r5,r18
1010c68c:	1545c83a 	sub	r2,r2,r21
1010c690:	29cb803a 	cmpltu	r5,r5,r7
1010c694:	1145c83a 	sub	r2,r2,r5
1010c698:	4089c83a 	sub	r4,r8,r2
1010c69c:	003fc706 	br	1010c5bc <__alt_data_end+0xfffec5bc>
1010c6a0:	01000604 	movi	r4,24
1010c6a4:	003f1806 	br	1010c308 <__alt_data_end+0xfffec308>
1010c6a8:	00800604 	movi	r2,24
1010c6ac:	003f3206 	br	1010c378 <__alt_data_end+0xfffec378>
1010c6b0:	01000604 	movi	r4,24
1010c6b4:	003ed906 	br	1010c21c <__alt_data_end+0xfffec21c>
1010c6b8:	413fa52e 	bgeu	r8,r4,1010c550 <__alt_data_end+0xfffec550>
1010c6bc:	297fff84 	addi	r5,r5,-2
1010c6c0:	4551883a 	add	r8,r8,r21
1010c6c4:	003fa306 	br	1010c554 <__alt_data_end+0xfffec554>
1010c6c8:	15ff8b2e 	bgeu	r2,r23,1010c4f8 <__alt_data_end+0xfffec4f8>
1010c6cc:	31bfff84 	addi	r6,r6,-2
1010c6d0:	1545883a 	add	r2,r2,r21
1010c6d4:	003f8906 	br	1010c4fc <__alt_data_end+0xfffec4fc>
1010c6d8:	24c9883a 	add	r4,r4,r19
1010c6dc:	003eee06 	br	1010c298 <__alt_data_end+0xfffec298>
1010c6e0:	8005883a 	mov	r2,r16
1010c6e4:	003f1706 	br	1010c344 <__alt_data_end+0xfffec344>
1010c6e8:	817fe736 	bltu	r16,r5,1010c688 <__alt_data_end+0xfffec688>
1010c6ec:	280f883a 	mov	r7,r5
1010c6f0:	0009883a 	mov	r4,zero
1010c6f4:	003fb106 	br	1010c5bc <__alt_data_end+0xfffec5bc>

1010c6f8 <__adddf3>:
1010c6f8:	02c00434 	movhi	r11,16
1010c6fc:	5affffc4 	addi	r11,r11,-1
1010c700:	2806d7fa 	srli	r3,r5,31
1010c704:	2ad4703a 	and	r10,r5,r11
1010c708:	3ad2703a 	and	r9,r7,r11
1010c70c:	3804d53a 	srli	r2,r7,20
1010c710:	3018d77a 	srli	r12,r6,29
1010c714:	280ad53a 	srli	r5,r5,20
1010c718:	501490fa 	slli	r10,r10,3
1010c71c:	2010d77a 	srli	r8,r4,29
1010c720:	481290fa 	slli	r9,r9,3
1010c724:	380ed7fa 	srli	r7,r7,31
1010c728:	defffb04 	addi	sp,sp,-20
1010c72c:	dc800215 	stw	r18,8(sp)
1010c730:	dc400115 	stw	r17,4(sp)
1010c734:	dc000015 	stw	r16,0(sp)
1010c738:	dfc00415 	stw	ra,16(sp)
1010c73c:	dcc00315 	stw	r19,12(sp)
1010c740:	1c803fcc 	andi	r18,r3,255
1010c744:	2c01ffcc 	andi	r16,r5,2047
1010c748:	5210b03a 	or	r8,r10,r8
1010c74c:	202290fa 	slli	r17,r4,3
1010c750:	1081ffcc 	andi	r2,r2,2047
1010c754:	4b12b03a 	or	r9,r9,r12
1010c758:	300c90fa 	slli	r6,r6,3
1010c75c:	91c07526 	beq	r18,r7,1010c934 <__adddf3+0x23c>
1010c760:	8087c83a 	sub	r3,r16,r2
1010c764:	00c0ab0e 	bge	zero,r3,1010ca14 <__adddf3+0x31c>
1010c768:	10002a1e 	bne	r2,zero,1010c814 <__adddf3+0x11c>
1010c76c:	4984b03a 	or	r2,r9,r6
1010c770:	1000961e 	bne	r2,zero,1010c9cc <__adddf3+0x2d4>
1010c774:	888001cc 	andi	r2,r17,7
1010c778:	10000726 	beq	r2,zero,1010c798 <__adddf3+0xa0>
1010c77c:	888003cc 	andi	r2,r17,15
1010c780:	00c00104 	movi	r3,4
1010c784:	10c00426 	beq	r2,r3,1010c798 <__adddf3+0xa0>
1010c788:	88c7883a 	add	r3,r17,r3
1010c78c:	1c63803a 	cmpltu	r17,r3,r17
1010c790:	4451883a 	add	r8,r8,r17
1010c794:	1823883a 	mov	r17,r3
1010c798:	4080202c 	andhi	r2,r8,128
1010c79c:	10005926 	beq	r2,zero,1010c904 <__adddf3+0x20c>
1010c7a0:	84000044 	addi	r16,r16,1
1010c7a4:	0081ffc4 	movi	r2,2047
1010c7a8:	8080ba26 	beq	r16,r2,1010ca94 <__adddf3+0x39c>
1010c7ac:	00bfe034 	movhi	r2,65408
1010c7b0:	10bfffc4 	addi	r2,r2,-1
1010c7b4:	4090703a 	and	r8,r8,r2
1010c7b8:	4004977a 	slli	r2,r8,29
1010c7bc:	4010927a 	slli	r8,r8,9
1010c7c0:	8822d0fa 	srli	r17,r17,3
1010c7c4:	8401ffcc 	andi	r16,r16,2047
1010c7c8:	4010d33a 	srli	r8,r8,12
1010c7cc:	9007883a 	mov	r3,r18
1010c7d0:	1444b03a 	or	r2,r2,r17
1010c7d4:	8401ffcc 	andi	r16,r16,2047
1010c7d8:	8020953a 	slli	r16,r16,20
1010c7dc:	18c03fcc 	andi	r3,r3,255
1010c7e0:	01000434 	movhi	r4,16
1010c7e4:	213fffc4 	addi	r4,r4,-1
1010c7e8:	180697fa 	slli	r3,r3,31
1010c7ec:	4110703a 	and	r8,r8,r4
1010c7f0:	4410b03a 	or	r8,r8,r16
1010c7f4:	40c6b03a 	or	r3,r8,r3
1010c7f8:	dfc00417 	ldw	ra,16(sp)
1010c7fc:	dcc00317 	ldw	r19,12(sp)
1010c800:	dc800217 	ldw	r18,8(sp)
1010c804:	dc400117 	ldw	r17,4(sp)
1010c808:	dc000017 	ldw	r16,0(sp)
1010c80c:	dec00504 	addi	sp,sp,20
1010c810:	f800283a 	ret
1010c814:	0081ffc4 	movi	r2,2047
1010c818:	80bfd626 	beq	r16,r2,1010c774 <__alt_data_end+0xfffec774>
1010c81c:	4a402034 	orhi	r9,r9,128
1010c820:	00800e04 	movi	r2,56
1010c824:	10c09f16 	blt	r2,r3,1010caa4 <__adddf3+0x3ac>
1010c828:	008007c4 	movi	r2,31
1010c82c:	10c0c216 	blt	r2,r3,1010cb38 <__adddf3+0x440>
1010c830:	00800804 	movi	r2,32
1010c834:	10c5c83a 	sub	r2,r2,r3
1010c838:	488a983a 	sll	r5,r9,r2
1010c83c:	30c8d83a 	srl	r4,r6,r3
1010c840:	3084983a 	sll	r2,r6,r2
1010c844:	48c6d83a 	srl	r3,r9,r3
1010c848:	290cb03a 	or	r6,r5,r4
1010c84c:	1004c03a 	cmpne	r2,r2,zero
1010c850:	308cb03a 	or	r6,r6,r2
1010c854:	898dc83a 	sub	r6,r17,r6
1010c858:	89a3803a 	cmpltu	r17,r17,r6
1010c85c:	40d1c83a 	sub	r8,r8,r3
1010c860:	4451c83a 	sub	r8,r8,r17
1010c864:	3023883a 	mov	r17,r6
1010c868:	4080202c 	andhi	r2,r8,128
1010c86c:	10002326 	beq	r2,zero,1010c8fc <__adddf3+0x204>
1010c870:	04c02034 	movhi	r19,128
1010c874:	9cffffc4 	addi	r19,r19,-1
1010c878:	44e6703a 	and	r19,r8,r19
1010c87c:	98007626 	beq	r19,zero,1010ca58 <__adddf3+0x360>
1010c880:	9809883a 	mov	r4,r19
1010c884:	010ecfc0 	call	1010ecfc <__clzsi2>
1010c888:	10fffe04 	addi	r3,r2,-8
1010c88c:	010007c4 	movi	r4,31
1010c890:	20c07716 	blt	r4,r3,1010ca70 <__adddf3+0x378>
1010c894:	00800804 	movi	r2,32
1010c898:	10c5c83a 	sub	r2,r2,r3
1010c89c:	8884d83a 	srl	r2,r17,r2
1010c8a0:	98d0983a 	sll	r8,r19,r3
1010c8a4:	88e2983a 	sll	r17,r17,r3
1010c8a8:	1204b03a 	or	r2,r2,r8
1010c8ac:	1c007416 	blt	r3,r16,1010ca80 <__adddf3+0x388>
1010c8b0:	1c21c83a 	sub	r16,r3,r16
1010c8b4:	82000044 	addi	r8,r16,1
1010c8b8:	00c007c4 	movi	r3,31
1010c8bc:	1a009116 	blt	r3,r8,1010cb04 <__adddf3+0x40c>
1010c8c0:	00c00804 	movi	r3,32
1010c8c4:	1a07c83a 	sub	r3,r3,r8
1010c8c8:	8a08d83a 	srl	r4,r17,r8
1010c8cc:	88e2983a 	sll	r17,r17,r3
1010c8d0:	10c6983a 	sll	r3,r2,r3
1010c8d4:	1210d83a 	srl	r8,r2,r8
1010c8d8:	8804c03a 	cmpne	r2,r17,zero
1010c8dc:	1906b03a 	or	r3,r3,r4
1010c8e0:	18a2b03a 	or	r17,r3,r2
1010c8e4:	0021883a 	mov	r16,zero
1010c8e8:	003fa206 	br	1010c774 <__alt_data_end+0xfffec774>
1010c8ec:	1890b03a 	or	r8,r3,r2
1010c8f0:	40017d26 	beq	r8,zero,1010cee8 <__adddf3+0x7f0>
1010c8f4:	1011883a 	mov	r8,r2
1010c8f8:	1823883a 	mov	r17,r3
1010c8fc:	888001cc 	andi	r2,r17,7
1010c900:	103f9e1e 	bne	r2,zero,1010c77c <__alt_data_end+0xfffec77c>
1010c904:	4004977a 	slli	r2,r8,29
1010c908:	8822d0fa 	srli	r17,r17,3
1010c90c:	4010d0fa 	srli	r8,r8,3
1010c910:	9007883a 	mov	r3,r18
1010c914:	1444b03a 	or	r2,r2,r17
1010c918:	0101ffc4 	movi	r4,2047
1010c91c:	81002426 	beq	r16,r4,1010c9b0 <__adddf3+0x2b8>
1010c920:	8120703a 	and	r16,r16,r4
1010c924:	01000434 	movhi	r4,16
1010c928:	213fffc4 	addi	r4,r4,-1
1010c92c:	4110703a 	and	r8,r8,r4
1010c930:	003fa806 	br	1010c7d4 <__alt_data_end+0xfffec7d4>
1010c934:	8089c83a 	sub	r4,r16,r2
1010c938:	01005e0e 	bge	zero,r4,1010cab4 <__adddf3+0x3bc>
1010c93c:	10002b26 	beq	r2,zero,1010c9ec <__adddf3+0x2f4>
1010c940:	0081ffc4 	movi	r2,2047
1010c944:	80bf8b26 	beq	r16,r2,1010c774 <__alt_data_end+0xfffec774>
1010c948:	4a402034 	orhi	r9,r9,128
1010c94c:	00800e04 	movi	r2,56
1010c950:	1100a40e 	bge	r2,r4,1010cbe4 <__adddf3+0x4ec>
1010c954:	498cb03a 	or	r6,r9,r6
1010c958:	300ac03a 	cmpne	r5,r6,zero
1010c95c:	0013883a 	mov	r9,zero
1010c960:	2c4b883a 	add	r5,r5,r17
1010c964:	2c63803a 	cmpltu	r17,r5,r17
1010c968:	4a11883a 	add	r8,r9,r8
1010c96c:	8a11883a 	add	r8,r17,r8
1010c970:	2823883a 	mov	r17,r5
1010c974:	4080202c 	andhi	r2,r8,128
1010c978:	103fe026 	beq	r2,zero,1010c8fc <__alt_data_end+0xfffec8fc>
1010c97c:	84000044 	addi	r16,r16,1
1010c980:	0081ffc4 	movi	r2,2047
1010c984:	8080d226 	beq	r16,r2,1010ccd0 <__adddf3+0x5d8>
1010c988:	00bfe034 	movhi	r2,65408
1010c98c:	10bfffc4 	addi	r2,r2,-1
1010c990:	4090703a 	and	r8,r8,r2
1010c994:	880ad07a 	srli	r5,r17,1
1010c998:	400897fa 	slli	r4,r8,31
1010c99c:	88c0004c 	andi	r3,r17,1
1010c9a0:	28e2b03a 	or	r17,r5,r3
1010c9a4:	4010d07a 	srli	r8,r8,1
1010c9a8:	2462b03a 	or	r17,r4,r17
1010c9ac:	003f7106 	br	1010c774 <__alt_data_end+0xfffec774>
1010c9b0:	4088b03a 	or	r4,r8,r2
1010c9b4:	20014526 	beq	r4,zero,1010cecc <__adddf3+0x7d4>
1010c9b8:	01000434 	movhi	r4,16
1010c9bc:	42000234 	orhi	r8,r8,8
1010c9c0:	213fffc4 	addi	r4,r4,-1
1010c9c4:	4110703a 	and	r8,r8,r4
1010c9c8:	003f8206 	br	1010c7d4 <__alt_data_end+0xfffec7d4>
1010c9cc:	18ffffc4 	addi	r3,r3,-1
1010c9d0:	1800491e 	bne	r3,zero,1010caf8 <__adddf3+0x400>
1010c9d4:	898bc83a 	sub	r5,r17,r6
1010c9d8:	8963803a 	cmpltu	r17,r17,r5
1010c9dc:	4251c83a 	sub	r8,r8,r9
1010c9e0:	4451c83a 	sub	r8,r8,r17
1010c9e4:	2823883a 	mov	r17,r5
1010c9e8:	003f9f06 	br	1010c868 <__alt_data_end+0xfffec868>
1010c9ec:	4984b03a 	or	r2,r9,r6
1010c9f0:	103f6026 	beq	r2,zero,1010c774 <__alt_data_end+0xfffec774>
1010c9f4:	213fffc4 	addi	r4,r4,-1
1010c9f8:	2000931e 	bne	r4,zero,1010cc48 <__adddf3+0x550>
1010c9fc:	898d883a 	add	r6,r17,r6
1010ca00:	3463803a 	cmpltu	r17,r6,r17
1010ca04:	4251883a 	add	r8,r8,r9
1010ca08:	8a11883a 	add	r8,r17,r8
1010ca0c:	3023883a 	mov	r17,r6
1010ca10:	003fd806 	br	1010c974 <__alt_data_end+0xfffec974>
1010ca14:	1800541e 	bne	r3,zero,1010cb68 <__adddf3+0x470>
1010ca18:	80800044 	addi	r2,r16,1
1010ca1c:	1081ffcc 	andi	r2,r2,2047
1010ca20:	00c00044 	movi	r3,1
1010ca24:	1880a00e 	bge	r3,r2,1010cca8 <__adddf3+0x5b0>
1010ca28:	8989c83a 	sub	r4,r17,r6
1010ca2c:	8905803a 	cmpltu	r2,r17,r4
1010ca30:	4267c83a 	sub	r19,r8,r9
1010ca34:	98a7c83a 	sub	r19,r19,r2
1010ca38:	9880202c 	andhi	r2,r19,128
1010ca3c:	10006326 	beq	r2,zero,1010cbcc <__adddf3+0x4d4>
1010ca40:	3463c83a 	sub	r17,r6,r17
1010ca44:	4a07c83a 	sub	r3,r9,r8
1010ca48:	344d803a 	cmpltu	r6,r6,r17
1010ca4c:	19a7c83a 	sub	r19,r3,r6
1010ca50:	3825883a 	mov	r18,r7
1010ca54:	983f8a1e 	bne	r19,zero,1010c880 <__alt_data_end+0xfffec880>
1010ca58:	8809883a 	mov	r4,r17
1010ca5c:	010ecfc0 	call	1010ecfc <__clzsi2>
1010ca60:	10800804 	addi	r2,r2,32
1010ca64:	10fffe04 	addi	r3,r2,-8
1010ca68:	010007c4 	movi	r4,31
1010ca6c:	20ff890e 	bge	r4,r3,1010c894 <__alt_data_end+0xfffec894>
1010ca70:	10bff604 	addi	r2,r2,-40
1010ca74:	8884983a 	sll	r2,r17,r2
1010ca78:	0023883a 	mov	r17,zero
1010ca7c:	1c3f8c0e 	bge	r3,r16,1010c8b0 <__alt_data_end+0xfffec8b0>
1010ca80:	023fe034 	movhi	r8,65408
1010ca84:	423fffc4 	addi	r8,r8,-1
1010ca88:	80e1c83a 	sub	r16,r16,r3
1010ca8c:	1210703a 	and	r8,r2,r8
1010ca90:	003f3806 	br	1010c774 <__alt_data_end+0xfffec774>
1010ca94:	9007883a 	mov	r3,r18
1010ca98:	0011883a 	mov	r8,zero
1010ca9c:	0005883a 	mov	r2,zero
1010caa0:	003f4c06 	br	1010c7d4 <__alt_data_end+0xfffec7d4>
1010caa4:	498cb03a 	or	r6,r9,r6
1010caa8:	300cc03a 	cmpne	r6,r6,zero
1010caac:	0007883a 	mov	r3,zero
1010cab0:	003f6806 	br	1010c854 <__alt_data_end+0xfffec854>
1010cab4:	20009c1e 	bne	r4,zero,1010cd28 <__adddf3+0x630>
1010cab8:	80800044 	addi	r2,r16,1
1010cabc:	1141ffcc 	andi	r5,r2,2047
1010cac0:	01000044 	movi	r4,1
1010cac4:	2140670e 	bge	r4,r5,1010cc64 <__adddf3+0x56c>
1010cac8:	0101ffc4 	movi	r4,2047
1010cacc:	11007f26 	beq	r2,r4,1010cccc <__adddf3+0x5d4>
1010cad0:	898d883a 	add	r6,r17,r6
1010cad4:	4247883a 	add	r3,r8,r9
1010cad8:	3451803a 	cmpltu	r8,r6,r17
1010cadc:	40d1883a 	add	r8,r8,r3
1010cae0:	402297fa 	slli	r17,r8,31
1010cae4:	300cd07a 	srli	r6,r6,1
1010cae8:	4010d07a 	srli	r8,r8,1
1010caec:	1021883a 	mov	r16,r2
1010caf0:	89a2b03a 	or	r17,r17,r6
1010caf4:	003f1f06 	br	1010c774 <__alt_data_end+0xfffec774>
1010caf8:	0081ffc4 	movi	r2,2047
1010cafc:	80bf481e 	bne	r16,r2,1010c820 <__alt_data_end+0xfffec820>
1010cb00:	003f1c06 	br	1010c774 <__alt_data_end+0xfffec774>
1010cb04:	843ff844 	addi	r16,r16,-31
1010cb08:	01000804 	movi	r4,32
1010cb0c:	1406d83a 	srl	r3,r2,r16
1010cb10:	41005026 	beq	r8,r4,1010cc54 <__adddf3+0x55c>
1010cb14:	01001004 	movi	r4,64
1010cb18:	2211c83a 	sub	r8,r4,r8
1010cb1c:	1204983a 	sll	r2,r2,r8
1010cb20:	88a2b03a 	or	r17,r17,r2
1010cb24:	8822c03a 	cmpne	r17,r17,zero
1010cb28:	1c62b03a 	or	r17,r3,r17
1010cb2c:	0011883a 	mov	r8,zero
1010cb30:	0021883a 	mov	r16,zero
1010cb34:	003f7106 	br	1010c8fc <__alt_data_end+0xfffec8fc>
1010cb38:	193ff804 	addi	r4,r3,-32
1010cb3c:	00800804 	movi	r2,32
1010cb40:	4908d83a 	srl	r4,r9,r4
1010cb44:	18804526 	beq	r3,r2,1010cc5c <__adddf3+0x564>
1010cb48:	00801004 	movi	r2,64
1010cb4c:	10c5c83a 	sub	r2,r2,r3
1010cb50:	4886983a 	sll	r3,r9,r2
1010cb54:	198cb03a 	or	r6,r3,r6
1010cb58:	300cc03a 	cmpne	r6,r6,zero
1010cb5c:	218cb03a 	or	r6,r4,r6
1010cb60:	0007883a 	mov	r3,zero
1010cb64:	003f3b06 	br	1010c854 <__alt_data_end+0xfffec854>
1010cb68:	80002a26 	beq	r16,zero,1010cc14 <__adddf3+0x51c>
1010cb6c:	0101ffc4 	movi	r4,2047
1010cb70:	11006826 	beq	r2,r4,1010cd14 <__adddf3+0x61c>
1010cb74:	00c7c83a 	sub	r3,zero,r3
1010cb78:	42002034 	orhi	r8,r8,128
1010cb7c:	01000e04 	movi	r4,56
1010cb80:	20c07c16 	blt	r4,r3,1010cd74 <__adddf3+0x67c>
1010cb84:	010007c4 	movi	r4,31
1010cb88:	20c0da16 	blt	r4,r3,1010cef4 <__adddf3+0x7fc>
1010cb8c:	01000804 	movi	r4,32
1010cb90:	20c9c83a 	sub	r4,r4,r3
1010cb94:	4114983a 	sll	r10,r8,r4
1010cb98:	88cad83a 	srl	r5,r17,r3
1010cb9c:	8908983a 	sll	r4,r17,r4
1010cba0:	40c6d83a 	srl	r3,r8,r3
1010cba4:	5162b03a 	or	r17,r10,r5
1010cba8:	2008c03a 	cmpne	r4,r4,zero
1010cbac:	8922b03a 	or	r17,r17,r4
1010cbb0:	3463c83a 	sub	r17,r6,r17
1010cbb4:	48c7c83a 	sub	r3,r9,r3
1010cbb8:	344d803a 	cmpltu	r6,r6,r17
1010cbbc:	1991c83a 	sub	r8,r3,r6
1010cbc0:	1021883a 	mov	r16,r2
1010cbc4:	3825883a 	mov	r18,r7
1010cbc8:	003f2706 	br	1010c868 <__alt_data_end+0xfffec868>
1010cbcc:	24d0b03a 	or	r8,r4,r19
1010cbd0:	40001b1e 	bne	r8,zero,1010cc40 <__adddf3+0x548>
1010cbd4:	0005883a 	mov	r2,zero
1010cbd8:	0007883a 	mov	r3,zero
1010cbdc:	0021883a 	mov	r16,zero
1010cbe0:	003f4d06 	br	1010c918 <__alt_data_end+0xfffec918>
1010cbe4:	008007c4 	movi	r2,31
1010cbe8:	11003c16 	blt	r2,r4,1010ccdc <__adddf3+0x5e4>
1010cbec:	00800804 	movi	r2,32
1010cbf0:	1105c83a 	sub	r2,r2,r4
1010cbf4:	488e983a 	sll	r7,r9,r2
1010cbf8:	310ad83a 	srl	r5,r6,r4
1010cbfc:	3084983a 	sll	r2,r6,r2
1010cc00:	4912d83a 	srl	r9,r9,r4
1010cc04:	394ab03a 	or	r5,r7,r5
1010cc08:	1004c03a 	cmpne	r2,r2,zero
1010cc0c:	288ab03a 	or	r5,r5,r2
1010cc10:	003f5306 	br	1010c960 <__alt_data_end+0xfffec960>
1010cc14:	4448b03a 	or	r4,r8,r17
1010cc18:	20003e26 	beq	r4,zero,1010cd14 <__adddf3+0x61c>
1010cc1c:	00c6303a 	nor	r3,zero,r3
1010cc20:	18003a1e 	bne	r3,zero,1010cd0c <__adddf3+0x614>
1010cc24:	3463c83a 	sub	r17,r6,r17
1010cc28:	4a07c83a 	sub	r3,r9,r8
1010cc2c:	344d803a 	cmpltu	r6,r6,r17
1010cc30:	1991c83a 	sub	r8,r3,r6
1010cc34:	1021883a 	mov	r16,r2
1010cc38:	3825883a 	mov	r18,r7
1010cc3c:	003f0a06 	br	1010c868 <__alt_data_end+0xfffec868>
1010cc40:	2023883a 	mov	r17,r4
1010cc44:	003f0d06 	br	1010c87c <__alt_data_end+0xfffec87c>
1010cc48:	0081ffc4 	movi	r2,2047
1010cc4c:	80bf3f1e 	bne	r16,r2,1010c94c <__alt_data_end+0xfffec94c>
1010cc50:	003ec806 	br	1010c774 <__alt_data_end+0xfffec774>
1010cc54:	0005883a 	mov	r2,zero
1010cc58:	003fb106 	br	1010cb20 <__alt_data_end+0xfffecb20>
1010cc5c:	0007883a 	mov	r3,zero
1010cc60:	003fbc06 	br	1010cb54 <__alt_data_end+0xfffecb54>
1010cc64:	4444b03a 	or	r2,r8,r17
1010cc68:	8000871e 	bne	r16,zero,1010ce88 <__adddf3+0x790>
1010cc6c:	1000ba26 	beq	r2,zero,1010cf58 <__adddf3+0x860>
1010cc70:	4984b03a 	or	r2,r9,r6
1010cc74:	103ebf26 	beq	r2,zero,1010c774 <__alt_data_end+0xfffec774>
1010cc78:	8985883a 	add	r2,r17,r6
1010cc7c:	4247883a 	add	r3,r8,r9
1010cc80:	1451803a 	cmpltu	r8,r2,r17
1010cc84:	40d1883a 	add	r8,r8,r3
1010cc88:	40c0202c 	andhi	r3,r8,128
1010cc8c:	1023883a 	mov	r17,r2
1010cc90:	183f1a26 	beq	r3,zero,1010c8fc <__alt_data_end+0xfffec8fc>
1010cc94:	00bfe034 	movhi	r2,65408
1010cc98:	10bfffc4 	addi	r2,r2,-1
1010cc9c:	2021883a 	mov	r16,r4
1010cca0:	4090703a 	and	r8,r8,r2
1010cca4:	003eb306 	br	1010c774 <__alt_data_end+0xfffec774>
1010cca8:	4444b03a 	or	r2,r8,r17
1010ccac:	8000291e 	bne	r16,zero,1010cd54 <__adddf3+0x65c>
1010ccb0:	10004b1e 	bne	r2,zero,1010cde0 <__adddf3+0x6e8>
1010ccb4:	4990b03a 	or	r8,r9,r6
1010ccb8:	40008b26 	beq	r8,zero,1010cee8 <__adddf3+0x7f0>
1010ccbc:	4811883a 	mov	r8,r9
1010ccc0:	3023883a 	mov	r17,r6
1010ccc4:	3825883a 	mov	r18,r7
1010ccc8:	003eaa06 	br	1010c774 <__alt_data_end+0xfffec774>
1010cccc:	1021883a 	mov	r16,r2
1010ccd0:	0011883a 	mov	r8,zero
1010ccd4:	0005883a 	mov	r2,zero
1010ccd8:	003f0f06 	br	1010c918 <__alt_data_end+0xfffec918>
1010ccdc:	217ff804 	addi	r5,r4,-32
1010cce0:	00800804 	movi	r2,32
1010cce4:	494ad83a 	srl	r5,r9,r5
1010cce8:	20807d26 	beq	r4,r2,1010cee0 <__adddf3+0x7e8>
1010ccec:	00801004 	movi	r2,64
1010ccf0:	1109c83a 	sub	r4,r2,r4
1010ccf4:	4912983a 	sll	r9,r9,r4
1010ccf8:	498cb03a 	or	r6,r9,r6
1010ccfc:	300cc03a 	cmpne	r6,r6,zero
1010cd00:	298ab03a 	or	r5,r5,r6
1010cd04:	0013883a 	mov	r9,zero
1010cd08:	003f1506 	br	1010c960 <__alt_data_end+0xfffec960>
1010cd0c:	0101ffc4 	movi	r4,2047
1010cd10:	113f9a1e 	bne	r2,r4,1010cb7c <__alt_data_end+0xfffecb7c>
1010cd14:	4811883a 	mov	r8,r9
1010cd18:	3023883a 	mov	r17,r6
1010cd1c:	1021883a 	mov	r16,r2
1010cd20:	3825883a 	mov	r18,r7
1010cd24:	003e9306 	br	1010c774 <__alt_data_end+0xfffec774>
1010cd28:	8000161e 	bne	r16,zero,1010cd84 <__adddf3+0x68c>
1010cd2c:	444ab03a 	or	r5,r8,r17
1010cd30:	28005126 	beq	r5,zero,1010ce78 <__adddf3+0x780>
1010cd34:	0108303a 	nor	r4,zero,r4
1010cd38:	20004d1e 	bne	r4,zero,1010ce70 <__adddf3+0x778>
1010cd3c:	89a3883a 	add	r17,r17,r6
1010cd40:	4253883a 	add	r9,r8,r9
1010cd44:	898d803a 	cmpltu	r6,r17,r6
1010cd48:	3251883a 	add	r8,r6,r9
1010cd4c:	1021883a 	mov	r16,r2
1010cd50:	003f0806 	br	1010c974 <__alt_data_end+0xfffec974>
1010cd54:	1000301e 	bne	r2,zero,1010ce18 <__adddf3+0x720>
1010cd58:	4984b03a 	or	r2,r9,r6
1010cd5c:	10007126 	beq	r2,zero,1010cf24 <__adddf3+0x82c>
1010cd60:	4811883a 	mov	r8,r9
1010cd64:	3023883a 	mov	r17,r6
1010cd68:	3825883a 	mov	r18,r7
1010cd6c:	0401ffc4 	movi	r16,2047
1010cd70:	003e8006 	br	1010c774 <__alt_data_end+0xfffec774>
1010cd74:	4462b03a 	or	r17,r8,r17
1010cd78:	8822c03a 	cmpne	r17,r17,zero
1010cd7c:	0007883a 	mov	r3,zero
1010cd80:	003f8b06 	br	1010cbb0 <__alt_data_end+0xfffecbb0>
1010cd84:	0141ffc4 	movi	r5,2047
1010cd88:	11403b26 	beq	r2,r5,1010ce78 <__adddf3+0x780>
1010cd8c:	0109c83a 	sub	r4,zero,r4
1010cd90:	42002034 	orhi	r8,r8,128
1010cd94:	01400e04 	movi	r5,56
1010cd98:	29006716 	blt	r5,r4,1010cf38 <__adddf3+0x840>
1010cd9c:	014007c4 	movi	r5,31
1010cda0:	29007016 	blt	r5,r4,1010cf64 <__adddf3+0x86c>
1010cda4:	01400804 	movi	r5,32
1010cda8:	290bc83a 	sub	r5,r5,r4
1010cdac:	4154983a 	sll	r10,r8,r5
1010cdb0:	890ed83a 	srl	r7,r17,r4
1010cdb4:	894a983a 	sll	r5,r17,r5
1010cdb8:	4108d83a 	srl	r4,r8,r4
1010cdbc:	51e2b03a 	or	r17,r10,r7
1010cdc0:	280ac03a 	cmpne	r5,r5,zero
1010cdc4:	8962b03a 	or	r17,r17,r5
1010cdc8:	89a3883a 	add	r17,r17,r6
1010cdcc:	2253883a 	add	r9,r4,r9
1010cdd0:	898d803a 	cmpltu	r6,r17,r6
1010cdd4:	3251883a 	add	r8,r6,r9
1010cdd8:	1021883a 	mov	r16,r2
1010cddc:	003ee506 	br	1010c974 <__alt_data_end+0xfffec974>
1010cde0:	4984b03a 	or	r2,r9,r6
1010cde4:	103e6326 	beq	r2,zero,1010c774 <__alt_data_end+0xfffec774>
1010cde8:	8987c83a 	sub	r3,r17,r6
1010cdec:	88c9803a 	cmpltu	r4,r17,r3
1010cdf0:	4245c83a 	sub	r2,r8,r9
1010cdf4:	1105c83a 	sub	r2,r2,r4
1010cdf8:	1100202c 	andhi	r4,r2,128
1010cdfc:	203ebb26 	beq	r4,zero,1010c8ec <__alt_data_end+0xfffec8ec>
1010ce00:	3463c83a 	sub	r17,r6,r17
1010ce04:	4a07c83a 	sub	r3,r9,r8
1010ce08:	344d803a 	cmpltu	r6,r6,r17
1010ce0c:	1991c83a 	sub	r8,r3,r6
1010ce10:	3825883a 	mov	r18,r7
1010ce14:	003e5706 	br	1010c774 <__alt_data_end+0xfffec774>
1010ce18:	4984b03a 	or	r2,r9,r6
1010ce1c:	10002e26 	beq	r2,zero,1010ced8 <__adddf3+0x7e0>
1010ce20:	4004d0fa 	srli	r2,r8,3
1010ce24:	8822d0fa 	srli	r17,r17,3
1010ce28:	4010977a 	slli	r8,r8,29
1010ce2c:	10c0022c 	andhi	r3,r2,8
1010ce30:	4462b03a 	or	r17,r8,r17
1010ce34:	18000826 	beq	r3,zero,1010ce58 <__adddf3+0x760>
1010ce38:	4808d0fa 	srli	r4,r9,3
1010ce3c:	20c0022c 	andhi	r3,r4,8
1010ce40:	1800051e 	bne	r3,zero,1010ce58 <__adddf3+0x760>
1010ce44:	300cd0fa 	srli	r6,r6,3
1010ce48:	4806977a 	slli	r3,r9,29
1010ce4c:	2005883a 	mov	r2,r4
1010ce50:	3825883a 	mov	r18,r7
1010ce54:	19a2b03a 	or	r17,r3,r6
1010ce58:	8810d77a 	srli	r8,r17,29
1010ce5c:	100490fa 	slli	r2,r2,3
1010ce60:	882290fa 	slli	r17,r17,3
1010ce64:	0401ffc4 	movi	r16,2047
1010ce68:	4090b03a 	or	r8,r8,r2
1010ce6c:	003e4106 	br	1010c774 <__alt_data_end+0xfffec774>
1010ce70:	0141ffc4 	movi	r5,2047
1010ce74:	117fc71e 	bne	r2,r5,1010cd94 <__alt_data_end+0xfffecd94>
1010ce78:	4811883a 	mov	r8,r9
1010ce7c:	3023883a 	mov	r17,r6
1010ce80:	1021883a 	mov	r16,r2
1010ce84:	003e3b06 	br	1010c774 <__alt_data_end+0xfffec774>
1010ce88:	10002f26 	beq	r2,zero,1010cf48 <__adddf3+0x850>
1010ce8c:	4984b03a 	or	r2,r9,r6
1010ce90:	10001126 	beq	r2,zero,1010ced8 <__adddf3+0x7e0>
1010ce94:	4004d0fa 	srli	r2,r8,3
1010ce98:	8822d0fa 	srli	r17,r17,3
1010ce9c:	4010977a 	slli	r8,r8,29
1010cea0:	10c0022c 	andhi	r3,r2,8
1010cea4:	4462b03a 	or	r17,r8,r17
1010cea8:	183feb26 	beq	r3,zero,1010ce58 <__alt_data_end+0xfffece58>
1010ceac:	4808d0fa 	srli	r4,r9,3
1010ceb0:	20c0022c 	andhi	r3,r4,8
1010ceb4:	183fe81e 	bne	r3,zero,1010ce58 <__alt_data_end+0xfffece58>
1010ceb8:	300cd0fa 	srli	r6,r6,3
1010cebc:	4806977a 	slli	r3,r9,29
1010cec0:	2005883a 	mov	r2,r4
1010cec4:	19a2b03a 	or	r17,r3,r6
1010cec8:	003fe306 	br	1010ce58 <__alt_data_end+0xfffece58>
1010cecc:	0011883a 	mov	r8,zero
1010ced0:	0005883a 	mov	r2,zero
1010ced4:	003e3f06 	br	1010c7d4 <__alt_data_end+0xfffec7d4>
1010ced8:	0401ffc4 	movi	r16,2047
1010cedc:	003e2506 	br	1010c774 <__alt_data_end+0xfffec774>
1010cee0:	0013883a 	mov	r9,zero
1010cee4:	003f8406 	br	1010ccf8 <__alt_data_end+0xfffeccf8>
1010cee8:	0005883a 	mov	r2,zero
1010ceec:	0007883a 	mov	r3,zero
1010cef0:	003e8906 	br	1010c918 <__alt_data_end+0xfffec918>
1010cef4:	197ff804 	addi	r5,r3,-32
1010cef8:	01000804 	movi	r4,32
1010cefc:	414ad83a 	srl	r5,r8,r5
1010cf00:	19002426 	beq	r3,r4,1010cf94 <__adddf3+0x89c>
1010cf04:	01001004 	movi	r4,64
1010cf08:	20c7c83a 	sub	r3,r4,r3
1010cf0c:	40c6983a 	sll	r3,r8,r3
1010cf10:	1c46b03a 	or	r3,r3,r17
1010cf14:	1806c03a 	cmpne	r3,r3,zero
1010cf18:	28e2b03a 	or	r17,r5,r3
1010cf1c:	0007883a 	mov	r3,zero
1010cf20:	003f2306 	br	1010cbb0 <__alt_data_end+0xfffecbb0>
1010cf24:	0007883a 	mov	r3,zero
1010cf28:	5811883a 	mov	r8,r11
1010cf2c:	00bfffc4 	movi	r2,-1
1010cf30:	0401ffc4 	movi	r16,2047
1010cf34:	003e7806 	br	1010c918 <__alt_data_end+0xfffec918>
1010cf38:	4462b03a 	or	r17,r8,r17
1010cf3c:	8822c03a 	cmpne	r17,r17,zero
1010cf40:	0009883a 	mov	r4,zero
1010cf44:	003fa006 	br	1010cdc8 <__alt_data_end+0xfffecdc8>
1010cf48:	4811883a 	mov	r8,r9
1010cf4c:	3023883a 	mov	r17,r6
1010cf50:	0401ffc4 	movi	r16,2047
1010cf54:	003e0706 	br	1010c774 <__alt_data_end+0xfffec774>
1010cf58:	4811883a 	mov	r8,r9
1010cf5c:	3023883a 	mov	r17,r6
1010cf60:	003e0406 	br	1010c774 <__alt_data_end+0xfffec774>
1010cf64:	21fff804 	addi	r7,r4,-32
1010cf68:	01400804 	movi	r5,32
1010cf6c:	41ced83a 	srl	r7,r8,r7
1010cf70:	21400a26 	beq	r4,r5,1010cf9c <__adddf3+0x8a4>
1010cf74:	01401004 	movi	r5,64
1010cf78:	2909c83a 	sub	r4,r5,r4
1010cf7c:	4108983a 	sll	r4,r8,r4
1010cf80:	2448b03a 	or	r4,r4,r17
1010cf84:	2008c03a 	cmpne	r4,r4,zero
1010cf88:	3922b03a 	or	r17,r7,r4
1010cf8c:	0009883a 	mov	r4,zero
1010cf90:	003f8d06 	br	1010cdc8 <__alt_data_end+0xfffecdc8>
1010cf94:	0007883a 	mov	r3,zero
1010cf98:	003fdd06 	br	1010cf10 <__alt_data_end+0xfffecf10>
1010cf9c:	0009883a 	mov	r4,zero
1010cfa0:	003ff706 	br	1010cf80 <__alt_data_end+0xfffecf80>

1010cfa4 <__divdf3>:
1010cfa4:	defff204 	addi	sp,sp,-56
1010cfa8:	dd400915 	stw	r21,36(sp)
1010cfac:	282ad53a 	srli	r21,r5,20
1010cfb0:	dd000815 	stw	r20,32(sp)
1010cfb4:	2828d7fa 	srli	r20,r5,31
1010cfb8:	dc000415 	stw	r16,16(sp)
1010cfbc:	04000434 	movhi	r16,16
1010cfc0:	df000c15 	stw	fp,48(sp)
1010cfc4:	843fffc4 	addi	r16,r16,-1
1010cfc8:	dfc00d15 	stw	ra,52(sp)
1010cfcc:	ddc00b15 	stw	r23,44(sp)
1010cfd0:	dd800a15 	stw	r22,40(sp)
1010cfd4:	dcc00715 	stw	r19,28(sp)
1010cfd8:	dc800615 	stw	r18,24(sp)
1010cfdc:	dc400515 	stw	r17,20(sp)
1010cfe0:	ad41ffcc 	andi	r21,r21,2047
1010cfe4:	2c20703a 	and	r16,r5,r16
1010cfe8:	a7003fcc 	andi	fp,r20,255
1010cfec:	a8006126 	beq	r21,zero,1010d174 <__divdf3+0x1d0>
1010cff0:	0081ffc4 	movi	r2,2047
1010cff4:	2025883a 	mov	r18,r4
1010cff8:	a8803726 	beq	r21,r2,1010d0d8 <__divdf3+0x134>
1010cffc:	80800434 	orhi	r2,r16,16
1010d000:	100490fa 	slli	r2,r2,3
1010d004:	2020d77a 	srli	r16,r4,29
1010d008:	202490fa 	slli	r18,r4,3
1010d00c:	ad7f0044 	addi	r21,r21,-1023
1010d010:	80a0b03a 	or	r16,r16,r2
1010d014:	0027883a 	mov	r19,zero
1010d018:	0013883a 	mov	r9,zero
1010d01c:	3804d53a 	srli	r2,r7,20
1010d020:	382cd7fa 	srli	r22,r7,31
1010d024:	04400434 	movhi	r17,16
1010d028:	8c7fffc4 	addi	r17,r17,-1
1010d02c:	1081ffcc 	andi	r2,r2,2047
1010d030:	3011883a 	mov	r8,r6
1010d034:	3c62703a 	and	r17,r7,r17
1010d038:	b5c03fcc 	andi	r23,r22,255
1010d03c:	10006c26 	beq	r2,zero,1010d1f0 <__divdf3+0x24c>
1010d040:	00c1ffc4 	movi	r3,2047
1010d044:	10c06426 	beq	r2,r3,1010d1d8 <__divdf3+0x234>
1010d048:	88c00434 	orhi	r3,r17,16
1010d04c:	180690fa 	slli	r3,r3,3
1010d050:	3022d77a 	srli	r17,r6,29
1010d054:	301090fa 	slli	r8,r6,3
1010d058:	10bf0044 	addi	r2,r2,-1023
1010d05c:	88e2b03a 	or	r17,r17,r3
1010d060:	000f883a 	mov	r7,zero
1010d064:	a58cf03a 	xor	r6,r20,r22
1010d068:	3cc8b03a 	or	r4,r7,r19
1010d06c:	a8abc83a 	sub	r21,r21,r2
1010d070:	008003c4 	movi	r2,15
1010d074:	3007883a 	mov	r3,r6
1010d078:	34c03fcc 	andi	r19,r6,255
1010d07c:	11009036 	bltu	r2,r4,1010d2c0 <__divdf3+0x31c>
1010d080:	200890ba 	slli	r4,r4,2
1010d084:	00840474 	movhi	r2,4113
1010d088:	10b42604 	addi	r2,r2,-12136
1010d08c:	2089883a 	add	r4,r4,r2
1010d090:	20800017 	ldw	r2,0(r4)
1010d094:	1000683a 	jmp	r2
1010d098:	1010d2c0 	call	11010d2c <__alt_data_end+0xef0d2c>
1010d09c:	1010d110 	cmplti	zero,r2,17220
1010d0a0:	1010d2b0 	cmpltui	zero,r2,17226
1010d0a4:	1010d104 	addi	zero,r2,17220
1010d0a8:	1010d2b0 	cmpltui	zero,r2,17226
1010d0ac:	1010d284 	addi	zero,r2,17226
1010d0b0:	1010d2b0 	cmpltui	zero,r2,17226
1010d0b4:	1010d104 	addi	zero,r2,17220
1010d0b8:	1010d110 	cmplti	zero,r2,17220
1010d0bc:	1010d110 	cmplti	zero,r2,17220
1010d0c0:	1010d284 	addi	zero,r2,17226
1010d0c4:	1010d104 	addi	zero,r2,17220
1010d0c8:	1010d0f4 	orhi	zero,r2,17219
1010d0cc:	1010d0f4 	orhi	zero,r2,17219
1010d0d0:	1010d0f4 	orhi	zero,r2,17219
1010d0d4:	1010d5a4 	muli	zero,r2,17238
1010d0d8:	2404b03a 	or	r2,r4,r16
1010d0dc:	1000661e 	bne	r2,zero,1010d278 <__divdf3+0x2d4>
1010d0e0:	04c00204 	movi	r19,8
1010d0e4:	0021883a 	mov	r16,zero
1010d0e8:	0025883a 	mov	r18,zero
1010d0ec:	02400084 	movi	r9,2
1010d0f0:	003fca06 	br	1010d01c <__alt_data_end+0xfffed01c>
1010d0f4:	8023883a 	mov	r17,r16
1010d0f8:	9011883a 	mov	r8,r18
1010d0fc:	e02f883a 	mov	r23,fp
1010d100:	480f883a 	mov	r7,r9
1010d104:	00800084 	movi	r2,2
1010d108:	3881311e 	bne	r7,r2,1010d5d0 <__divdf3+0x62c>
1010d10c:	b827883a 	mov	r19,r23
1010d110:	98c0004c 	andi	r3,r19,1
1010d114:	0081ffc4 	movi	r2,2047
1010d118:	000b883a 	mov	r5,zero
1010d11c:	0025883a 	mov	r18,zero
1010d120:	1004953a 	slli	r2,r2,20
1010d124:	18c03fcc 	andi	r3,r3,255
1010d128:	04400434 	movhi	r17,16
1010d12c:	8c7fffc4 	addi	r17,r17,-1
1010d130:	180697fa 	slli	r3,r3,31
1010d134:	2c4a703a 	and	r5,r5,r17
1010d138:	288ab03a 	or	r5,r5,r2
1010d13c:	28c6b03a 	or	r3,r5,r3
1010d140:	9005883a 	mov	r2,r18
1010d144:	dfc00d17 	ldw	ra,52(sp)
1010d148:	df000c17 	ldw	fp,48(sp)
1010d14c:	ddc00b17 	ldw	r23,44(sp)
1010d150:	dd800a17 	ldw	r22,40(sp)
1010d154:	dd400917 	ldw	r21,36(sp)
1010d158:	dd000817 	ldw	r20,32(sp)
1010d15c:	dcc00717 	ldw	r19,28(sp)
1010d160:	dc800617 	ldw	r18,24(sp)
1010d164:	dc400517 	ldw	r17,20(sp)
1010d168:	dc000417 	ldw	r16,16(sp)
1010d16c:	dec00e04 	addi	sp,sp,56
1010d170:	f800283a 	ret
1010d174:	2404b03a 	or	r2,r4,r16
1010d178:	2027883a 	mov	r19,r4
1010d17c:	10003926 	beq	r2,zero,1010d264 <__divdf3+0x2c0>
1010d180:	80012e26 	beq	r16,zero,1010d63c <__divdf3+0x698>
1010d184:	8009883a 	mov	r4,r16
1010d188:	d9800315 	stw	r6,12(sp)
1010d18c:	d9c00215 	stw	r7,8(sp)
1010d190:	010ecfc0 	call	1010ecfc <__clzsi2>
1010d194:	d9800317 	ldw	r6,12(sp)
1010d198:	d9c00217 	ldw	r7,8(sp)
1010d19c:	113ffd44 	addi	r4,r2,-11
1010d1a0:	00c00704 	movi	r3,28
1010d1a4:	19012116 	blt	r3,r4,1010d62c <__divdf3+0x688>
1010d1a8:	00c00744 	movi	r3,29
1010d1ac:	147ffe04 	addi	r17,r2,-8
1010d1b0:	1907c83a 	sub	r3,r3,r4
1010d1b4:	8460983a 	sll	r16,r16,r17
1010d1b8:	98c6d83a 	srl	r3,r19,r3
1010d1bc:	9c64983a 	sll	r18,r19,r17
1010d1c0:	1c20b03a 	or	r16,r3,r16
1010d1c4:	1080fcc4 	addi	r2,r2,1011
1010d1c8:	00abc83a 	sub	r21,zero,r2
1010d1cc:	0027883a 	mov	r19,zero
1010d1d0:	0013883a 	mov	r9,zero
1010d1d4:	003f9106 	br	1010d01c <__alt_data_end+0xfffed01c>
1010d1d8:	3446b03a 	or	r3,r6,r17
1010d1dc:	18001f1e 	bne	r3,zero,1010d25c <__divdf3+0x2b8>
1010d1e0:	0023883a 	mov	r17,zero
1010d1e4:	0011883a 	mov	r8,zero
1010d1e8:	01c00084 	movi	r7,2
1010d1ec:	003f9d06 	br	1010d064 <__alt_data_end+0xfffed064>
1010d1f0:	3446b03a 	or	r3,r6,r17
1010d1f4:	18001526 	beq	r3,zero,1010d24c <__divdf3+0x2a8>
1010d1f8:	88011b26 	beq	r17,zero,1010d668 <__divdf3+0x6c4>
1010d1fc:	8809883a 	mov	r4,r17
1010d200:	d9800315 	stw	r6,12(sp)
1010d204:	da400115 	stw	r9,4(sp)
1010d208:	010ecfc0 	call	1010ecfc <__clzsi2>
1010d20c:	d9800317 	ldw	r6,12(sp)
1010d210:	da400117 	ldw	r9,4(sp)
1010d214:	113ffd44 	addi	r4,r2,-11
1010d218:	00c00704 	movi	r3,28
1010d21c:	19010e16 	blt	r3,r4,1010d658 <__divdf3+0x6b4>
1010d220:	00c00744 	movi	r3,29
1010d224:	123ffe04 	addi	r8,r2,-8
1010d228:	1907c83a 	sub	r3,r3,r4
1010d22c:	8a22983a 	sll	r17,r17,r8
1010d230:	30c6d83a 	srl	r3,r6,r3
1010d234:	3210983a 	sll	r8,r6,r8
1010d238:	1c62b03a 	or	r17,r3,r17
1010d23c:	1080fcc4 	addi	r2,r2,1011
1010d240:	0085c83a 	sub	r2,zero,r2
1010d244:	000f883a 	mov	r7,zero
1010d248:	003f8606 	br	1010d064 <__alt_data_end+0xfffed064>
1010d24c:	0023883a 	mov	r17,zero
1010d250:	0011883a 	mov	r8,zero
1010d254:	01c00044 	movi	r7,1
1010d258:	003f8206 	br	1010d064 <__alt_data_end+0xfffed064>
1010d25c:	01c000c4 	movi	r7,3
1010d260:	003f8006 	br	1010d064 <__alt_data_end+0xfffed064>
1010d264:	04c00104 	movi	r19,4
1010d268:	0021883a 	mov	r16,zero
1010d26c:	0025883a 	mov	r18,zero
1010d270:	02400044 	movi	r9,1
1010d274:	003f6906 	br	1010d01c <__alt_data_end+0xfffed01c>
1010d278:	04c00304 	movi	r19,12
1010d27c:	024000c4 	movi	r9,3
1010d280:	003f6606 	br	1010d01c <__alt_data_end+0xfffed01c>
1010d284:	01400434 	movhi	r5,16
1010d288:	0007883a 	mov	r3,zero
1010d28c:	297fffc4 	addi	r5,r5,-1
1010d290:	04bfffc4 	movi	r18,-1
1010d294:	0081ffc4 	movi	r2,2047
1010d298:	003fa106 	br	1010d120 <__alt_data_end+0xfffed120>
1010d29c:	00c00044 	movi	r3,1
1010d2a0:	1887c83a 	sub	r3,r3,r2
1010d2a4:	01000e04 	movi	r4,56
1010d2a8:	20c1210e 	bge	r4,r3,1010d730 <__divdf3+0x78c>
1010d2ac:	98c0004c 	andi	r3,r19,1
1010d2b0:	0005883a 	mov	r2,zero
1010d2b4:	000b883a 	mov	r5,zero
1010d2b8:	0025883a 	mov	r18,zero
1010d2bc:	003f9806 	br	1010d120 <__alt_data_end+0xfffed120>
1010d2c0:	8c00fd36 	bltu	r17,r16,1010d6b8 <__divdf3+0x714>
1010d2c4:	8440fb26 	beq	r16,r17,1010d6b4 <__divdf3+0x710>
1010d2c8:	8007883a 	mov	r3,r16
1010d2cc:	ad7fffc4 	addi	r21,r21,-1
1010d2d0:	0021883a 	mov	r16,zero
1010d2d4:	4004d63a 	srli	r2,r8,24
1010d2d8:	8822923a 	slli	r17,r17,8
1010d2dc:	1809883a 	mov	r4,r3
1010d2e0:	402c923a 	slli	r22,r8,8
1010d2e4:	88b8b03a 	or	fp,r17,r2
1010d2e8:	e028d43a 	srli	r20,fp,16
1010d2ec:	d8c00015 	stw	r3,0(sp)
1010d2f0:	e5ffffcc 	andi	r23,fp,65535
1010d2f4:	a00b883a 	mov	r5,r20
1010d2f8:	0101b640 	call	10101b64 <__udivsi3>
1010d2fc:	d8c00017 	ldw	r3,0(sp)
1010d300:	a00b883a 	mov	r5,r20
1010d304:	d8800315 	stw	r2,12(sp)
1010d308:	1809883a 	mov	r4,r3
1010d30c:	0101bc80 	call	10101bc8 <__umodsi3>
1010d310:	d9800317 	ldw	r6,12(sp)
1010d314:	1006943a 	slli	r3,r2,16
1010d318:	9004d43a 	srli	r2,r18,16
1010d31c:	b9a3383a 	mul	r17,r23,r6
1010d320:	10c4b03a 	or	r2,r2,r3
1010d324:	1440062e 	bgeu	r2,r17,1010d340 <__divdf3+0x39c>
1010d328:	1705883a 	add	r2,r2,fp
1010d32c:	30ffffc4 	addi	r3,r6,-1
1010d330:	1700ee36 	bltu	r2,fp,1010d6ec <__divdf3+0x748>
1010d334:	1440ed2e 	bgeu	r2,r17,1010d6ec <__divdf3+0x748>
1010d338:	31bfff84 	addi	r6,r6,-2
1010d33c:	1705883a 	add	r2,r2,fp
1010d340:	1463c83a 	sub	r17,r2,r17
1010d344:	a00b883a 	mov	r5,r20
1010d348:	8809883a 	mov	r4,r17
1010d34c:	d9800315 	stw	r6,12(sp)
1010d350:	0101b640 	call	10101b64 <__udivsi3>
1010d354:	a00b883a 	mov	r5,r20
1010d358:	8809883a 	mov	r4,r17
1010d35c:	d8800215 	stw	r2,8(sp)
1010d360:	0101bc80 	call	10101bc8 <__umodsi3>
1010d364:	d9c00217 	ldw	r7,8(sp)
1010d368:	1004943a 	slli	r2,r2,16
1010d36c:	94bfffcc 	andi	r18,r18,65535
1010d370:	b9d1383a 	mul	r8,r23,r7
1010d374:	90a4b03a 	or	r18,r18,r2
1010d378:	d9800317 	ldw	r6,12(sp)
1010d37c:	9200062e 	bgeu	r18,r8,1010d398 <__divdf3+0x3f4>
1010d380:	9725883a 	add	r18,r18,fp
1010d384:	38bfffc4 	addi	r2,r7,-1
1010d388:	9700d636 	bltu	r18,fp,1010d6e4 <__divdf3+0x740>
1010d38c:	9200d52e 	bgeu	r18,r8,1010d6e4 <__divdf3+0x740>
1010d390:	39ffff84 	addi	r7,r7,-2
1010d394:	9725883a 	add	r18,r18,fp
1010d398:	3004943a 	slli	r2,r6,16
1010d39c:	b012d43a 	srli	r9,r22,16
1010d3a0:	b1bfffcc 	andi	r6,r22,65535
1010d3a4:	11e2b03a 	or	r17,r2,r7
1010d3a8:	8806d43a 	srli	r3,r17,16
1010d3ac:	893fffcc 	andi	r4,r17,65535
1010d3b0:	218b383a 	mul	r5,r4,r6
1010d3b4:	30c5383a 	mul	r2,r6,r3
1010d3b8:	2249383a 	mul	r4,r4,r9
1010d3bc:	280ed43a 	srli	r7,r5,16
1010d3c0:	9225c83a 	sub	r18,r18,r8
1010d3c4:	2089883a 	add	r4,r4,r2
1010d3c8:	3909883a 	add	r4,r7,r4
1010d3cc:	1a47383a 	mul	r3,r3,r9
1010d3d0:	2080022e 	bgeu	r4,r2,1010d3dc <__divdf3+0x438>
1010d3d4:	00800074 	movhi	r2,1
1010d3d8:	1887883a 	add	r3,r3,r2
1010d3dc:	2004d43a 	srli	r2,r4,16
1010d3e0:	2008943a 	slli	r4,r4,16
1010d3e4:	297fffcc 	andi	r5,r5,65535
1010d3e8:	10c7883a 	add	r3,r2,r3
1010d3ec:	2149883a 	add	r4,r4,r5
1010d3f0:	90c0a536 	bltu	r18,r3,1010d688 <__divdf3+0x6e4>
1010d3f4:	90c0bf26 	beq	r18,r3,1010d6f4 <__divdf3+0x750>
1010d3f8:	90c7c83a 	sub	r3,r18,r3
1010d3fc:	810fc83a 	sub	r7,r16,r4
1010d400:	81e5803a 	cmpltu	r18,r16,r7
1010d404:	1ca5c83a 	sub	r18,r3,r18
1010d408:	e480c126 	beq	fp,r18,1010d710 <__divdf3+0x76c>
1010d40c:	a00b883a 	mov	r5,r20
1010d410:	9009883a 	mov	r4,r18
1010d414:	d9800315 	stw	r6,12(sp)
1010d418:	d9c00215 	stw	r7,8(sp)
1010d41c:	da400115 	stw	r9,4(sp)
1010d420:	0101b640 	call	10101b64 <__udivsi3>
1010d424:	a00b883a 	mov	r5,r20
1010d428:	9009883a 	mov	r4,r18
1010d42c:	d8800015 	stw	r2,0(sp)
1010d430:	0101bc80 	call	10101bc8 <__umodsi3>
1010d434:	d9c00217 	ldw	r7,8(sp)
1010d438:	da000017 	ldw	r8,0(sp)
1010d43c:	1006943a 	slli	r3,r2,16
1010d440:	3804d43a 	srli	r2,r7,16
1010d444:	ba21383a 	mul	r16,r23,r8
1010d448:	d9800317 	ldw	r6,12(sp)
1010d44c:	10c4b03a 	or	r2,r2,r3
1010d450:	da400117 	ldw	r9,4(sp)
1010d454:	1400062e 	bgeu	r2,r16,1010d470 <__divdf3+0x4cc>
1010d458:	1705883a 	add	r2,r2,fp
1010d45c:	40ffffc4 	addi	r3,r8,-1
1010d460:	1700ad36 	bltu	r2,fp,1010d718 <__divdf3+0x774>
1010d464:	1400ac2e 	bgeu	r2,r16,1010d718 <__divdf3+0x774>
1010d468:	423fff84 	addi	r8,r8,-2
1010d46c:	1705883a 	add	r2,r2,fp
1010d470:	1421c83a 	sub	r16,r2,r16
1010d474:	a00b883a 	mov	r5,r20
1010d478:	8009883a 	mov	r4,r16
1010d47c:	d9800315 	stw	r6,12(sp)
1010d480:	d9c00215 	stw	r7,8(sp)
1010d484:	da000015 	stw	r8,0(sp)
1010d488:	da400115 	stw	r9,4(sp)
1010d48c:	0101b640 	call	10101b64 <__udivsi3>
1010d490:	8009883a 	mov	r4,r16
1010d494:	a00b883a 	mov	r5,r20
1010d498:	1025883a 	mov	r18,r2
1010d49c:	0101bc80 	call	10101bc8 <__umodsi3>
1010d4a0:	d9c00217 	ldw	r7,8(sp)
1010d4a4:	1004943a 	slli	r2,r2,16
1010d4a8:	bcaf383a 	mul	r23,r23,r18
1010d4ac:	393fffcc 	andi	r4,r7,65535
1010d4b0:	2088b03a 	or	r4,r4,r2
1010d4b4:	d9800317 	ldw	r6,12(sp)
1010d4b8:	da000017 	ldw	r8,0(sp)
1010d4bc:	da400117 	ldw	r9,4(sp)
1010d4c0:	25c0062e 	bgeu	r4,r23,1010d4dc <__divdf3+0x538>
1010d4c4:	2709883a 	add	r4,r4,fp
1010d4c8:	90bfffc4 	addi	r2,r18,-1
1010d4cc:	27009436 	bltu	r4,fp,1010d720 <__divdf3+0x77c>
1010d4d0:	25c0932e 	bgeu	r4,r23,1010d720 <__divdf3+0x77c>
1010d4d4:	94bfff84 	addi	r18,r18,-2
1010d4d8:	2709883a 	add	r4,r4,fp
1010d4dc:	4004943a 	slli	r2,r8,16
1010d4e0:	25efc83a 	sub	r23,r4,r23
1010d4e4:	1490b03a 	or	r8,r2,r18
1010d4e8:	4008d43a 	srli	r4,r8,16
1010d4ec:	40ffffcc 	andi	r3,r8,65535
1010d4f0:	30c5383a 	mul	r2,r6,r3
1010d4f4:	1a47383a 	mul	r3,r3,r9
1010d4f8:	310d383a 	mul	r6,r6,r4
1010d4fc:	100ad43a 	srli	r5,r2,16
1010d500:	4913383a 	mul	r9,r9,r4
1010d504:	1987883a 	add	r3,r3,r6
1010d508:	28c7883a 	add	r3,r5,r3
1010d50c:	1980022e 	bgeu	r3,r6,1010d518 <__divdf3+0x574>
1010d510:	01000074 	movhi	r4,1
1010d514:	4913883a 	add	r9,r9,r4
1010d518:	1808d43a 	srli	r4,r3,16
1010d51c:	1806943a 	slli	r3,r3,16
1010d520:	10bfffcc 	andi	r2,r2,65535
1010d524:	2253883a 	add	r9,r4,r9
1010d528:	1887883a 	add	r3,r3,r2
1010d52c:	ba403836 	bltu	r23,r9,1010d610 <__divdf3+0x66c>
1010d530:	ba403626 	beq	r23,r9,1010d60c <__divdf3+0x668>
1010d534:	42000054 	ori	r8,r8,1
1010d538:	a880ffc4 	addi	r2,r21,1023
1010d53c:	00bf570e 	bge	zero,r2,1010d29c <__alt_data_end+0xfffed29c>
1010d540:	40c001cc 	andi	r3,r8,7
1010d544:	18000726 	beq	r3,zero,1010d564 <__divdf3+0x5c0>
1010d548:	40c003cc 	andi	r3,r8,15
1010d54c:	01000104 	movi	r4,4
1010d550:	19000426 	beq	r3,r4,1010d564 <__divdf3+0x5c0>
1010d554:	4107883a 	add	r3,r8,r4
1010d558:	1a11803a 	cmpltu	r8,r3,r8
1010d55c:	8a23883a 	add	r17,r17,r8
1010d560:	1811883a 	mov	r8,r3
1010d564:	88c0402c 	andhi	r3,r17,256
1010d568:	18000426 	beq	r3,zero,1010d57c <__divdf3+0x5d8>
1010d56c:	00ffc034 	movhi	r3,65280
1010d570:	18ffffc4 	addi	r3,r3,-1
1010d574:	a8810004 	addi	r2,r21,1024
1010d578:	88e2703a 	and	r17,r17,r3
1010d57c:	00c1ff84 	movi	r3,2046
1010d580:	18bee316 	blt	r3,r2,1010d110 <__alt_data_end+0xfffed110>
1010d584:	8824977a 	slli	r18,r17,29
1010d588:	4010d0fa 	srli	r8,r8,3
1010d58c:	8822927a 	slli	r17,r17,9
1010d590:	1081ffcc 	andi	r2,r2,2047
1010d594:	9224b03a 	or	r18,r18,r8
1010d598:	880ad33a 	srli	r5,r17,12
1010d59c:	98c0004c 	andi	r3,r19,1
1010d5a0:	003edf06 	br	1010d120 <__alt_data_end+0xfffed120>
1010d5a4:	8080022c 	andhi	r2,r16,8
1010d5a8:	10001226 	beq	r2,zero,1010d5f4 <__divdf3+0x650>
1010d5ac:	8880022c 	andhi	r2,r17,8
1010d5b0:	1000101e 	bne	r2,zero,1010d5f4 <__divdf3+0x650>
1010d5b4:	00800434 	movhi	r2,16
1010d5b8:	89400234 	orhi	r5,r17,8
1010d5bc:	10bfffc4 	addi	r2,r2,-1
1010d5c0:	b007883a 	mov	r3,r22
1010d5c4:	288a703a 	and	r5,r5,r2
1010d5c8:	4025883a 	mov	r18,r8
1010d5cc:	003f3106 	br	1010d294 <__alt_data_end+0xfffed294>
1010d5d0:	008000c4 	movi	r2,3
1010d5d4:	3880a626 	beq	r7,r2,1010d870 <__divdf3+0x8cc>
1010d5d8:	00800044 	movi	r2,1
1010d5dc:	3880521e 	bne	r7,r2,1010d728 <__divdf3+0x784>
1010d5e0:	b807883a 	mov	r3,r23
1010d5e4:	0005883a 	mov	r2,zero
1010d5e8:	000b883a 	mov	r5,zero
1010d5ec:	0025883a 	mov	r18,zero
1010d5f0:	003ecb06 	br	1010d120 <__alt_data_end+0xfffed120>
1010d5f4:	00800434 	movhi	r2,16
1010d5f8:	81400234 	orhi	r5,r16,8
1010d5fc:	10bfffc4 	addi	r2,r2,-1
1010d600:	a007883a 	mov	r3,r20
1010d604:	288a703a 	and	r5,r5,r2
1010d608:	003f2206 	br	1010d294 <__alt_data_end+0xfffed294>
1010d60c:	183fca26 	beq	r3,zero,1010d538 <__alt_data_end+0xfffed538>
1010d610:	e5ef883a 	add	r23,fp,r23
1010d614:	40bfffc4 	addi	r2,r8,-1
1010d618:	bf00392e 	bgeu	r23,fp,1010d700 <__divdf3+0x75c>
1010d61c:	1011883a 	mov	r8,r2
1010d620:	ba7fc41e 	bne	r23,r9,1010d534 <__alt_data_end+0xfffed534>
1010d624:	b0ffc31e 	bne	r22,r3,1010d534 <__alt_data_end+0xfffed534>
1010d628:	003fc306 	br	1010d538 <__alt_data_end+0xfffed538>
1010d62c:	143ff604 	addi	r16,r2,-40
1010d630:	9c20983a 	sll	r16,r19,r16
1010d634:	0025883a 	mov	r18,zero
1010d638:	003ee206 	br	1010d1c4 <__alt_data_end+0xfffed1c4>
1010d63c:	d9800315 	stw	r6,12(sp)
1010d640:	d9c00215 	stw	r7,8(sp)
1010d644:	010ecfc0 	call	1010ecfc <__clzsi2>
1010d648:	10800804 	addi	r2,r2,32
1010d64c:	d9c00217 	ldw	r7,8(sp)
1010d650:	d9800317 	ldw	r6,12(sp)
1010d654:	003ed106 	br	1010d19c <__alt_data_end+0xfffed19c>
1010d658:	147ff604 	addi	r17,r2,-40
1010d65c:	3462983a 	sll	r17,r6,r17
1010d660:	0011883a 	mov	r8,zero
1010d664:	003ef506 	br	1010d23c <__alt_data_end+0xfffed23c>
1010d668:	3009883a 	mov	r4,r6
1010d66c:	d9800315 	stw	r6,12(sp)
1010d670:	da400115 	stw	r9,4(sp)
1010d674:	010ecfc0 	call	1010ecfc <__clzsi2>
1010d678:	10800804 	addi	r2,r2,32
1010d67c:	da400117 	ldw	r9,4(sp)
1010d680:	d9800317 	ldw	r6,12(sp)
1010d684:	003ee306 	br	1010d214 <__alt_data_end+0xfffed214>
1010d688:	85a1883a 	add	r16,r16,r22
1010d68c:	8585803a 	cmpltu	r2,r16,r22
1010d690:	1705883a 	add	r2,r2,fp
1010d694:	14a5883a 	add	r18,r2,r18
1010d698:	88bfffc4 	addi	r2,r17,-1
1010d69c:	e4800c2e 	bgeu	fp,r18,1010d6d0 <__divdf3+0x72c>
1010d6a0:	90c03e36 	bltu	r18,r3,1010d79c <__divdf3+0x7f8>
1010d6a4:	1c806926 	beq	r3,r18,1010d84c <__divdf3+0x8a8>
1010d6a8:	90c7c83a 	sub	r3,r18,r3
1010d6ac:	1023883a 	mov	r17,r2
1010d6b0:	003f5206 	br	1010d3fc <__alt_data_end+0xfffed3fc>
1010d6b4:	923f0436 	bltu	r18,r8,1010d2c8 <__alt_data_end+0xfffed2c8>
1010d6b8:	800897fa 	slli	r4,r16,31
1010d6bc:	9004d07a 	srli	r2,r18,1
1010d6c0:	8006d07a 	srli	r3,r16,1
1010d6c4:	902097fa 	slli	r16,r18,31
1010d6c8:	20a4b03a 	or	r18,r4,r2
1010d6cc:	003f0106 	br	1010d2d4 <__alt_data_end+0xfffed2d4>
1010d6d0:	e4bff51e 	bne	fp,r18,1010d6a8 <__alt_data_end+0xfffed6a8>
1010d6d4:	85bff22e 	bgeu	r16,r22,1010d6a0 <__alt_data_end+0xfffed6a0>
1010d6d8:	e0c7c83a 	sub	r3,fp,r3
1010d6dc:	1023883a 	mov	r17,r2
1010d6e0:	003f4606 	br	1010d3fc <__alt_data_end+0xfffed3fc>
1010d6e4:	100f883a 	mov	r7,r2
1010d6e8:	003f2b06 	br	1010d398 <__alt_data_end+0xfffed398>
1010d6ec:	180d883a 	mov	r6,r3
1010d6f0:	003f1306 	br	1010d340 <__alt_data_end+0xfffed340>
1010d6f4:	813fe436 	bltu	r16,r4,1010d688 <__alt_data_end+0xfffed688>
1010d6f8:	0007883a 	mov	r3,zero
1010d6fc:	003f3f06 	br	1010d3fc <__alt_data_end+0xfffed3fc>
1010d700:	ba402c36 	bltu	r23,r9,1010d7b4 <__divdf3+0x810>
1010d704:	4dc05426 	beq	r9,r23,1010d858 <__divdf3+0x8b4>
1010d708:	1011883a 	mov	r8,r2
1010d70c:	003f8906 	br	1010d534 <__alt_data_end+0xfffed534>
1010d710:	023fffc4 	movi	r8,-1
1010d714:	003f8806 	br	1010d538 <__alt_data_end+0xfffed538>
1010d718:	1811883a 	mov	r8,r3
1010d71c:	003f5406 	br	1010d470 <__alt_data_end+0xfffed470>
1010d720:	1025883a 	mov	r18,r2
1010d724:	003f6d06 	br	1010d4dc <__alt_data_end+0xfffed4dc>
1010d728:	b827883a 	mov	r19,r23
1010d72c:	003f8206 	br	1010d538 <__alt_data_end+0xfffed538>
1010d730:	010007c4 	movi	r4,31
1010d734:	20c02616 	blt	r4,r3,1010d7d0 <__divdf3+0x82c>
1010d738:	00800804 	movi	r2,32
1010d73c:	10c5c83a 	sub	r2,r2,r3
1010d740:	888a983a 	sll	r5,r17,r2
1010d744:	40c8d83a 	srl	r4,r8,r3
1010d748:	4084983a 	sll	r2,r8,r2
1010d74c:	88e2d83a 	srl	r17,r17,r3
1010d750:	2906b03a 	or	r3,r5,r4
1010d754:	1004c03a 	cmpne	r2,r2,zero
1010d758:	1886b03a 	or	r3,r3,r2
1010d75c:	188001cc 	andi	r2,r3,7
1010d760:	10000726 	beq	r2,zero,1010d780 <__divdf3+0x7dc>
1010d764:	188003cc 	andi	r2,r3,15
1010d768:	01000104 	movi	r4,4
1010d76c:	11000426 	beq	r2,r4,1010d780 <__divdf3+0x7dc>
1010d770:	1805883a 	mov	r2,r3
1010d774:	10c00104 	addi	r3,r2,4
1010d778:	1885803a 	cmpltu	r2,r3,r2
1010d77c:	88a3883a 	add	r17,r17,r2
1010d780:	8880202c 	andhi	r2,r17,128
1010d784:	10002726 	beq	r2,zero,1010d824 <__divdf3+0x880>
1010d788:	98c0004c 	andi	r3,r19,1
1010d78c:	00800044 	movi	r2,1
1010d790:	000b883a 	mov	r5,zero
1010d794:	0025883a 	mov	r18,zero
1010d798:	003e6106 	br	1010d120 <__alt_data_end+0xfffed120>
1010d79c:	85a1883a 	add	r16,r16,r22
1010d7a0:	8585803a 	cmpltu	r2,r16,r22
1010d7a4:	1705883a 	add	r2,r2,fp
1010d7a8:	14a5883a 	add	r18,r2,r18
1010d7ac:	8c7fff84 	addi	r17,r17,-2
1010d7b0:	003f1106 	br	1010d3f8 <__alt_data_end+0xfffed3f8>
1010d7b4:	b589883a 	add	r4,r22,r22
1010d7b8:	25ad803a 	cmpltu	r22,r4,r22
1010d7bc:	b739883a 	add	fp,r22,fp
1010d7c0:	40bfff84 	addi	r2,r8,-2
1010d7c4:	bf2f883a 	add	r23,r23,fp
1010d7c8:	202d883a 	mov	r22,r4
1010d7cc:	003f9306 	br	1010d61c <__alt_data_end+0xfffed61c>
1010d7d0:	013ff844 	movi	r4,-31
1010d7d4:	2085c83a 	sub	r2,r4,r2
1010d7d8:	8888d83a 	srl	r4,r17,r2
1010d7dc:	00800804 	movi	r2,32
1010d7e0:	18802126 	beq	r3,r2,1010d868 <__divdf3+0x8c4>
1010d7e4:	00801004 	movi	r2,64
1010d7e8:	10c5c83a 	sub	r2,r2,r3
1010d7ec:	8884983a 	sll	r2,r17,r2
1010d7f0:	1204b03a 	or	r2,r2,r8
1010d7f4:	1004c03a 	cmpne	r2,r2,zero
1010d7f8:	2084b03a 	or	r2,r4,r2
1010d7fc:	144001cc 	andi	r17,r2,7
1010d800:	88000d1e 	bne	r17,zero,1010d838 <__divdf3+0x894>
1010d804:	000b883a 	mov	r5,zero
1010d808:	1024d0fa 	srli	r18,r2,3
1010d80c:	98c0004c 	andi	r3,r19,1
1010d810:	0005883a 	mov	r2,zero
1010d814:	9464b03a 	or	r18,r18,r17
1010d818:	003e4106 	br	1010d120 <__alt_data_end+0xfffed120>
1010d81c:	1007883a 	mov	r3,r2
1010d820:	0023883a 	mov	r17,zero
1010d824:	880a927a 	slli	r5,r17,9
1010d828:	1805883a 	mov	r2,r3
1010d82c:	8822977a 	slli	r17,r17,29
1010d830:	280ad33a 	srli	r5,r5,12
1010d834:	003ff406 	br	1010d808 <__alt_data_end+0xfffed808>
1010d838:	10c003cc 	andi	r3,r2,15
1010d83c:	01000104 	movi	r4,4
1010d840:	193ff626 	beq	r3,r4,1010d81c <__alt_data_end+0xfffed81c>
1010d844:	0023883a 	mov	r17,zero
1010d848:	003fca06 	br	1010d774 <__alt_data_end+0xfffed774>
1010d84c:	813fd336 	bltu	r16,r4,1010d79c <__alt_data_end+0xfffed79c>
1010d850:	1023883a 	mov	r17,r2
1010d854:	003fa806 	br	1010d6f8 <__alt_data_end+0xfffed6f8>
1010d858:	b0ffd636 	bltu	r22,r3,1010d7b4 <__alt_data_end+0xfffed7b4>
1010d85c:	1011883a 	mov	r8,r2
1010d860:	b0ff341e 	bne	r22,r3,1010d534 <__alt_data_end+0xfffed534>
1010d864:	003f3406 	br	1010d538 <__alt_data_end+0xfffed538>
1010d868:	0005883a 	mov	r2,zero
1010d86c:	003fe006 	br	1010d7f0 <__alt_data_end+0xfffed7f0>
1010d870:	00800434 	movhi	r2,16
1010d874:	89400234 	orhi	r5,r17,8
1010d878:	10bfffc4 	addi	r2,r2,-1
1010d87c:	b807883a 	mov	r3,r23
1010d880:	288a703a 	and	r5,r5,r2
1010d884:	4025883a 	mov	r18,r8
1010d888:	003e8206 	br	1010d294 <__alt_data_end+0xfffed294>

1010d88c <__eqdf2>:
1010d88c:	2804d53a 	srli	r2,r5,20
1010d890:	3806d53a 	srli	r3,r7,20
1010d894:	02000434 	movhi	r8,16
1010d898:	423fffc4 	addi	r8,r8,-1
1010d89c:	1081ffcc 	andi	r2,r2,2047
1010d8a0:	0281ffc4 	movi	r10,2047
1010d8a4:	2a12703a 	and	r9,r5,r8
1010d8a8:	18c1ffcc 	andi	r3,r3,2047
1010d8ac:	3a10703a 	and	r8,r7,r8
1010d8b0:	280ad7fa 	srli	r5,r5,31
1010d8b4:	380ed7fa 	srli	r7,r7,31
1010d8b8:	12801026 	beq	r2,r10,1010d8fc <__eqdf2+0x70>
1010d8bc:	0281ffc4 	movi	r10,2047
1010d8c0:	1a800a26 	beq	r3,r10,1010d8ec <__eqdf2+0x60>
1010d8c4:	10c00226 	beq	r2,r3,1010d8d0 <__eqdf2+0x44>
1010d8c8:	00800044 	movi	r2,1
1010d8cc:	f800283a 	ret
1010d8d0:	4a3ffd1e 	bne	r9,r8,1010d8c8 <__alt_data_end+0xfffed8c8>
1010d8d4:	21bffc1e 	bne	r4,r6,1010d8c8 <__alt_data_end+0xfffed8c8>
1010d8d8:	29c00c26 	beq	r5,r7,1010d90c <__eqdf2+0x80>
1010d8dc:	103ffa1e 	bne	r2,zero,1010d8c8 <__alt_data_end+0xfffed8c8>
1010d8e0:	2244b03a 	or	r2,r4,r9
1010d8e4:	1004c03a 	cmpne	r2,r2,zero
1010d8e8:	f800283a 	ret
1010d8ec:	3214b03a 	or	r10,r6,r8
1010d8f0:	503ff426 	beq	r10,zero,1010d8c4 <__alt_data_end+0xfffed8c4>
1010d8f4:	00800044 	movi	r2,1
1010d8f8:	f800283a 	ret
1010d8fc:	2254b03a 	or	r10,r4,r9
1010d900:	503fee26 	beq	r10,zero,1010d8bc <__alt_data_end+0xfffed8bc>
1010d904:	00800044 	movi	r2,1
1010d908:	f800283a 	ret
1010d90c:	0005883a 	mov	r2,zero
1010d910:	f800283a 	ret

1010d914 <__gedf2>:
1010d914:	2804d53a 	srli	r2,r5,20
1010d918:	3806d53a 	srli	r3,r7,20
1010d91c:	02000434 	movhi	r8,16
1010d920:	423fffc4 	addi	r8,r8,-1
1010d924:	1081ffcc 	andi	r2,r2,2047
1010d928:	0241ffc4 	movi	r9,2047
1010d92c:	2a14703a 	and	r10,r5,r8
1010d930:	18c1ffcc 	andi	r3,r3,2047
1010d934:	3a10703a 	and	r8,r7,r8
1010d938:	280ad7fa 	srli	r5,r5,31
1010d93c:	380ed7fa 	srli	r7,r7,31
1010d940:	12401d26 	beq	r2,r9,1010d9b8 <__gedf2+0xa4>
1010d944:	0241ffc4 	movi	r9,2047
1010d948:	1a401226 	beq	r3,r9,1010d994 <__gedf2+0x80>
1010d94c:	1000081e 	bne	r2,zero,1010d970 <__gedf2+0x5c>
1010d950:	2296b03a 	or	r11,r4,r10
1010d954:	5813003a 	cmpeq	r9,r11,zero
1010d958:	1800091e 	bne	r3,zero,1010d980 <__gedf2+0x6c>
1010d95c:	3218b03a 	or	r12,r6,r8
1010d960:	6000071e 	bne	r12,zero,1010d980 <__gedf2+0x6c>
1010d964:	0005883a 	mov	r2,zero
1010d968:	5800101e 	bne	r11,zero,1010d9ac <__gedf2+0x98>
1010d96c:	f800283a 	ret
1010d970:	18000c1e 	bne	r3,zero,1010d9a4 <__gedf2+0x90>
1010d974:	3212b03a 	or	r9,r6,r8
1010d978:	48000c26 	beq	r9,zero,1010d9ac <__gedf2+0x98>
1010d97c:	0013883a 	mov	r9,zero
1010d980:	39c03fcc 	andi	r7,r7,255
1010d984:	48000826 	beq	r9,zero,1010d9a8 <__gedf2+0x94>
1010d988:	38000926 	beq	r7,zero,1010d9b0 <__gedf2+0x9c>
1010d98c:	00800044 	movi	r2,1
1010d990:	f800283a 	ret
1010d994:	3212b03a 	or	r9,r6,r8
1010d998:	483fec26 	beq	r9,zero,1010d94c <__alt_data_end+0xfffed94c>
1010d99c:	00bfff84 	movi	r2,-2
1010d9a0:	f800283a 	ret
1010d9a4:	39c03fcc 	andi	r7,r7,255
1010d9a8:	29c00626 	beq	r5,r7,1010d9c4 <__gedf2+0xb0>
1010d9ac:	283ff726 	beq	r5,zero,1010d98c <__alt_data_end+0xfffed98c>
1010d9b0:	00bfffc4 	movi	r2,-1
1010d9b4:	f800283a 	ret
1010d9b8:	2292b03a 	or	r9,r4,r10
1010d9bc:	483fe126 	beq	r9,zero,1010d944 <__alt_data_end+0xfffed944>
1010d9c0:	003ff606 	br	1010d99c <__alt_data_end+0xfffed99c>
1010d9c4:	18bff916 	blt	r3,r2,1010d9ac <__alt_data_end+0xfffed9ac>
1010d9c8:	10c00316 	blt	r2,r3,1010d9d8 <__gedf2+0xc4>
1010d9cc:	42bff736 	bltu	r8,r10,1010d9ac <__alt_data_end+0xfffed9ac>
1010d9d0:	52000326 	beq	r10,r8,1010d9e0 <__gedf2+0xcc>
1010d9d4:	5200042e 	bgeu	r10,r8,1010d9e8 <__gedf2+0xd4>
1010d9d8:	283fec1e 	bne	r5,zero,1010d98c <__alt_data_end+0xfffed98c>
1010d9dc:	003ff406 	br	1010d9b0 <__alt_data_end+0xfffed9b0>
1010d9e0:	313ff236 	bltu	r6,r4,1010d9ac <__alt_data_end+0xfffed9ac>
1010d9e4:	21bffc36 	bltu	r4,r6,1010d9d8 <__alt_data_end+0xfffed9d8>
1010d9e8:	0005883a 	mov	r2,zero
1010d9ec:	f800283a 	ret

1010d9f0 <__ledf2>:
1010d9f0:	2804d53a 	srli	r2,r5,20
1010d9f4:	3810d53a 	srli	r8,r7,20
1010d9f8:	00c00434 	movhi	r3,16
1010d9fc:	18ffffc4 	addi	r3,r3,-1
1010da00:	1081ffcc 	andi	r2,r2,2047
1010da04:	0241ffc4 	movi	r9,2047
1010da08:	28d4703a 	and	r10,r5,r3
1010da0c:	4201ffcc 	andi	r8,r8,2047
1010da10:	38c6703a 	and	r3,r7,r3
1010da14:	280ad7fa 	srli	r5,r5,31
1010da18:	380ed7fa 	srli	r7,r7,31
1010da1c:	12401f26 	beq	r2,r9,1010da9c <__ledf2+0xac>
1010da20:	0241ffc4 	movi	r9,2047
1010da24:	42401426 	beq	r8,r9,1010da78 <__ledf2+0x88>
1010da28:	1000091e 	bne	r2,zero,1010da50 <__ledf2+0x60>
1010da2c:	2296b03a 	or	r11,r4,r10
1010da30:	5813003a 	cmpeq	r9,r11,zero
1010da34:	29403fcc 	andi	r5,r5,255
1010da38:	40000a1e 	bne	r8,zero,1010da64 <__ledf2+0x74>
1010da3c:	30d8b03a 	or	r12,r6,r3
1010da40:	6000081e 	bne	r12,zero,1010da64 <__ledf2+0x74>
1010da44:	0005883a 	mov	r2,zero
1010da48:	5800111e 	bne	r11,zero,1010da90 <__ledf2+0xa0>
1010da4c:	f800283a 	ret
1010da50:	29403fcc 	andi	r5,r5,255
1010da54:	40000c1e 	bne	r8,zero,1010da88 <__ledf2+0x98>
1010da58:	30d2b03a 	or	r9,r6,r3
1010da5c:	48000c26 	beq	r9,zero,1010da90 <__ledf2+0xa0>
1010da60:	0013883a 	mov	r9,zero
1010da64:	39c03fcc 	andi	r7,r7,255
1010da68:	48000826 	beq	r9,zero,1010da8c <__ledf2+0x9c>
1010da6c:	38001126 	beq	r7,zero,1010dab4 <__ledf2+0xc4>
1010da70:	00800044 	movi	r2,1
1010da74:	f800283a 	ret
1010da78:	30d2b03a 	or	r9,r6,r3
1010da7c:	483fea26 	beq	r9,zero,1010da28 <__alt_data_end+0xfffeda28>
1010da80:	00800084 	movi	r2,2
1010da84:	f800283a 	ret
1010da88:	39c03fcc 	andi	r7,r7,255
1010da8c:	39400726 	beq	r7,r5,1010daac <__ledf2+0xbc>
1010da90:	2800081e 	bne	r5,zero,1010dab4 <__ledf2+0xc4>
1010da94:	00800044 	movi	r2,1
1010da98:	f800283a 	ret
1010da9c:	2292b03a 	or	r9,r4,r10
1010daa0:	483fdf26 	beq	r9,zero,1010da20 <__alt_data_end+0xfffeda20>
1010daa4:	00800084 	movi	r2,2
1010daa8:	f800283a 	ret
1010daac:	4080030e 	bge	r8,r2,1010dabc <__ledf2+0xcc>
1010dab0:	383fef26 	beq	r7,zero,1010da70 <__alt_data_end+0xfffeda70>
1010dab4:	00bfffc4 	movi	r2,-1
1010dab8:	f800283a 	ret
1010dabc:	123feb16 	blt	r2,r8,1010da6c <__alt_data_end+0xfffeda6c>
1010dac0:	1abff336 	bltu	r3,r10,1010da90 <__alt_data_end+0xfffeda90>
1010dac4:	50c00326 	beq	r10,r3,1010dad4 <__ledf2+0xe4>
1010dac8:	50c0042e 	bgeu	r10,r3,1010dadc <__ledf2+0xec>
1010dacc:	283fe81e 	bne	r5,zero,1010da70 <__alt_data_end+0xfffeda70>
1010dad0:	003ff806 	br	1010dab4 <__alt_data_end+0xfffedab4>
1010dad4:	313fee36 	bltu	r6,r4,1010da90 <__alt_data_end+0xfffeda90>
1010dad8:	21bffc36 	bltu	r4,r6,1010dacc <__alt_data_end+0xfffedacc>
1010dadc:	0005883a 	mov	r2,zero
1010dae0:	f800283a 	ret

1010dae4 <__muldf3>:
1010dae4:	defff304 	addi	sp,sp,-52
1010dae8:	2804d53a 	srli	r2,r5,20
1010daec:	dd800915 	stw	r22,36(sp)
1010daf0:	282cd7fa 	srli	r22,r5,31
1010daf4:	dc000315 	stw	r16,12(sp)
1010daf8:	04000434 	movhi	r16,16
1010dafc:	dd400815 	stw	r21,32(sp)
1010db00:	dc800515 	stw	r18,20(sp)
1010db04:	843fffc4 	addi	r16,r16,-1
1010db08:	dfc00c15 	stw	ra,48(sp)
1010db0c:	df000b15 	stw	fp,44(sp)
1010db10:	ddc00a15 	stw	r23,40(sp)
1010db14:	dd000715 	stw	r20,28(sp)
1010db18:	dcc00615 	stw	r19,24(sp)
1010db1c:	dc400415 	stw	r17,16(sp)
1010db20:	1481ffcc 	andi	r18,r2,2047
1010db24:	2c20703a 	and	r16,r5,r16
1010db28:	b02b883a 	mov	r21,r22
1010db2c:	b2403fcc 	andi	r9,r22,255
1010db30:	90006026 	beq	r18,zero,1010dcb4 <__muldf3+0x1d0>
1010db34:	0081ffc4 	movi	r2,2047
1010db38:	2029883a 	mov	r20,r4
1010db3c:	90803626 	beq	r18,r2,1010dc18 <__muldf3+0x134>
1010db40:	80800434 	orhi	r2,r16,16
1010db44:	100490fa 	slli	r2,r2,3
1010db48:	2020d77a 	srli	r16,r4,29
1010db4c:	202890fa 	slli	r20,r4,3
1010db50:	94bf0044 	addi	r18,r18,-1023
1010db54:	80a0b03a 	or	r16,r16,r2
1010db58:	0027883a 	mov	r19,zero
1010db5c:	0039883a 	mov	fp,zero
1010db60:	3804d53a 	srli	r2,r7,20
1010db64:	382ed7fa 	srli	r23,r7,31
1010db68:	04400434 	movhi	r17,16
1010db6c:	8c7fffc4 	addi	r17,r17,-1
1010db70:	1081ffcc 	andi	r2,r2,2047
1010db74:	3011883a 	mov	r8,r6
1010db78:	3c62703a 	and	r17,r7,r17
1010db7c:	ba803fcc 	andi	r10,r23,255
1010db80:	10006d26 	beq	r2,zero,1010dd38 <__muldf3+0x254>
1010db84:	00c1ffc4 	movi	r3,2047
1010db88:	10c06526 	beq	r2,r3,1010dd20 <__muldf3+0x23c>
1010db8c:	88c00434 	orhi	r3,r17,16
1010db90:	180690fa 	slli	r3,r3,3
1010db94:	3022d77a 	srli	r17,r6,29
1010db98:	301090fa 	slli	r8,r6,3
1010db9c:	10bf0044 	addi	r2,r2,-1023
1010dba0:	88e2b03a 	or	r17,r17,r3
1010dba4:	000b883a 	mov	r5,zero
1010dba8:	9085883a 	add	r2,r18,r2
1010dbac:	2cc8b03a 	or	r4,r5,r19
1010dbb0:	00c003c4 	movi	r3,15
1010dbb4:	bdacf03a 	xor	r22,r23,r22
1010dbb8:	12c00044 	addi	r11,r2,1
1010dbbc:	19009936 	bltu	r3,r4,1010de24 <__muldf3+0x340>
1010dbc0:	200890ba 	slli	r4,r4,2
1010dbc4:	00c40474 	movhi	r3,4113
1010dbc8:	18f6f604 	addi	r3,r3,-9256
1010dbcc:	20c9883a 	add	r4,r4,r3
1010dbd0:	20c00017 	ldw	r3,0(r4)
1010dbd4:	1800683a 	jmp	r3
1010dbd8:	1010de24 	muli	zero,r2,17272
1010dbdc:	1010dc38 	rdprs	zero,r2,17264
1010dbe0:	1010dc38 	rdprs	zero,r2,17264
1010dbe4:	1010dc34 	orhi	zero,r2,17264
1010dbe8:	1010de00 	call	11010de0 <__alt_data_end+0xef0de0>
1010dbec:	1010de00 	call	11010de0 <__alt_data_end+0xef0de0>
1010dbf0:	1010dde8 	cmpgeui	zero,r2,17271
1010dbf4:	1010dc34 	orhi	zero,r2,17264
1010dbf8:	1010de00 	call	11010de0 <__alt_data_end+0xef0de0>
1010dbfc:	1010dde8 	cmpgeui	zero,r2,17271
1010dc00:	1010de00 	call	11010de0 <__alt_data_end+0xef0de0>
1010dc04:	1010dc34 	orhi	zero,r2,17264
1010dc08:	1010de10 	cmplti	zero,r2,17272
1010dc0c:	1010de10 	cmplti	zero,r2,17272
1010dc10:	1010de10 	cmplti	zero,r2,17272
1010dc14:	1010e02c 	andhi	zero,r2,17280
1010dc18:	2404b03a 	or	r2,r4,r16
1010dc1c:	10006f1e 	bne	r2,zero,1010dddc <__muldf3+0x2f8>
1010dc20:	04c00204 	movi	r19,8
1010dc24:	0021883a 	mov	r16,zero
1010dc28:	0029883a 	mov	r20,zero
1010dc2c:	07000084 	movi	fp,2
1010dc30:	003fcb06 	br	1010db60 <__alt_data_end+0xfffedb60>
1010dc34:	502d883a 	mov	r22,r10
1010dc38:	00800084 	movi	r2,2
1010dc3c:	28805726 	beq	r5,r2,1010dd9c <__muldf3+0x2b8>
1010dc40:	008000c4 	movi	r2,3
1010dc44:	28816626 	beq	r5,r2,1010e1e0 <__muldf3+0x6fc>
1010dc48:	00800044 	movi	r2,1
1010dc4c:	2881411e 	bne	r5,r2,1010e154 <__muldf3+0x670>
1010dc50:	b02b883a 	mov	r21,r22
1010dc54:	0005883a 	mov	r2,zero
1010dc58:	000b883a 	mov	r5,zero
1010dc5c:	0029883a 	mov	r20,zero
1010dc60:	1004953a 	slli	r2,r2,20
1010dc64:	a8c03fcc 	andi	r3,r21,255
1010dc68:	04400434 	movhi	r17,16
1010dc6c:	8c7fffc4 	addi	r17,r17,-1
1010dc70:	180697fa 	slli	r3,r3,31
1010dc74:	2c4a703a 	and	r5,r5,r17
1010dc78:	288ab03a 	or	r5,r5,r2
1010dc7c:	28c6b03a 	or	r3,r5,r3
1010dc80:	a005883a 	mov	r2,r20
1010dc84:	dfc00c17 	ldw	ra,48(sp)
1010dc88:	df000b17 	ldw	fp,44(sp)
1010dc8c:	ddc00a17 	ldw	r23,40(sp)
1010dc90:	dd800917 	ldw	r22,36(sp)
1010dc94:	dd400817 	ldw	r21,32(sp)
1010dc98:	dd000717 	ldw	r20,28(sp)
1010dc9c:	dcc00617 	ldw	r19,24(sp)
1010dca0:	dc800517 	ldw	r18,20(sp)
1010dca4:	dc400417 	ldw	r17,16(sp)
1010dca8:	dc000317 	ldw	r16,12(sp)
1010dcac:	dec00d04 	addi	sp,sp,52
1010dcb0:	f800283a 	ret
1010dcb4:	2404b03a 	or	r2,r4,r16
1010dcb8:	2027883a 	mov	r19,r4
1010dcbc:	10004226 	beq	r2,zero,1010ddc8 <__muldf3+0x2e4>
1010dcc0:	8000fc26 	beq	r16,zero,1010e0b4 <__muldf3+0x5d0>
1010dcc4:	8009883a 	mov	r4,r16
1010dcc8:	d9800215 	stw	r6,8(sp)
1010dccc:	d9c00015 	stw	r7,0(sp)
1010dcd0:	da400115 	stw	r9,4(sp)
1010dcd4:	010ecfc0 	call	1010ecfc <__clzsi2>
1010dcd8:	d9800217 	ldw	r6,8(sp)
1010dcdc:	d9c00017 	ldw	r7,0(sp)
1010dce0:	da400117 	ldw	r9,4(sp)
1010dce4:	113ffd44 	addi	r4,r2,-11
1010dce8:	00c00704 	movi	r3,28
1010dcec:	1900ed16 	blt	r3,r4,1010e0a4 <__muldf3+0x5c0>
1010dcf0:	00c00744 	movi	r3,29
1010dcf4:	147ffe04 	addi	r17,r2,-8
1010dcf8:	1907c83a 	sub	r3,r3,r4
1010dcfc:	8460983a 	sll	r16,r16,r17
1010dd00:	98c6d83a 	srl	r3,r19,r3
1010dd04:	9c68983a 	sll	r20,r19,r17
1010dd08:	1c20b03a 	or	r16,r3,r16
1010dd0c:	1080fcc4 	addi	r2,r2,1011
1010dd10:	00a5c83a 	sub	r18,zero,r2
1010dd14:	0027883a 	mov	r19,zero
1010dd18:	0039883a 	mov	fp,zero
1010dd1c:	003f9006 	br	1010db60 <__alt_data_end+0xfffedb60>
1010dd20:	3446b03a 	or	r3,r6,r17
1010dd24:	1800261e 	bne	r3,zero,1010ddc0 <__muldf3+0x2dc>
1010dd28:	0023883a 	mov	r17,zero
1010dd2c:	0011883a 	mov	r8,zero
1010dd30:	01400084 	movi	r5,2
1010dd34:	003f9c06 	br	1010dba8 <__alt_data_end+0xfffedba8>
1010dd38:	3446b03a 	or	r3,r6,r17
1010dd3c:	18001c26 	beq	r3,zero,1010ddb0 <__muldf3+0x2cc>
1010dd40:	8800ce26 	beq	r17,zero,1010e07c <__muldf3+0x598>
1010dd44:	8809883a 	mov	r4,r17
1010dd48:	d9800215 	stw	r6,8(sp)
1010dd4c:	da400115 	stw	r9,4(sp)
1010dd50:	da800015 	stw	r10,0(sp)
1010dd54:	010ecfc0 	call	1010ecfc <__clzsi2>
1010dd58:	d9800217 	ldw	r6,8(sp)
1010dd5c:	da400117 	ldw	r9,4(sp)
1010dd60:	da800017 	ldw	r10,0(sp)
1010dd64:	113ffd44 	addi	r4,r2,-11
1010dd68:	00c00704 	movi	r3,28
1010dd6c:	1900bf16 	blt	r3,r4,1010e06c <__muldf3+0x588>
1010dd70:	00c00744 	movi	r3,29
1010dd74:	123ffe04 	addi	r8,r2,-8
1010dd78:	1907c83a 	sub	r3,r3,r4
1010dd7c:	8a22983a 	sll	r17,r17,r8
1010dd80:	30c6d83a 	srl	r3,r6,r3
1010dd84:	3210983a 	sll	r8,r6,r8
1010dd88:	1c62b03a 	or	r17,r3,r17
1010dd8c:	1080fcc4 	addi	r2,r2,1011
1010dd90:	0085c83a 	sub	r2,zero,r2
1010dd94:	000b883a 	mov	r5,zero
1010dd98:	003f8306 	br	1010dba8 <__alt_data_end+0xfffedba8>
1010dd9c:	b02b883a 	mov	r21,r22
1010dda0:	0081ffc4 	movi	r2,2047
1010dda4:	000b883a 	mov	r5,zero
1010dda8:	0029883a 	mov	r20,zero
1010ddac:	003fac06 	br	1010dc60 <__alt_data_end+0xfffedc60>
1010ddb0:	0023883a 	mov	r17,zero
1010ddb4:	0011883a 	mov	r8,zero
1010ddb8:	01400044 	movi	r5,1
1010ddbc:	003f7a06 	br	1010dba8 <__alt_data_end+0xfffedba8>
1010ddc0:	014000c4 	movi	r5,3
1010ddc4:	003f7806 	br	1010dba8 <__alt_data_end+0xfffedba8>
1010ddc8:	04c00104 	movi	r19,4
1010ddcc:	0021883a 	mov	r16,zero
1010ddd0:	0029883a 	mov	r20,zero
1010ddd4:	07000044 	movi	fp,1
1010ddd8:	003f6106 	br	1010db60 <__alt_data_end+0xfffedb60>
1010dddc:	04c00304 	movi	r19,12
1010dde0:	070000c4 	movi	fp,3
1010dde4:	003f5e06 	br	1010db60 <__alt_data_end+0xfffedb60>
1010dde8:	01400434 	movhi	r5,16
1010ddec:	002b883a 	mov	r21,zero
1010ddf0:	297fffc4 	addi	r5,r5,-1
1010ddf4:	053fffc4 	movi	r20,-1
1010ddf8:	0081ffc4 	movi	r2,2047
1010ddfc:	003f9806 	br	1010dc60 <__alt_data_end+0xfffedc60>
1010de00:	8023883a 	mov	r17,r16
1010de04:	a011883a 	mov	r8,r20
1010de08:	e00b883a 	mov	r5,fp
1010de0c:	003f8a06 	br	1010dc38 <__alt_data_end+0xfffedc38>
1010de10:	8023883a 	mov	r17,r16
1010de14:	a011883a 	mov	r8,r20
1010de18:	482d883a 	mov	r22,r9
1010de1c:	e00b883a 	mov	r5,fp
1010de20:	003f8506 	br	1010dc38 <__alt_data_end+0xfffedc38>
1010de24:	a00ad43a 	srli	r5,r20,16
1010de28:	401ad43a 	srli	r13,r8,16
1010de2c:	a53fffcc 	andi	r20,r20,65535
1010de30:	423fffcc 	andi	r8,r8,65535
1010de34:	4519383a 	mul	r12,r8,r20
1010de38:	4147383a 	mul	r3,r8,r5
1010de3c:	6d09383a 	mul	r4,r13,r20
1010de40:	600cd43a 	srli	r6,r12,16
1010de44:	2b5d383a 	mul	r14,r5,r13
1010de48:	20c9883a 	add	r4,r4,r3
1010de4c:	310d883a 	add	r6,r6,r4
1010de50:	30c0022e 	bgeu	r6,r3,1010de5c <__muldf3+0x378>
1010de54:	00c00074 	movhi	r3,1
1010de58:	70dd883a 	add	r14,r14,r3
1010de5c:	8826d43a 	srli	r19,r17,16
1010de60:	8bffffcc 	andi	r15,r17,65535
1010de64:	7d23383a 	mul	r17,r15,r20
1010de68:	7949383a 	mul	r4,r15,r5
1010de6c:	9d29383a 	mul	r20,r19,r20
1010de70:	8814d43a 	srli	r10,r17,16
1010de74:	3012943a 	slli	r9,r6,16
1010de78:	a129883a 	add	r20,r20,r4
1010de7c:	633fffcc 	andi	r12,r12,65535
1010de80:	5515883a 	add	r10,r10,r20
1010de84:	3006d43a 	srli	r3,r6,16
1010de88:	4b13883a 	add	r9,r9,r12
1010de8c:	2ccb383a 	mul	r5,r5,r19
1010de90:	5100022e 	bgeu	r10,r4,1010de9c <__muldf3+0x3b8>
1010de94:	01000074 	movhi	r4,1
1010de98:	290b883a 	add	r5,r5,r4
1010de9c:	802ad43a 	srli	r21,r16,16
1010dea0:	843fffcc 	andi	r16,r16,65535
1010dea4:	440d383a 	mul	r6,r8,r16
1010dea8:	4565383a 	mul	r18,r8,r21
1010deac:	8349383a 	mul	r4,r16,r13
1010deb0:	500e943a 	slli	r7,r10,16
1010deb4:	3010d43a 	srli	r8,r6,16
1010deb8:	5028d43a 	srli	r20,r10,16
1010debc:	2489883a 	add	r4,r4,r18
1010dec0:	8abfffcc 	andi	r10,r17,65535
1010dec4:	3a95883a 	add	r10,r7,r10
1010dec8:	4119883a 	add	r12,r8,r4
1010decc:	a169883a 	add	r20,r20,r5
1010ded0:	1a87883a 	add	r3,r3,r10
1010ded4:	6d5b383a 	mul	r13,r13,r21
1010ded8:	6480022e 	bgeu	r12,r18,1010dee4 <__muldf3+0x400>
1010dedc:	01000074 	movhi	r4,1
1010dee0:	691b883a 	add	r13,r13,r4
1010dee4:	7c25383a 	mul	r18,r15,r16
1010dee8:	7d4b383a 	mul	r5,r15,r21
1010deec:	84cf383a 	mul	r7,r16,r19
1010def0:	901ed43a 	srli	r15,r18,16
1010def4:	6008d43a 	srli	r4,r12,16
1010def8:	6010943a 	slli	r8,r12,16
1010defc:	394f883a 	add	r7,r7,r5
1010df00:	333fffcc 	andi	r12,r6,65535
1010df04:	79df883a 	add	r15,r15,r7
1010df08:	235b883a 	add	r13,r4,r13
1010df0c:	9d63383a 	mul	r17,r19,r21
1010df10:	4309883a 	add	r4,r8,r12
1010df14:	7940022e 	bgeu	r15,r5,1010df20 <__muldf3+0x43c>
1010df18:	01400074 	movhi	r5,1
1010df1c:	8963883a 	add	r17,r17,r5
1010df20:	780a943a 	slli	r5,r15,16
1010df24:	91bfffcc 	andi	r6,r18,65535
1010df28:	70c7883a 	add	r3,r14,r3
1010df2c:	298d883a 	add	r6,r5,r6
1010df30:	1a8f803a 	cmpltu	r7,r3,r10
1010df34:	350b883a 	add	r5,r6,r20
1010df38:	20c7883a 	add	r3,r4,r3
1010df3c:	3955883a 	add	r10,r7,r5
1010df40:	1909803a 	cmpltu	r4,r3,r4
1010df44:	6a91883a 	add	r8,r13,r10
1010df48:	780cd43a 	srli	r6,r15,16
1010df4c:	2219883a 	add	r12,r4,r8
1010df50:	2d0b803a 	cmpltu	r5,r5,r20
1010df54:	51cf803a 	cmpltu	r7,r10,r7
1010df58:	29ceb03a 	or	r7,r5,r7
1010df5c:	4351803a 	cmpltu	r8,r8,r13
1010df60:	610b803a 	cmpltu	r5,r12,r4
1010df64:	4148b03a 	or	r4,r8,r5
1010df68:	398f883a 	add	r7,r7,r6
1010df6c:	3909883a 	add	r4,r7,r4
1010df70:	1810927a 	slli	r8,r3,9
1010df74:	2449883a 	add	r4,r4,r17
1010df78:	2008927a 	slli	r4,r4,9
1010df7c:	6022d5fa 	srli	r17,r12,23
1010df80:	1806d5fa 	srli	r3,r3,23
1010df84:	4252b03a 	or	r9,r8,r9
1010df88:	600a927a 	slli	r5,r12,9
1010df8c:	4810c03a 	cmpne	r8,r9,zero
1010df90:	2462b03a 	or	r17,r4,r17
1010df94:	40c6b03a 	or	r3,r8,r3
1010df98:	8900402c 	andhi	r4,r17,256
1010df9c:	1950b03a 	or	r8,r3,r5
1010dfa0:	20000726 	beq	r4,zero,1010dfc0 <__muldf3+0x4dc>
1010dfa4:	4006d07a 	srli	r3,r8,1
1010dfa8:	880497fa 	slli	r2,r17,31
1010dfac:	4200004c 	andi	r8,r8,1
1010dfb0:	8822d07a 	srli	r17,r17,1
1010dfb4:	1a10b03a 	or	r8,r3,r8
1010dfb8:	1210b03a 	or	r8,r2,r8
1010dfbc:	5805883a 	mov	r2,r11
1010dfc0:	1140ffc4 	addi	r5,r2,1023
1010dfc4:	0140440e 	bge	zero,r5,1010e0d8 <__muldf3+0x5f4>
1010dfc8:	40c001cc 	andi	r3,r8,7
1010dfcc:	18000726 	beq	r3,zero,1010dfec <__muldf3+0x508>
1010dfd0:	40c003cc 	andi	r3,r8,15
1010dfd4:	01000104 	movi	r4,4
1010dfd8:	19000426 	beq	r3,r4,1010dfec <__muldf3+0x508>
1010dfdc:	4107883a 	add	r3,r8,r4
1010dfe0:	1a11803a 	cmpltu	r8,r3,r8
1010dfe4:	8a23883a 	add	r17,r17,r8
1010dfe8:	1811883a 	mov	r8,r3
1010dfec:	88c0402c 	andhi	r3,r17,256
1010dff0:	18000426 	beq	r3,zero,1010e004 <__muldf3+0x520>
1010dff4:	11410004 	addi	r5,r2,1024
1010dff8:	00bfc034 	movhi	r2,65280
1010dffc:	10bfffc4 	addi	r2,r2,-1
1010e000:	88a2703a 	and	r17,r17,r2
1010e004:	0081ff84 	movi	r2,2046
1010e008:	117f6416 	blt	r2,r5,1010dd9c <__alt_data_end+0xfffedd9c>
1010e00c:	8828977a 	slli	r20,r17,29
1010e010:	4010d0fa 	srli	r8,r8,3
1010e014:	8822927a 	slli	r17,r17,9
1010e018:	2881ffcc 	andi	r2,r5,2047
1010e01c:	a228b03a 	or	r20,r20,r8
1010e020:	880ad33a 	srli	r5,r17,12
1010e024:	b02b883a 	mov	r21,r22
1010e028:	003f0d06 	br	1010dc60 <__alt_data_end+0xfffedc60>
1010e02c:	8080022c 	andhi	r2,r16,8
1010e030:	10000926 	beq	r2,zero,1010e058 <__muldf3+0x574>
1010e034:	8880022c 	andhi	r2,r17,8
1010e038:	1000071e 	bne	r2,zero,1010e058 <__muldf3+0x574>
1010e03c:	00800434 	movhi	r2,16
1010e040:	89400234 	orhi	r5,r17,8
1010e044:	10bfffc4 	addi	r2,r2,-1
1010e048:	b82b883a 	mov	r21,r23
1010e04c:	288a703a 	and	r5,r5,r2
1010e050:	4029883a 	mov	r20,r8
1010e054:	003f6806 	br	1010ddf8 <__alt_data_end+0xfffeddf8>
1010e058:	00800434 	movhi	r2,16
1010e05c:	81400234 	orhi	r5,r16,8
1010e060:	10bfffc4 	addi	r2,r2,-1
1010e064:	288a703a 	and	r5,r5,r2
1010e068:	003f6306 	br	1010ddf8 <__alt_data_end+0xfffeddf8>
1010e06c:	147ff604 	addi	r17,r2,-40
1010e070:	3462983a 	sll	r17,r6,r17
1010e074:	0011883a 	mov	r8,zero
1010e078:	003f4406 	br	1010dd8c <__alt_data_end+0xfffedd8c>
1010e07c:	3009883a 	mov	r4,r6
1010e080:	d9800215 	stw	r6,8(sp)
1010e084:	da400115 	stw	r9,4(sp)
1010e088:	da800015 	stw	r10,0(sp)
1010e08c:	010ecfc0 	call	1010ecfc <__clzsi2>
1010e090:	10800804 	addi	r2,r2,32
1010e094:	da800017 	ldw	r10,0(sp)
1010e098:	da400117 	ldw	r9,4(sp)
1010e09c:	d9800217 	ldw	r6,8(sp)
1010e0a0:	003f3006 	br	1010dd64 <__alt_data_end+0xfffedd64>
1010e0a4:	143ff604 	addi	r16,r2,-40
1010e0a8:	9c20983a 	sll	r16,r19,r16
1010e0ac:	0029883a 	mov	r20,zero
1010e0b0:	003f1606 	br	1010dd0c <__alt_data_end+0xfffedd0c>
1010e0b4:	d9800215 	stw	r6,8(sp)
1010e0b8:	d9c00015 	stw	r7,0(sp)
1010e0bc:	da400115 	stw	r9,4(sp)
1010e0c0:	010ecfc0 	call	1010ecfc <__clzsi2>
1010e0c4:	10800804 	addi	r2,r2,32
1010e0c8:	da400117 	ldw	r9,4(sp)
1010e0cc:	d9c00017 	ldw	r7,0(sp)
1010e0d0:	d9800217 	ldw	r6,8(sp)
1010e0d4:	003f0306 	br	1010dce4 <__alt_data_end+0xfffedce4>
1010e0d8:	00c00044 	movi	r3,1
1010e0dc:	1947c83a 	sub	r3,r3,r5
1010e0e0:	00800e04 	movi	r2,56
1010e0e4:	10feda16 	blt	r2,r3,1010dc50 <__alt_data_end+0xfffedc50>
1010e0e8:	008007c4 	movi	r2,31
1010e0ec:	10c01b16 	blt	r2,r3,1010e15c <__muldf3+0x678>
1010e0f0:	00800804 	movi	r2,32
1010e0f4:	10c5c83a 	sub	r2,r2,r3
1010e0f8:	888a983a 	sll	r5,r17,r2
1010e0fc:	40c8d83a 	srl	r4,r8,r3
1010e100:	4084983a 	sll	r2,r8,r2
1010e104:	88e2d83a 	srl	r17,r17,r3
1010e108:	2906b03a 	or	r3,r5,r4
1010e10c:	1004c03a 	cmpne	r2,r2,zero
1010e110:	1886b03a 	or	r3,r3,r2
1010e114:	188001cc 	andi	r2,r3,7
1010e118:	10000726 	beq	r2,zero,1010e138 <__muldf3+0x654>
1010e11c:	188003cc 	andi	r2,r3,15
1010e120:	01000104 	movi	r4,4
1010e124:	11000426 	beq	r2,r4,1010e138 <__muldf3+0x654>
1010e128:	1805883a 	mov	r2,r3
1010e12c:	10c00104 	addi	r3,r2,4
1010e130:	1885803a 	cmpltu	r2,r3,r2
1010e134:	88a3883a 	add	r17,r17,r2
1010e138:	8880202c 	andhi	r2,r17,128
1010e13c:	10001c26 	beq	r2,zero,1010e1b0 <__muldf3+0x6cc>
1010e140:	b02b883a 	mov	r21,r22
1010e144:	00800044 	movi	r2,1
1010e148:	000b883a 	mov	r5,zero
1010e14c:	0029883a 	mov	r20,zero
1010e150:	003ec306 	br	1010dc60 <__alt_data_end+0xfffedc60>
1010e154:	5805883a 	mov	r2,r11
1010e158:	003f9906 	br	1010dfc0 <__alt_data_end+0xfffedfc0>
1010e15c:	00bff844 	movi	r2,-31
1010e160:	1145c83a 	sub	r2,r2,r5
1010e164:	8888d83a 	srl	r4,r17,r2
1010e168:	00800804 	movi	r2,32
1010e16c:	18801a26 	beq	r3,r2,1010e1d8 <__muldf3+0x6f4>
1010e170:	00801004 	movi	r2,64
1010e174:	10c5c83a 	sub	r2,r2,r3
1010e178:	8884983a 	sll	r2,r17,r2
1010e17c:	1204b03a 	or	r2,r2,r8
1010e180:	1004c03a 	cmpne	r2,r2,zero
1010e184:	2084b03a 	or	r2,r4,r2
1010e188:	144001cc 	andi	r17,r2,7
1010e18c:	88000d1e 	bne	r17,zero,1010e1c4 <__muldf3+0x6e0>
1010e190:	000b883a 	mov	r5,zero
1010e194:	1028d0fa 	srli	r20,r2,3
1010e198:	b02b883a 	mov	r21,r22
1010e19c:	0005883a 	mov	r2,zero
1010e1a0:	a468b03a 	or	r20,r20,r17
1010e1a4:	003eae06 	br	1010dc60 <__alt_data_end+0xfffedc60>
1010e1a8:	1007883a 	mov	r3,r2
1010e1ac:	0023883a 	mov	r17,zero
1010e1b0:	880a927a 	slli	r5,r17,9
1010e1b4:	1805883a 	mov	r2,r3
1010e1b8:	8822977a 	slli	r17,r17,29
1010e1bc:	280ad33a 	srli	r5,r5,12
1010e1c0:	003ff406 	br	1010e194 <__alt_data_end+0xfffee194>
1010e1c4:	10c003cc 	andi	r3,r2,15
1010e1c8:	01000104 	movi	r4,4
1010e1cc:	193ff626 	beq	r3,r4,1010e1a8 <__alt_data_end+0xfffee1a8>
1010e1d0:	0023883a 	mov	r17,zero
1010e1d4:	003fd506 	br	1010e12c <__alt_data_end+0xfffee12c>
1010e1d8:	0005883a 	mov	r2,zero
1010e1dc:	003fe706 	br	1010e17c <__alt_data_end+0xfffee17c>
1010e1e0:	00800434 	movhi	r2,16
1010e1e4:	89400234 	orhi	r5,r17,8
1010e1e8:	10bfffc4 	addi	r2,r2,-1
1010e1ec:	b02b883a 	mov	r21,r22
1010e1f0:	288a703a 	and	r5,r5,r2
1010e1f4:	4029883a 	mov	r20,r8
1010e1f8:	003eff06 	br	1010ddf8 <__alt_data_end+0xfffeddf8>

1010e1fc <__subdf3>:
1010e1fc:	02000434 	movhi	r8,16
1010e200:	423fffc4 	addi	r8,r8,-1
1010e204:	defffb04 	addi	sp,sp,-20
1010e208:	2a14703a 	and	r10,r5,r8
1010e20c:	3812d53a 	srli	r9,r7,20
1010e210:	3a10703a 	and	r8,r7,r8
1010e214:	2006d77a 	srli	r3,r4,29
1010e218:	3004d77a 	srli	r2,r6,29
1010e21c:	dc000015 	stw	r16,0(sp)
1010e220:	501490fa 	slli	r10,r10,3
1010e224:	2820d53a 	srli	r16,r5,20
1010e228:	401090fa 	slli	r8,r8,3
1010e22c:	dc800215 	stw	r18,8(sp)
1010e230:	dc400115 	stw	r17,4(sp)
1010e234:	dfc00415 	stw	ra,16(sp)
1010e238:	202290fa 	slli	r17,r4,3
1010e23c:	dcc00315 	stw	r19,12(sp)
1010e240:	4a41ffcc 	andi	r9,r9,2047
1010e244:	0101ffc4 	movi	r4,2047
1010e248:	2824d7fa 	srli	r18,r5,31
1010e24c:	8401ffcc 	andi	r16,r16,2047
1010e250:	50c6b03a 	or	r3,r10,r3
1010e254:	380ed7fa 	srli	r7,r7,31
1010e258:	408ab03a 	or	r5,r8,r2
1010e25c:	300c90fa 	slli	r6,r6,3
1010e260:	49009626 	beq	r9,r4,1010e4bc <__subdf3+0x2c0>
1010e264:	39c0005c 	xori	r7,r7,1
1010e268:	8245c83a 	sub	r2,r16,r9
1010e26c:	3c807426 	beq	r7,r18,1010e440 <__subdf3+0x244>
1010e270:	0080af0e 	bge	zero,r2,1010e530 <__subdf3+0x334>
1010e274:	48002a1e 	bne	r9,zero,1010e320 <__subdf3+0x124>
1010e278:	2988b03a 	or	r4,r5,r6
1010e27c:	20009a1e 	bne	r4,zero,1010e4e8 <__subdf3+0x2ec>
1010e280:	888001cc 	andi	r2,r17,7
1010e284:	10000726 	beq	r2,zero,1010e2a4 <__subdf3+0xa8>
1010e288:	888003cc 	andi	r2,r17,15
1010e28c:	01000104 	movi	r4,4
1010e290:	11000426 	beq	r2,r4,1010e2a4 <__subdf3+0xa8>
1010e294:	890b883a 	add	r5,r17,r4
1010e298:	2c63803a 	cmpltu	r17,r5,r17
1010e29c:	1c47883a 	add	r3,r3,r17
1010e2a0:	2823883a 	mov	r17,r5
1010e2a4:	1880202c 	andhi	r2,r3,128
1010e2a8:	10005926 	beq	r2,zero,1010e410 <__subdf3+0x214>
1010e2ac:	84000044 	addi	r16,r16,1
1010e2b0:	0081ffc4 	movi	r2,2047
1010e2b4:	8080be26 	beq	r16,r2,1010e5b0 <__subdf3+0x3b4>
1010e2b8:	017fe034 	movhi	r5,65408
1010e2bc:	297fffc4 	addi	r5,r5,-1
1010e2c0:	1946703a 	and	r3,r3,r5
1010e2c4:	1804977a 	slli	r2,r3,29
1010e2c8:	1806927a 	slli	r3,r3,9
1010e2cc:	8822d0fa 	srli	r17,r17,3
1010e2d0:	8401ffcc 	andi	r16,r16,2047
1010e2d4:	180ad33a 	srli	r5,r3,12
1010e2d8:	9100004c 	andi	r4,r18,1
1010e2dc:	1444b03a 	or	r2,r2,r17
1010e2e0:	80c1ffcc 	andi	r3,r16,2047
1010e2e4:	1820953a 	slli	r16,r3,20
1010e2e8:	20c03fcc 	andi	r3,r4,255
1010e2ec:	180897fa 	slli	r4,r3,31
1010e2f0:	00c00434 	movhi	r3,16
1010e2f4:	18ffffc4 	addi	r3,r3,-1
1010e2f8:	28c6703a 	and	r3,r5,r3
1010e2fc:	1c06b03a 	or	r3,r3,r16
1010e300:	1906b03a 	or	r3,r3,r4
1010e304:	dfc00417 	ldw	ra,16(sp)
1010e308:	dcc00317 	ldw	r19,12(sp)
1010e30c:	dc800217 	ldw	r18,8(sp)
1010e310:	dc400117 	ldw	r17,4(sp)
1010e314:	dc000017 	ldw	r16,0(sp)
1010e318:	dec00504 	addi	sp,sp,20
1010e31c:	f800283a 	ret
1010e320:	0101ffc4 	movi	r4,2047
1010e324:	813fd626 	beq	r16,r4,1010e280 <__alt_data_end+0xfffee280>
1010e328:	29402034 	orhi	r5,r5,128
1010e32c:	01000e04 	movi	r4,56
1010e330:	2080a316 	blt	r4,r2,1010e5c0 <__subdf3+0x3c4>
1010e334:	010007c4 	movi	r4,31
1010e338:	2080c616 	blt	r4,r2,1010e654 <__subdf3+0x458>
1010e33c:	01000804 	movi	r4,32
1010e340:	2089c83a 	sub	r4,r4,r2
1010e344:	2910983a 	sll	r8,r5,r4
1010e348:	308ed83a 	srl	r7,r6,r2
1010e34c:	3108983a 	sll	r4,r6,r4
1010e350:	2884d83a 	srl	r2,r5,r2
1010e354:	41ccb03a 	or	r6,r8,r7
1010e358:	2008c03a 	cmpne	r4,r4,zero
1010e35c:	310cb03a 	or	r6,r6,r4
1010e360:	898dc83a 	sub	r6,r17,r6
1010e364:	89a3803a 	cmpltu	r17,r17,r6
1010e368:	1887c83a 	sub	r3,r3,r2
1010e36c:	1c47c83a 	sub	r3,r3,r17
1010e370:	3023883a 	mov	r17,r6
1010e374:	1880202c 	andhi	r2,r3,128
1010e378:	10002326 	beq	r2,zero,1010e408 <__subdf3+0x20c>
1010e37c:	04c02034 	movhi	r19,128
1010e380:	9cffffc4 	addi	r19,r19,-1
1010e384:	1ce6703a 	and	r19,r3,r19
1010e388:	98007a26 	beq	r19,zero,1010e574 <__subdf3+0x378>
1010e38c:	9809883a 	mov	r4,r19
1010e390:	010ecfc0 	call	1010ecfc <__clzsi2>
1010e394:	113ffe04 	addi	r4,r2,-8
1010e398:	00c007c4 	movi	r3,31
1010e39c:	19007b16 	blt	r3,r4,1010e58c <__subdf3+0x390>
1010e3a0:	00800804 	movi	r2,32
1010e3a4:	1105c83a 	sub	r2,r2,r4
1010e3a8:	8884d83a 	srl	r2,r17,r2
1010e3ac:	9906983a 	sll	r3,r19,r4
1010e3b0:	8922983a 	sll	r17,r17,r4
1010e3b4:	10c4b03a 	or	r2,r2,r3
1010e3b8:	24007816 	blt	r4,r16,1010e59c <__subdf3+0x3a0>
1010e3bc:	2421c83a 	sub	r16,r4,r16
1010e3c0:	80c00044 	addi	r3,r16,1
1010e3c4:	010007c4 	movi	r4,31
1010e3c8:	20c09516 	blt	r4,r3,1010e620 <__subdf3+0x424>
1010e3cc:	01400804 	movi	r5,32
1010e3d0:	28cbc83a 	sub	r5,r5,r3
1010e3d4:	88c8d83a 	srl	r4,r17,r3
1010e3d8:	8962983a 	sll	r17,r17,r5
1010e3dc:	114a983a 	sll	r5,r2,r5
1010e3e0:	10c6d83a 	srl	r3,r2,r3
1010e3e4:	8804c03a 	cmpne	r2,r17,zero
1010e3e8:	290ab03a 	or	r5,r5,r4
1010e3ec:	28a2b03a 	or	r17,r5,r2
1010e3f0:	0021883a 	mov	r16,zero
1010e3f4:	003fa206 	br	1010e280 <__alt_data_end+0xfffee280>
1010e3f8:	2090b03a 	or	r8,r4,r2
1010e3fc:	40018e26 	beq	r8,zero,1010ea38 <__subdf3+0x83c>
1010e400:	1007883a 	mov	r3,r2
1010e404:	2023883a 	mov	r17,r4
1010e408:	888001cc 	andi	r2,r17,7
1010e40c:	103f9e1e 	bne	r2,zero,1010e288 <__alt_data_end+0xfffee288>
1010e410:	1804977a 	slli	r2,r3,29
1010e414:	8822d0fa 	srli	r17,r17,3
1010e418:	1810d0fa 	srli	r8,r3,3
1010e41c:	9100004c 	andi	r4,r18,1
1010e420:	1444b03a 	or	r2,r2,r17
1010e424:	00c1ffc4 	movi	r3,2047
1010e428:	80c02826 	beq	r16,r3,1010e4cc <__subdf3+0x2d0>
1010e42c:	01400434 	movhi	r5,16
1010e430:	297fffc4 	addi	r5,r5,-1
1010e434:	80e0703a 	and	r16,r16,r3
1010e438:	414a703a 	and	r5,r8,r5
1010e43c:	003fa806 	br	1010e2e0 <__alt_data_end+0xfffee2e0>
1010e440:	0080630e 	bge	zero,r2,1010e5d0 <__subdf3+0x3d4>
1010e444:	48003026 	beq	r9,zero,1010e508 <__subdf3+0x30c>
1010e448:	0101ffc4 	movi	r4,2047
1010e44c:	813f8c26 	beq	r16,r4,1010e280 <__alt_data_end+0xfffee280>
1010e450:	29402034 	orhi	r5,r5,128
1010e454:	01000e04 	movi	r4,56
1010e458:	2080a90e 	bge	r4,r2,1010e700 <__subdf3+0x504>
1010e45c:	298cb03a 	or	r6,r5,r6
1010e460:	3012c03a 	cmpne	r9,r6,zero
1010e464:	0005883a 	mov	r2,zero
1010e468:	4c53883a 	add	r9,r9,r17
1010e46c:	4c63803a 	cmpltu	r17,r9,r17
1010e470:	10c7883a 	add	r3,r2,r3
1010e474:	88c7883a 	add	r3,r17,r3
1010e478:	4823883a 	mov	r17,r9
1010e47c:	1880202c 	andhi	r2,r3,128
1010e480:	1000d026 	beq	r2,zero,1010e7c4 <__subdf3+0x5c8>
1010e484:	84000044 	addi	r16,r16,1
1010e488:	0081ffc4 	movi	r2,2047
1010e48c:	8080fe26 	beq	r16,r2,1010e888 <__subdf3+0x68c>
1010e490:	00bfe034 	movhi	r2,65408
1010e494:	10bfffc4 	addi	r2,r2,-1
1010e498:	1886703a 	and	r3,r3,r2
1010e49c:	880ad07a 	srli	r5,r17,1
1010e4a0:	180497fa 	slli	r2,r3,31
1010e4a4:	8900004c 	andi	r4,r17,1
1010e4a8:	2922b03a 	or	r17,r5,r4
1010e4ac:	1806d07a 	srli	r3,r3,1
1010e4b0:	1462b03a 	or	r17,r2,r17
1010e4b4:	3825883a 	mov	r18,r7
1010e4b8:	003f7106 	br	1010e280 <__alt_data_end+0xfffee280>
1010e4bc:	2984b03a 	or	r2,r5,r6
1010e4c0:	103f6826 	beq	r2,zero,1010e264 <__alt_data_end+0xfffee264>
1010e4c4:	39c03fcc 	andi	r7,r7,255
1010e4c8:	003f6706 	br	1010e268 <__alt_data_end+0xfffee268>
1010e4cc:	4086b03a 	or	r3,r8,r2
1010e4d0:	18015226 	beq	r3,zero,1010ea1c <__subdf3+0x820>
1010e4d4:	00c00434 	movhi	r3,16
1010e4d8:	41400234 	orhi	r5,r8,8
1010e4dc:	18ffffc4 	addi	r3,r3,-1
1010e4e0:	28ca703a 	and	r5,r5,r3
1010e4e4:	003f7e06 	br	1010e2e0 <__alt_data_end+0xfffee2e0>
1010e4e8:	10bfffc4 	addi	r2,r2,-1
1010e4ec:	1000491e 	bne	r2,zero,1010e614 <__subdf3+0x418>
1010e4f0:	898fc83a 	sub	r7,r17,r6
1010e4f4:	89e3803a 	cmpltu	r17,r17,r7
1010e4f8:	1947c83a 	sub	r3,r3,r5
1010e4fc:	1c47c83a 	sub	r3,r3,r17
1010e500:	3823883a 	mov	r17,r7
1010e504:	003f9b06 	br	1010e374 <__alt_data_end+0xfffee374>
1010e508:	2988b03a 	or	r4,r5,r6
1010e50c:	203f5c26 	beq	r4,zero,1010e280 <__alt_data_end+0xfffee280>
1010e510:	10bfffc4 	addi	r2,r2,-1
1010e514:	1000931e 	bne	r2,zero,1010e764 <__subdf3+0x568>
1010e518:	898d883a 	add	r6,r17,r6
1010e51c:	3463803a 	cmpltu	r17,r6,r17
1010e520:	1947883a 	add	r3,r3,r5
1010e524:	88c7883a 	add	r3,r17,r3
1010e528:	3023883a 	mov	r17,r6
1010e52c:	003fd306 	br	1010e47c <__alt_data_end+0xfffee47c>
1010e530:	1000541e 	bne	r2,zero,1010e684 <__subdf3+0x488>
1010e534:	80800044 	addi	r2,r16,1
1010e538:	1081ffcc 	andi	r2,r2,2047
1010e53c:	01000044 	movi	r4,1
1010e540:	2080a20e 	bge	r4,r2,1010e7cc <__subdf3+0x5d0>
1010e544:	8989c83a 	sub	r4,r17,r6
1010e548:	8905803a 	cmpltu	r2,r17,r4
1010e54c:	1967c83a 	sub	r19,r3,r5
1010e550:	98a7c83a 	sub	r19,r19,r2
1010e554:	9880202c 	andhi	r2,r19,128
1010e558:	10006326 	beq	r2,zero,1010e6e8 <__subdf3+0x4ec>
1010e55c:	3463c83a 	sub	r17,r6,r17
1010e560:	28c7c83a 	sub	r3,r5,r3
1010e564:	344d803a 	cmpltu	r6,r6,r17
1010e568:	19a7c83a 	sub	r19,r3,r6
1010e56c:	3825883a 	mov	r18,r7
1010e570:	983f861e 	bne	r19,zero,1010e38c <__alt_data_end+0xfffee38c>
1010e574:	8809883a 	mov	r4,r17
1010e578:	010ecfc0 	call	1010ecfc <__clzsi2>
1010e57c:	10800804 	addi	r2,r2,32
1010e580:	113ffe04 	addi	r4,r2,-8
1010e584:	00c007c4 	movi	r3,31
1010e588:	193f850e 	bge	r3,r4,1010e3a0 <__alt_data_end+0xfffee3a0>
1010e58c:	10bff604 	addi	r2,r2,-40
1010e590:	8884983a 	sll	r2,r17,r2
1010e594:	0023883a 	mov	r17,zero
1010e598:	243f880e 	bge	r4,r16,1010e3bc <__alt_data_end+0xfffee3bc>
1010e59c:	00ffe034 	movhi	r3,65408
1010e5a0:	18ffffc4 	addi	r3,r3,-1
1010e5a4:	8121c83a 	sub	r16,r16,r4
1010e5a8:	10c6703a 	and	r3,r2,r3
1010e5ac:	003f3406 	br	1010e280 <__alt_data_end+0xfffee280>
1010e5b0:	9100004c 	andi	r4,r18,1
1010e5b4:	000b883a 	mov	r5,zero
1010e5b8:	0005883a 	mov	r2,zero
1010e5bc:	003f4806 	br	1010e2e0 <__alt_data_end+0xfffee2e0>
1010e5c0:	298cb03a 	or	r6,r5,r6
1010e5c4:	300cc03a 	cmpne	r6,r6,zero
1010e5c8:	0005883a 	mov	r2,zero
1010e5cc:	003f6406 	br	1010e360 <__alt_data_end+0xfffee360>
1010e5d0:	10009a1e 	bne	r2,zero,1010e83c <__subdf3+0x640>
1010e5d4:	82400044 	addi	r9,r16,1
1010e5d8:	4881ffcc 	andi	r2,r9,2047
1010e5dc:	02800044 	movi	r10,1
1010e5e0:	5080670e 	bge	r10,r2,1010e780 <__subdf3+0x584>
1010e5e4:	0081ffc4 	movi	r2,2047
1010e5e8:	4880af26 	beq	r9,r2,1010e8a8 <__subdf3+0x6ac>
1010e5ec:	898d883a 	add	r6,r17,r6
1010e5f0:	1945883a 	add	r2,r3,r5
1010e5f4:	3447803a 	cmpltu	r3,r6,r17
1010e5f8:	1887883a 	add	r3,r3,r2
1010e5fc:	182297fa 	slli	r17,r3,31
1010e600:	300cd07a 	srli	r6,r6,1
1010e604:	1806d07a 	srli	r3,r3,1
1010e608:	4821883a 	mov	r16,r9
1010e60c:	89a2b03a 	or	r17,r17,r6
1010e610:	003f1b06 	br	1010e280 <__alt_data_end+0xfffee280>
1010e614:	0101ffc4 	movi	r4,2047
1010e618:	813f441e 	bne	r16,r4,1010e32c <__alt_data_end+0xfffee32c>
1010e61c:	003f1806 	br	1010e280 <__alt_data_end+0xfffee280>
1010e620:	843ff844 	addi	r16,r16,-31
1010e624:	01400804 	movi	r5,32
1010e628:	1408d83a 	srl	r4,r2,r16
1010e62c:	19405026 	beq	r3,r5,1010e770 <__subdf3+0x574>
1010e630:	01401004 	movi	r5,64
1010e634:	28c7c83a 	sub	r3,r5,r3
1010e638:	10c4983a 	sll	r2,r2,r3
1010e63c:	88a2b03a 	or	r17,r17,r2
1010e640:	8822c03a 	cmpne	r17,r17,zero
1010e644:	2462b03a 	or	r17,r4,r17
1010e648:	0007883a 	mov	r3,zero
1010e64c:	0021883a 	mov	r16,zero
1010e650:	003f6d06 	br	1010e408 <__alt_data_end+0xfffee408>
1010e654:	11fff804 	addi	r7,r2,-32
1010e658:	01000804 	movi	r4,32
1010e65c:	29ced83a 	srl	r7,r5,r7
1010e660:	11004526 	beq	r2,r4,1010e778 <__subdf3+0x57c>
1010e664:	01001004 	movi	r4,64
1010e668:	2089c83a 	sub	r4,r4,r2
1010e66c:	2904983a 	sll	r2,r5,r4
1010e670:	118cb03a 	or	r6,r2,r6
1010e674:	300cc03a 	cmpne	r6,r6,zero
1010e678:	398cb03a 	or	r6,r7,r6
1010e67c:	0005883a 	mov	r2,zero
1010e680:	003f3706 	br	1010e360 <__alt_data_end+0xfffee360>
1010e684:	80002a26 	beq	r16,zero,1010e730 <__subdf3+0x534>
1010e688:	0101ffc4 	movi	r4,2047
1010e68c:	49006626 	beq	r9,r4,1010e828 <__subdf3+0x62c>
1010e690:	0085c83a 	sub	r2,zero,r2
1010e694:	18c02034 	orhi	r3,r3,128
1010e698:	01000e04 	movi	r4,56
1010e69c:	20807e16 	blt	r4,r2,1010e898 <__subdf3+0x69c>
1010e6a0:	010007c4 	movi	r4,31
1010e6a4:	2080e716 	blt	r4,r2,1010ea44 <__subdf3+0x848>
1010e6a8:	01000804 	movi	r4,32
1010e6ac:	2089c83a 	sub	r4,r4,r2
1010e6b0:	1914983a 	sll	r10,r3,r4
1010e6b4:	8890d83a 	srl	r8,r17,r2
1010e6b8:	8908983a 	sll	r4,r17,r4
1010e6bc:	1884d83a 	srl	r2,r3,r2
1010e6c0:	5222b03a 	or	r17,r10,r8
1010e6c4:	2006c03a 	cmpne	r3,r4,zero
1010e6c8:	88e2b03a 	or	r17,r17,r3
1010e6cc:	3463c83a 	sub	r17,r6,r17
1010e6d0:	2885c83a 	sub	r2,r5,r2
1010e6d4:	344d803a 	cmpltu	r6,r6,r17
1010e6d8:	1187c83a 	sub	r3,r2,r6
1010e6dc:	4821883a 	mov	r16,r9
1010e6e0:	3825883a 	mov	r18,r7
1010e6e4:	003f2306 	br	1010e374 <__alt_data_end+0xfffee374>
1010e6e8:	24d0b03a 	or	r8,r4,r19
1010e6ec:	40001b1e 	bne	r8,zero,1010e75c <__subdf3+0x560>
1010e6f0:	0005883a 	mov	r2,zero
1010e6f4:	0009883a 	mov	r4,zero
1010e6f8:	0021883a 	mov	r16,zero
1010e6fc:	003f4906 	br	1010e424 <__alt_data_end+0xfffee424>
1010e700:	010007c4 	movi	r4,31
1010e704:	20803a16 	blt	r4,r2,1010e7f0 <__subdf3+0x5f4>
1010e708:	01000804 	movi	r4,32
1010e70c:	2089c83a 	sub	r4,r4,r2
1010e710:	2912983a 	sll	r9,r5,r4
1010e714:	3090d83a 	srl	r8,r6,r2
1010e718:	3108983a 	sll	r4,r6,r4
1010e71c:	2884d83a 	srl	r2,r5,r2
1010e720:	4a12b03a 	or	r9,r9,r8
1010e724:	2008c03a 	cmpne	r4,r4,zero
1010e728:	4912b03a 	or	r9,r9,r4
1010e72c:	003f4e06 	br	1010e468 <__alt_data_end+0xfffee468>
1010e730:	1c48b03a 	or	r4,r3,r17
1010e734:	20003c26 	beq	r4,zero,1010e828 <__subdf3+0x62c>
1010e738:	0084303a 	nor	r2,zero,r2
1010e73c:	1000381e 	bne	r2,zero,1010e820 <__subdf3+0x624>
1010e740:	3463c83a 	sub	r17,r6,r17
1010e744:	28c5c83a 	sub	r2,r5,r3
1010e748:	344d803a 	cmpltu	r6,r6,r17
1010e74c:	1187c83a 	sub	r3,r2,r6
1010e750:	4821883a 	mov	r16,r9
1010e754:	3825883a 	mov	r18,r7
1010e758:	003f0606 	br	1010e374 <__alt_data_end+0xfffee374>
1010e75c:	2023883a 	mov	r17,r4
1010e760:	003f0906 	br	1010e388 <__alt_data_end+0xfffee388>
1010e764:	0101ffc4 	movi	r4,2047
1010e768:	813f3a1e 	bne	r16,r4,1010e454 <__alt_data_end+0xfffee454>
1010e76c:	003ec406 	br	1010e280 <__alt_data_end+0xfffee280>
1010e770:	0005883a 	mov	r2,zero
1010e774:	003fb106 	br	1010e63c <__alt_data_end+0xfffee63c>
1010e778:	0005883a 	mov	r2,zero
1010e77c:	003fbc06 	br	1010e670 <__alt_data_end+0xfffee670>
1010e780:	1c44b03a 	or	r2,r3,r17
1010e784:	80008e1e 	bne	r16,zero,1010e9c0 <__subdf3+0x7c4>
1010e788:	1000c826 	beq	r2,zero,1010eaac <__subdf3+0x8b0>
1010e78c:	2984b03a 	or	r2,r5,r6
1010e790:	103ebb26 	beq	r2,zero,1010e280 <__alt_data_end+0xfffee280>
1010e794:	8989883a 	add	r4,r17,r6
1010e798:	1945883a 	add	r2,r3,r5
1010e79c:	2447803a 	cmpltu	r3,r4,r17
1010e7a0:	1887883a 	add	r3,r3,r2
1010e7a4:	1880202c 	andhi	r2,r3,128
1010e7a8:	2023883a 	mov	r17,r4
1010e7ac:	103f1626 	beq	r2,zero,1010e408 <__alt_data_end+0xfffee408>
1010e7b0:	00bfe034 	movhi	r2,65408
1010e7b4:	10bfffc4 	addi	r2,r2,-1
1010e7b8:	5021883a 	mov	r16,r10
1010e7bc:	1886703a 	and	r3,r3,r2
1010e7c0:	003eaf06 	br	1010e280 <__alt_data_end+0xfffee280>
1010e7c4:	3825883a 	mov	r18,r7
1010e7c8:	003f0f06 	br	1010e408 <__alt_data_end+0xfffee408>
1010e7cc:	1c44b03a 	or	r2,r3,r17
1010e7d0:	8000251e 	bne	r16,zero,1010e868 <__subdf3+0x66c>
1010e7d4:	1000661e 	bne	r2,zero,1010e970 <__subdf3+0x774>
1010e7d8:	2990b03a 	or	r8,r5,r6
1010e7dc:	40009626 	beq	r8,zero,1010ea38 <__subdf3+0x83c>
1010e7e0:	2807883a 	mov	r3,r5
1010e7e4:	3023883a 	mov	r17,r6
1010e7e8:	3825883a 	mov	r18,r7
1010e7ec:	003ea406 	br	1010e280 <__alt_data_end+0xfffee280>
1010e7f0:	127ff804 	addi	r9,r2,-32
1010e7f4:	01000804 	movi	r4,32
1010e7f8:	2a52d83a 	srl	r9,r5,r9
1010e7fc:	11008c26 	beq	r2,r4,1010ea30 <__subdf3+0x834>
1010e800:	01001004 	movi	r4,64
1010e804:	2085c83a 	sub	r2,r4,r2
1010e808:	2884983a 	sll	r2,r5,r2
1010e80c:	118cb03a 	or	r6,r2,r6
1010e810:	300cc03a 	cmpne	r6,r6,zero
1010e814:	4992b03a 	or	r9,r9,r6
1010e818:	0005883a 	mov	r2,zero
1010e81c:	003f1206 	br	1010e468 <__alt_data_end+0xfffee468>
1010e820:	0101ffc4 	movi	r4,2047
1010e824:	493f9c1e 	bne	r9,r4,1010e698 <__alt_data_end+0xfffee698>
1010e828:	2807883a 	mov	r3,r5
1010e82c:	3023883a 	mov	r17,r6
1010e830:	4821883a 	mov	r16,r9
1010e834:	3825883a 	mov	r18,r7
1010e838:	003e9106 	br	1010e280 <__alt_data_end+0xfffee280>
1010e83c:	80001f1e 	bne	r16,zero,1010e8bc <__subdf3+0x6c0>
1010e840:	1c48b03a 	or	r4,r3,r17
1010e844:	20005a26 	beq	r4,zero,1010e9b0 <__subdf3+0x7b4>
1010e848:	0084303a 	nor	r2,zero,r2
1010e84c:	1000561e 	bne	r2,zero,1010e9a8 <__subdf3+0x7ac>
1010e850:	89a3883a 	add	r17,r17,r6
1010e854:	1945883a 	add	r2,r3,r5
1010e858:	898d803a 	cmpltu	r6,r17,r6
1010e85c:	3087883a 	add	r3,r6,r2
1010e860:	4821883a 	mov	r16,r9
1010e864:	003f0506 	br	1010e47c <__alt_data_end+0xfffee47c>
1010e868:	10002b1e 	bne	r2,zero,1010e918 <__subdf3+0x71c>
1010e86c:	2984b03a 	or	r2,r5,r6
1010e870:	10008026 	beq	r2,zero,1010ea74 <__subdf3+0x878>
1010e874:	2807883a 	mov	r3,r5
1010e878:	3023883a 	mov	r17,r6
1010e87c:	3825883a 	mov	r18,r7
1010e880:	0401ffc4 	movi	r16,2047
1010e884:	003e7e06 	br	1010e280 <__alt_data_end+0xfffee280>
1010e888:	3809883a 	mov	r4,r7
1010e88c:	0011883a 	mov	r8,zero
1010e890:	0005883a 	mov	r2,zero
1010e894:	003ee306 	br	1010e424 <__alt_data_end+0xfffee424>
1010e898:	1c62b03a 	or	r17,r3,r17
1010e89c:	8822c03a 	cmpne	r17,r17,zero
1010e8a0:	0005883a 	mov	r2,zero
1010e8a4:	003f8906 	br	1010e6cc <__alt_data_end+0xfffee6cc>
1010e8a8:	3809883a 	mov	r4,r7
1010e8ac:	4821883a 	mov	r16,r9
1010e8b0:	0011883a 	mov	r8,zero
1010e8b4:	0005883a 	mov	r2,zero
1010e8b8:	003eda06 	br	1010e424 <__alt_data_end+0xfffee424>
1010e8bc:	0101ffc4 	movi	r4,2047
1010e8c0:	49003b26 	beq	r9,r4,1010e9b0 <__subdf3+0x7b4>
1010e8c4:	0085c83a 	sub	r2,zero,r2
1010e8c8:	18c02034 	orhi	r3,r3,128
1010e8cc:	01000e04 	movi	r4,56
1010e8d0:	20806e16 	blt	r4,r2,1010ea8c <__subdf3+0x890>
1010e8d4:	010007c4 	movi	r4,31
1010e8d8:	20807716 	blt	r4,r2,1010eab8 <__subdf3+0x8bc>
1010e8dc:	01000804 	movi	r4,32
1010e8e0:	2089c83a 	sub	r4,r4,r2
1010e8e4:	1914983a 	sll	r10,r3,r4
1010e8e8:	8890d83a 	srl	r8,r17,r2
1010e8ec:	8908983a 	sll	r4,r17,r4
1010e8f0:	1884d83a 	srl	r2,r3,r2
1010e8f4:	5222b03a 	or	r17,r10,r8
1010e8f8:	2006c03a 	cmpne	r3,r4,zero
1010e8fc:	88e2b03a 	or	r17,r17,r3
1010e900:	89a3883a 	add	r17,r17,r6
1010e904:	1145883a 	add	r2,r2,r5
1010e908:	898d803a 	cmpltu	r6,r17,r6
1010e90c:	3087883a 	add	r3,r6,r2
1010e910:	4821883a 	mov	r16,r9
1010e914:	003ed906 	br	1010e47c <__alt_data_end+0xfffee47c>
1010e918:	2984b03a 	or	r2,r5,r6
1010e91c:	10004226 	beq	r2,zero,1010ea28 <__subdf3+0x82c>
1010e920:	1808d0fa 	srli	r4,r3,3
1010e924:	8822d0fa 	srli	r17,r17,3
1010e928:	1806977a 	slli	r3,r3,29
1010e92c:	2080022c 	andhi	r2,r4,8
1010e930:	1c62b03a 	or	r17,r3,r17
1010e934:	10000826 	beq	r2,zero,1010e958 <__subdf3+0x75c>
1010e938:	2812d0fa 	srli	r9,r5,3
1010e93c:	4880022c 	andhi	r2,r9,8
1010e940:	1000051e 	bne	r2,zero,1010e958 <__subdf3+0x75c>
1010e944:	300cd0fa 	srli	r6,r6,3
1010e948:	2804977a 	slli	r2,r5,29
1010e94c:	4809883a 	mov	r4,r9
1010e950:	3825883a 	mov	r18,r7
1010e954:	11a2b03a 	or	r17,r2,r6
1010e958:	8806d77a 	srli	r3,r17,29
1010e95c:	200890fa 	slli	r4,r4,3
1010e960:	882290fa 	slli	r17,r17,3
1010e964:	0401ffc4 	movi	r16,2047
1010e968:	1906b03a 	or	r3,r3,r4
1010e96c:	003e4406 	br	1010e280 <__alt_data_end+0xfffee280>
1010e970:	2984b03a 	or	r2,r5,r6
1010e974:	103e4226 	beq	r2,zero,1010e280 <__alt_data_end+0xfffee280>
1010e978:	8989c83a 	sub	r4,r17,r6
1010e97c:	8911803a 	cmpltu	r8,r17,r4
1010e980:	1945c83a 	sub	r2,r3,r5
1010e984:	1205c83a 	sub	r2,r2,r8
1010e988:	1200202c 	andhi	r8,r2,128
1010e98c:	403e9a26 	beq	r8,zero,1010e3f8 <__alt_data_end+0xfffee3f8>
1010e990:	3463c83a 	sub	r17,r6,r17
1010e994:	28c5c83a 	sub	r2,r5,r3
1010e998:	344d803a 	cmpltu	r6,r6,r17
1010e99c:	1187c83a 	sub	r3,r2,r6
1010e9a0:	3825883a 	mov	r18,r7
1010e9a4:	003e3606 	br	1010e280 <__alt_data_end+0xfffee280>
1010e9a8:	0101ffc4 	movi	r4,2047
1010e9ac:	493fc71e 	bne	r9,r4,1010e8cc <__alt_data_end+0xfffee8cc>
1010e9b0:	2807883a 	mov	r3,r5
1010e9b4:	3023883a 	mov	r17,r6
1010e9b8:	4821883a 	mov	r16,r9
1010e9bc:	003e3006 	br	1010e280 <__alt_data_end+0xfffee280>
1010e9c0:	10003626 	beq	r2,zero,1010ea9c <__subdf3+0x8a0>
1010e9c4:	2984b03a 	or	r2,r5,r6
1010e9c8:	10001726 	beq	r2,zero,1010ea28 <__subdf3+0x82c>
1010e9cc:	1808d0fa 	srli	r4,r3,3
1010e9d0:	8822d0fa 	srli	r17,r17,3
1010e9d4:	1806977a 	slli	r3,r3,29
1010e9d8:	2080022c 	andhi	r2,r4,8
1010e9dc:	1c62b03a 	or	r17,r3,r17
1010e9e0:	10000726 	beq	r2,zero,1010ea00 <__subdf3+0x804>
1010e9e4:	2812d0fa 	srli	r9,r5,3
1010e9e8:	4880022c 	andhi	r2,r9,8
1010e9ec:	1000041e 	bne	r2,zero,1010ea00 <__subdf3+0x804>
1010e9f0:	300cd0fa 	srli	r6,r6,3
1010e9f4:	2804977a 	slli	r2,r5,29
1010e9f8:	4809883a 	mov	r4,r9
1010e9fc:	11a2b03a 	or	r17,r2,r6
1010ea00:	8806d77a 	srli	r3,r17,29
1010ea04:	200890fa 	slli	r4,r4,3
1010ea08:	882290fa 	slli	r17,r17,3
1010ea0c:	3825883a 	mov	r18,r7
1010ea10:	1906b03a 	or	r3,r3,r4
1010ea14:	0401ffc4 	movi	r16,2047
1010ea18:	003e1906 	br	1010e280 <__alt_data_end+0xfffee280>
1010ea1c:	000b883a 	mov	r5,zero
1010ea20:	0005883a 	mov	r2,zero
1010ea24:	003e2e06 	br	1010e2e0 <__alt_data_end+0xfffee2e0>
1010ea28:	0401ffc4 	movi	r16,2047
1010ea2c:	003e1406 	br	1010e280 <__alt_data_end+0xfffee280>
1010ea30:	0005883a 	mov	r2,zero
1010ea34:	003f7506 	br	1010e80c <__alt_data_end+0xfffee80c>
1010ea38:	0005883a 	mov	r2,zero
1010ea3c:	0009883a 	mov	r4,zero
1010ea40:	003e7806 	br	1010e424 <__alt_data_end+0xfffee424>
1010ea44:	123ff804 	addi	r8,r2,-32
1010ea48:	01000804 	movi	r4,32
1010ea4c:	1a10d83a 	srl	r8,r3,r8
1010ea50:	11002526 	beq	r2,r4,1010eae8 <__subdf3+0x8ec>
1010ea54:	01001004 	movi	r4,64
1010ea58:	2085c83a 	sub	r2,r4,r2
1010ea5c:	1884983a 	sll	r2,r3,r2
1010ea60:	1444b03a 	or	r2,r2,r17
1010ea64:	1004c03a 	cmpne	r2,r2,zero
1010ea68:	40a2b03a 	or	r17,r8,r2
1010ea6c:	0005883a 	mov	r2,zero
1010ea70:	003f1606 	br	1010e6cc <__alt_data_end+0xfffee6cc>
1010ea74:	02000434 	movhi	r8,16
1010ea78:	0009883a 	mov	r4,zero
1010ea7c:	423fffc4 	addi	r8,r8,-1
1010ea80:	00bfffc4 	movi	r2,-1
1010ea84:	0401ffc4 	movi	r16,2047
1010ea88:	003e6606 	br	1010e424 <__alt_data_end+0xfffee424>
1010ea8c:	1c62b03a 	or	r17,r3,r17
1010ea90:	8822c03a 	cmpne	r17,r17,zero
1010ea94:	0005883a 	mov	r2,zero
1010ea98:	003f9906 	br	1010e900 <__alt_data_end+0xfffee900>
1010ea9c:	2807883a 	mov	r3,r5
1010eaa0:	3023883a 	mov	r17,r6
1010eaa4:	0401ffc4 	movi	r16,2047
1010eaa8:	003df506 	br	1010e280 <__alt_data_end+0xfffee280>
1010eaac:	2807883a 	mov	r3,r5
1010eab0:	3023883a 	mov	r17,r6
1010eab4:	003df206 	br	1010e280 <__alt_data_end+0xfffee280>
1010eab8:	123ff804 	addi	r8,r2,-32
1010eabc:	01000804 	movi	r4,32
1010eac0:	1a10d83a 	srl	r8,r3,r8
1010eac4:	11000a26 	beq	r2,r4,1010eaf0 <__subdf3+0x8f4>
1010eac8:	01001004 	movi	r4,64
1010eacc:	2085c83a 	sub	r2,r4,r2
1010ead0:	1884983a 	sll	r2,r3,r2
1010ead4:	1444b03a 	or	r2,r2,r17
1010ead8:	1004c03a 	cmpne	r2,r2,zero
1010eadc:	40a2b03a 	or	r17,r8,r2
1010eae0:	0005883a 	mov	r2,zero
1010eae4:	003f8606 	br	1010e900 <__alt_data_end+0xfffee900>
1010eae8:	0005883a 	mov	r2,zero
1010eaec:	003fdc06 	br	1010ea60 <__alt_data_end+0xfffeea60>
1010eaf0:	0005883a 	mov	r2,zero
1010eaf4:	003ff706 	br	1010ead4 <__alt_data_end+0xfffeead4>

1010eaf8 <__fixdfsi>:
1010eaf8:	280cd53a 	srli	r6,r5,20
1010eafc:	00c00434 	movhi	r3,16
1010eb00:	18ffffc4 	addi	r3,r3,-1
1010eb04:	3181ffcc 	andi	r6,r6,2047
1010eb08:	01c0ff84 	movi	r7,1022
1010eb0c:	28c6703a 	and	r3,r5,r3
1010eb10:	280ad7fa 	srli	r5,r5,31
1010eb14:	3980120e 	bge	r7,r6,1010eb60 <__fixdfsi+0x68>
1010eb18:	00810744 	movi	r2,1053
1010eb1c:	11800c16 	blt	r2,r6,1010eb50 <__fixdfsi+0x58>
1010eb20:	00810cc4 	movi	r2,1075
1010eb24:	1185c83a 	sub	r2,r2,r6
1010eb28:	01c007c4 	movi	r7,31
1010eb2c:	18c00434 	orhi	r3,r3,16
1010eb30:	38800d16 	blt	r7,r2,1010eb68 <__fixdfsi+0x70>
1010eb34:	31befb44 	addi	r6,r6,-1043
1010eb38:	2084d83a 	srl	r2,r4,r2
1010eb3c:	1986983a 	sll	r3,r3,r6
1010eb40:	1884b03a 	or	r2,r3,r2
1010eb44:	28000726 	beq	r5,zero,1010eb64 <__fixdfsi+0x6c>
1010eb48:	0085c83a 	sub	r2,zero,r2
1010eb4c:	f800283a 	ret
1010eb50:	00a00034 	movhi	r2,32768
1010eb54:	10bfffc4 	addi	r2,r2,-1
1010eb58:	2885883a 	add	r2,r5,r2
1010eb5c:	f800283a 	ret
1010eb60:	0005883a 	mov	r2,zero
1010eb64:	f800283a 	ret
1010eb68:	008104c4 	movi	r2,1043
1010eb6c:	1185c83a 	sub	r2,r2,r6
1010eb70:	1884d83a 	srl	r2,r3,r2
1010eb74:	003ff306 	br	1010eb44 <__alt_data_end+0xfffeeb44>

1010eb78 <__floatsidf>:
1010eb78:	defffd04 	addi	sp,sp,-12
1010eb7c:	dfc00215 	stw	ra,8(sp)
1010eb80:	dc400115 	stw	r17,4(sp)
1010eb84:	dc000015 	stw	r16,0(sp)
1010eb88:	20002b26 	beq	r4,zero,1010ec38 <__floatsidf+0xc0>
1010eb8c:	2023883a 	mov	r17,r4
1010eb90:	2020d7fa 	srli	r16,r4,31
1010eb94:	20002d16 	blt	r4,zero,1010ec4c <__floatsidf+0xd4>
1010eb98:	8809883a 	mov	r4,r17
1010eb9c:	010ecfc0 	call	1010ecfc <__clzsi2>
1010eba0:	01410784 	movi	r5,1054
1010eba4:	288bc83a 	sub	r5,r5,r2
1010eba8:	01010cc4 	movi	r4,1075
1010ebac:	2149c83a 	sub	r4,r4,r5
1010ebb0:	00c007c4 	movi	r3,31
1010ebb4:	1900160e 	bge	r3,r4,1010ec10 <__floatsidf+0x98>
1010ebb8:	00c104c4 	movi	r3,1043
1010ebbc:	1947c83a 	sub	r3,r3,r5
1010ebc0:	88c6983a 	sll	r3,r17,r3
1010ebc4:	00800434 	movhi	r2,16
1010ebc8:	10bfffc4 	addi	r2,r2,-1
1010ebcc:	1886703a 	and	r3,r3,r2
1010ebd0:	2941ffcc 	andi	r5,r5,2047
1010ebd4:	800d883a 	mov	r6,r16
1010ebd8:	0005883a 	mov	r2,zero
1010ebdc:	280a953a 	slli	r5,r5,20
1010ebe0:	31803fcc 	andi	r6,r6,255
1010ebe4:	01000434 	movhi	r4,16
1010ebe8:	300c97fa 	slli	r6,r6,31
1010ebec:	213fffc4 	addi	r4,r4,-1
1010ebf0:	1906703a 	and	r3,r3,r4
1010ebf4:	1946b03a 	or	r3,r3,r5
1010ebf8:	1986b03a 	or	r3,r3,r6
1010ebfc:	dfc00217 	ldw	ra,8(sp)
1010ec00:	dc400117 	ldw	r17,4(sp)
1010ec04:	dc000017 	ldw	r16,0(sp)
1010ec08:	dec00304 	addi	sp,sp,12
1010ec0c:	f800283a 	ret
1010ec10:	00c002c4 	movi	r3,11
1010ec14:	1887c83a 	sub	r3,r3,r2
1010ec18:	88c6d83a 	srl	r3,r17,r3
1010ec1c:	8904983a 	sll	r2,r17,r4
1010ec20:	01000434 	movhi	r4,16
1010ec24:	213fffc4 	addi	r4,r4,-1
1010ec28:	2941ffcc 	andi	r5,r5,2047
1010ec2c:	1906703a 	and	r3,r3,r4
1010ec30:	800d883a 	mov	r6,r16
1010ec34:	003fe906 	br	1010ebdc <__alt_data_end+0xfffeebdc>
1010ec38:	000d883a 	mov	r6,zero
1010ec3c:	000b883a 	mov	r5,zero
1010ec40:	0007883a 	mov	r3,zero
1010ec44:	0005883a 	mov	r2,zero
1010ec48:	003fe406 	br	1010ebdc <__alt_data_end+0xfffeebdc>
1010ec4c:	0123c83a 	sub	r17,zero,r4
1010ec50:	003fd106 	br	1010eb98 <__alt_data_end+0xfffeeb98>

1010ec54 <__floatunsidf>:
1010ec54:	defffe04 	addi	sp,sp,-8
1010ec58:	dc000015 	stw	r16,0(sp)
1010ec5c:	dfc00115 	stw	ra,4(sp)
1010ec60:	2021883a 	mov	r16,r4
1010ec64:	20002226 	beq	r4,zero,1010ecf0 <__floatunsidf+0x9c>
1010ec68:	010ecfc0 	call	1010ecfc <__clzsi2>
1010ec6c:	01010784 	movi	r4,1054
1010ec70:	2089c83a 	sub	r4,r4,r2
1010ec74:	01810cc4 	movi	r6,1075
1010ec78:	310dc83a 	sub	r6,r6,r4
1010ec7c:	00c007c4 	movi	r3,31
1010ec80:	1980120e 	bge	r3,r6,1010eccc <__floatunsidf+0x78>
1010ec84:	00c104c4 	movi	r3,1043
1010ec88:	1907c83a 	sub	r3,r3,r4
1010ec8c:	80ca983a 	sll	r5,r16,r3
1010ec90:	00800434 	movhi	r2,16
1010ec94:	10bfffc4 	addi	r2,r2,-1
1010ec98:	2101ffcc 	andi	r4,r4,2047
1010ec9c:	0021883a 	mov	r16,zero
1010eca0:	288a703a 	and	r5,r5,r2
1010eca4:	2008953a 	slli	r4,r4,20
1010eca8:	00c00434 	movhi	r3,16
1010ecac:	18ffffc4 	addi	r3,r3,-1
1010ecb0:	28c6703a 	and	r3,r5,r3
1010ecb4:	8005883a 	mov	r2,r16
1010ecb8:	1906b03a 	or	r3,r3,r4
1010ecbc:	dfc00117 	ldw	ra,4(sp)
1010ecc0:	dc000017 	ldw	r16,0(sp)
1010ecc4:	dec00204 	addi	sp,sp,8
1010ecc8:	f800283a 	ret
1010eccc:	00c002c4 	movi	r3,11
1010ecd0:	188bc83a 	sub	r5,r3,r2
1010ecd4:	814ad83a 	srl	r5,r16,r5
1010ecd8:	00c00434 	movhi	r3,16
1010ecdc:	18ffffc4 	addi	r3,r3,-1
1010ece0:	81a0983a 	sll	r16,r16,r6
1010ece4:	2101ffcc 	andi	r4,r4,2047
1010ece8:	28ca703a 	and	r5,r5,r3
1010ecec:	003fed06 	br	1010eca4 <__alt_data_end+0xfffeeca4>
1010ecf0:	0009883a 	mov	r4,zero
1010ecf4:	000b883a 	mov	r5,zero
1010ecf8:	003fea06 	br	1010eca4 <__alt_data_end+0xfffeeca4>

1010ecfc <__clzsi2>:
1010ecfc:	00bfffd4 	movui	r2,65535
1010ed00:	11000536 	bltu	r2,r4,1010ed18 <__clzsi2+0x1c>
1010ed04:	00803fc4 	movi	r2,255
1010ed08:	11000f36 	bltu	r2,r4,1010ed48 <__clzsi2+0x4c>
1010ed0c:	00800804 	movi	r2,32
1010ed10:	0007883a 	mov	r3,zero
1010ed14:	00000506 	br	1010ed2c <__clzsi2+0x30>
1010ed18:	00804034 	movhi	r2,256
1010ed1c:	10bfffc4 	addi	r2,r2,-1
1010ed20:	11000c2e 	bgeu	r2,r4,1010ed54 <__clzsi2+0x58>
1010ed24:	00800204 	movi	r2,8
1010ed28:	00c00604 	movi	r3,24
1010ed2c:	20c8d83a 	srl	r4,r4,r3
1010ed30:	00c40474 	movhi	r3,4113
1010ed34:	18c5f804 	addi	r3,r3,6112
1010ed38:	1909883a 	add	r4,r3,r4
1010ed3c:	20c00003 	ldbu	r3,0(r4)
1010ed40:	10c5c83a 	sub	r2,r2,r3
1010ed44:	f800283a 	ret
1010ed48:	00800604 	movi	r2,24
1010ed4c:	00c00204 	movi	r3,8
1010ed50:	003ff606 	br	1010ed2c <__alt_data_end+0xfffeed2c>
1010ed54:	00800404 	movi	r2,16
1010ed58:	1007883a 	mov	r3,r2
1010ed5c:	003ff306 	br	1010ed2c <__alt_data_end+0xfffeed2c>

1010ed60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ed60:	defffe04 	addi	sp,sp,-8
1010ed64:	dfc00115 	stw	ra,4(sp)
1010ed68:	df000015 	stw	fp,0(sp)
1010ed6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ed70:	d0a00b17 	ldw	r2,-32724(gp)
1010ed74:	10000326 	beq	r2,zero,1010ed84 <alt_get_errno+0x24>
1010ed78:	d0a00b17 	ldw	r2,-32724(gp)
1010ed7c:	103ee83a 	callr	r2
1010ed80:	00000106 	br	1010ed88 <alt_get_errno+0x28>
1010ed84:	d0a6cd04 	addi	r2,gp,-25804
}
1010ed88:	e037883a 	mov	sp,fp
1010ed8c:	dfc00117 	ldw	ra,4(sp)
1010ed90:	df000017 	ldw	fp,0(sp)
1010ed94:	dec00204 	addi	sp,sp,8
1010ed98:	f800283a 	ret

1010ed9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010ed9c:	defffb04 	addi	sp,sp,-20
1010eda0:	dfc00415 	stw	ra,16(sp)
1010eda4:	df000315 	stw	fp,12(sp)
1010eda8:	df000304 	addi	fp,sp,12
1010edac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010edb0:	e0bfff17 	ldw	r2,-4(fp)
1010edb4:	10000616 	blt	r2,zero,1010edd0 <close+0x34>
1010edb8:	e0bfff17 	ldw	r2,-4(fp)
1010edbc:	10c00324 	muli	r3,r2,12
1010edc0:	00840474 	movhi	r2,4113
1010edc4:	10887804 	addi	r2,r2,8672
1010edc8:	1885883a 	add	r2,r3,r2
1010edcc:	00000106 	br	1010edd4 <close+0x38>
1010edd0:	0005883a 	mov	r2,zero
1010edd4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010edd8:	e0bffd17 	ldw	r2,-12(fp)
1010eddc:	10001926 	beq	r2,zero,1010ee44 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010ede0:	e0bffd17 	ldw	r2,-12(fp)
1010ede4:	10800017 	ldw	r2,0(r2)
1010ede8:	10800417 	ldw	r2,16(r2)
1010edec:	10000626 	beq	r2,zero,1010ee08 <close+0x6c>
1010edf0:	e0bffd17 	ldw	r2,-12(fp)
1010edf4:	10800017 	ldw	r2,0(r2)
1010edf8:	10800417 	ldw	r2,16(r2)
1010edfc:	e13ffd17 	ldw	r4,-12(fp)
1010ee00:	103ee83a 	callr	r2
1010ee04:	00000106 	br	1010ee0c <close+0x70>
1010ee08:	0005883a 	mov	r2,zero
1010ee0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010ee10:	e13fff17 	ldw	r4,-4(fp)
1010ee14:	010f9500 	call	1010f950 <alt_release_fd>
    if (rval < 0)
1010ee18:	e0bffe17 	ldw	r2,-8(fp)
1010ee1c:	1000070e 	bge	r2,zero,1010ee3c <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010ee20:	010ed600 	call	1010ed60 <alt_get_errno>
1010ee24:	1007883a 	mov	r3,r2
1010ee28:	e0bffe17 	ldw	r2,-8(fp)
1010ee2c:	0085c83a 	sub	r2,zero,r2
1010ee30:	18800015 	stw	r2,0(r3)
      return -1;
1010ee34:	00bfffc4 	movi	r2,-1
1010ee38:	00000706 	br	1010ee58 <close+0xbc>
    }
    return 0;
1010ee3c:	0005883a 	mov	r2,zero
1010ee40:	00000506 	br	1010ee58 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010ee44:	010ed600 	call	1010ed60 <alt_get_errno>
1010ee48:	1007883a 	mov	r3,r2
1010ee4c:	00801444 	movi	r2,81
1010ee50:	18800015 	stw	r2,0(r3)
    return -1;
1010ee54:	00bfffc4 	movi	r2,-1
  }
}
1010ee58:	e037883a 	mov	sp,fp
1010ee5c:	dfc00117 	ldw	ra,4(sp)
1010ee60:	df000017 	ldw	fp,0(sp)
1010ee64:	dec00204 	addi	sp,sp,8
1010ee68:	f800283a 	ret

1010ee6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010ee6c:	defffc04 	addi	sp,sp,-16
1010ee70:	df000315 	stw	fp,12(sp)
1010ee74:	df000304 	addi	fp,sp,12
1010ee78:	e13ffd15 	stw	r4,-12(fp)
1010ee7c:	e17ffe15 	stw	r5,-8(fp)
1010ee80:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010ee84:	e0bfff17 	ldw	r2,-4(fp)
}
1010ee88:	e037883a 	mov	sp,fp
1010ee8c:	df000017 	ldw	fp,0(sp)
1010ee90:	dec00104 	addi	sp,sp,4
1010ee94:	f800283a 	ret

1010ee98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ee98:	defffe04 	addi	sp,sp,-8
1010ee9c:	dfc00115 	stw	ra,4(sp)
1010eea0:	df000015 	stw	fp,0(sp)
1010eea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010eea8:	d0a00b17 	ldw	r2,-32724(gp)
1010eeac:	10000326 	beq	r2,zero,1010eebc <alt_get_errno+0x24>
1010eeb0:	d0a00b17 	ldw	r2,-32724(gp)
1010eeb4:	103ee83a 	callr	r2
1010eeb8:	00000106 	br	1010eec0 <alt_get_errno+0x28>
1010eebc:	d0a6cd04 	addi	r2,gp,-25804
}
1010eec0:	e037883a 	mov	sp,fp
1010eec4:	dfc00117 	ldw	ra,4(sp)
1010eec8:	df000017 	ldw	fp,0(sp)
1010eecc:	dec00204 	addi	sp,sp,8
1010eed0:	f800283a 	ret

1010eed4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010eed4:	defffb04 	addi	sp,sp,-20
1010eed8:	dfc00415 	stw	ra,16(sp)
1010eedc:	df000315 	stw	fp,12(sp)
1010eee0:	df000304 	addi	fp,sp,12
1010eee4:	e13ffe15 	stw	r4,-8(fp)
1010eee8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010eeec:	e0bffe17 	ldw	r2,-8(fp)
1010eef0:	10000616 	blt	r2,zero,1010ef0c <fstat+0x38>
1010eef4:	e0bffe17 	ldw	r2,-8(fp)
1010eef8:	10c00324 	muli	r3,r2,12
1010eefc:	00840474 	movhi	r2,4113
1010ef00:	10887804 	addi	r2,r2,8672
1010ef04:	1885883a 	add	r2,r3,r2
1010ef08:	00000106 	br	1010ef10 <fstat+0x3c>
1010ef0c:	0005883a 	mov	r2,zero
1010ef10:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010ef14:	e0bffd17 	ldw	r2,-12(fp)
1010ef18:	10001026 	beq	r2,zero,1010ef5c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010ef1c:	e0bffd17 	ldw	r2,-12(fp)
1010ef20:	10800017 	ldw	r2,0(r2)
1010ef24:	10800817 	ldw	r2,32(r2)
1010ef28:	10000726 	beq	r2,zero,1010ef48 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010ef2c:	e0bffd17 	ldw	r2,-12(fp)
1010ef30:	10800017 	ldw	r2,0(r2)
1010ef34:	10800817 	ldw	r2,32(r2)
1010ef38:	e17fff17 	ldw	r5,-4(fp)
1010ef3c:	e13ffd17 	ldw	r4,-12(fp)
1010ef40:	103ee83a 	callr	r2
1010ef44:	00000a06 	br	1010ef70 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010ef48:	e0bfff17 	ldw	r2,-4(fp)
1010ef4c:	00c80004 	movi	r3,8192
1010ef50:	10c00115 	stw	r3,4(r2)
      return 0;
1010ef54:	0005883a 	mov	r2,zero
1010ef58:	00000506 	br	1010ef70 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010ef5c:	010ee980 	call	1010ee98 <alt_get_errno>
1010ef60:	1007883a 	mov	r3,r2
1010ef64:	00801444 	movi	r2,81
1010ef68:	18800015 	stw	r2,0(r3)
    return -1;
1010ef6c:	00bfffc4 	movi	r2,-1
  }
}
1010ef70:	e037883a 	mov	sp,fp
1010ef74:	dfc00117 	ldw	ra,4(sp)
1010ef78:	df000017 	ldw	fp,0(sp)
1010ef7c:	dec00204 	addi	sp,sp,8
1010ef80:	f800283a 	ret

1010ef84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010ef84:	defff904 	addi	sp,sp,-28
1010ef88:	dfc00615 	stw	ra,24(sp)
1010ef8c:	df000515 	stw	fp,20(sp)
1010ef90:	df000504 	addi	fp,sp,20
1010ef94:	e13ffc15 	stw	r4,-16(fp)
1010ef98:	e17ffd15 	stw	r5,-12(fp)
1010ef9c:	e1bffe15 	stw	r6,-8(fp)
1010efa0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1010efa4:	e0800217 	ldw	r2,8(fp)
1010efa8:	d8800015 	stw	r2,0(sp)
1010efac:	e1ffff17 	ldw	r7,-4(fp)
1010efb0:	e1bffe17 	ldw	r6,-8(fp)
1010efb4:	e17ffd17 	ldw	r5,-12(fp)
1010efb8:	e13ffc17 	ldw	r4,-16(fp)
1010efbc:	010f1340 	call	1010f134 <alt_iic_isr_register>
}  
1010efc0:	e037883a 	mov	sp,fp
1010efc4:	dfc00117 	ldw	ra,4(sp)
1010efc8:	df000017 	ldw	fp,0(sp)
1010efcc:	dec00204 	addi	sp,sp,8
1010efd0:	f800283a 	ret

1010efd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1010efd4:	defff904 	addi	sp,sp,-28
1010efd8:	df000615 	stw	fp,24(sp)
1010efdc:	df000604 	addi	fp,sp,24
1010efe0:	e13ffe15 	stw	r4,-8(fp)
1010efe4:	e17fff15 	stw	r5,-4(fp)
1010efe8:	e0bfff17 	ldw	r2,-4(fp)
1010efec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010eff0:	0005303a 	rdctl	r2,status
1010eff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010eff8:	e0fffb17 	ldw	r3,-20(fp)
1010effc:	00bfff84 	movi	r2,-2
1010f000:	1884703a 	and	r2,r3,r2
1010f004:	1001703a 	wrctl	status,r2
  
  return context;
1010f008:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010f00c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1010f010:	00c00044 	movi	r3,1
1010f014:	e0bffa17 	ldw	r2,-24(fp)
1010f018:	1884983a 	sll	r2,r3,r2
1010f01c:	1007883a 	mov	r3,r2
1010f020:	d0a6d417 	ldw	r2,-25776(gp)
1010f024:	1884b03a 	or	r2,r3,r2
1010f028:	d0a6d415 	stw	r2,-25776(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010f02c:	d0a6d417 	ldw	r2,-25776(gp)
1010f030:	100170fa 	wrctl	ienable,r2
1010f034:	e0bffc17 	ldw	r2,-16(fp)
1010f038:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f03c:	e0bffd17 	ldw	r2,-12(fp)
1010f040:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010f044:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1010f048:	0001883a 	nop
}
1010f04c:	e037883a 	mov	sp,fp
1010f050:	df000017 	ldw	fp,0(sp)
1010f054:	dec00104 	addi	sp,sp,4
1010f058:	f800283a 	ret

1010f05c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1010f05c:	defff904 	addi	sp,sp,-28
1010f060:	df000615 	stw	fp,24(sp)
1010f064:	df000604 	addi	fp,sp,24
1010f068:	e13ffe15 	stw	r4,-8(fp)
1010f06c:	e17fff15 	stw	r5,-4(fp)
1010f070:	e0bfff17 	ldw	r2,-4(fp)
1010f074:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f078:	0005303a 	rdctl	r2,status
1010f07c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f080:	e0fffb17 	ldw	r3,-20(fp)
1010f084:	00bfff84 	movi	r2,-2
1010f088:	1884703a 	and	r2,r3,r2
1010f08c:	1001703a 	wrctl	status,r2
  
  return context;
1010f090:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010f094:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1010f098:	00c00044 	movi	r3,1
1010f09c:	e0bffa17 	ldw	r2,-24(fp)
1010f0a0:	1884983a 	sll	r2,r3,r2
1010f0a4:	0084303a 	nor	r2,zero,r2
1010f0a8:	1007883a 	mov	r3,r2
1010f0ac:	d0a6d417 	ldw	r2,-25776(gp)
1010f0b0:	1884703a 	and	r2,r3,r2
1010f0b4:	d0a6d415 	stw	r2,-25776(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010f0b8:	d0a6d417 	ldw	r2,-25776(gp)
1010f0bc:	100170fa 	wrctl	ienable,r2
1010f0c0:	e0bffc17 	ldw	r2,-16(fp)
1010f0c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f0c8:	e0bffd17 	ldw	r2,-12(fp)
1010f0cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010f0d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1010f0d4:	0001883a 	nop
}
1010f0d8:	e037883a 	mov	sp,fp
1010f0dc:	df000017 	ldw	fp,0(sp)
1010f0e0:	dec00104 	addi	sp,sp,4
1010f0e4:	f800283a 	ret

1010f0e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1010f0e8:	defffc04 	addi	sp,sp,-16
1010f0ec:	df000315 	stw	fp,12(sp)
1010f0f0:	df000304 	addi	fp,sp,12
1010f0f4:	e13ffe15 	stw	r4,-8(fp)
1010f0f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1010f0fc:	000530fa 	rdctl	r2,ienable
1010f100:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1010f104:	00c00044 	movi	r3,1
1010f108:	e0bfff17 	ldw	r2,-4(fp)
1010f10c:	1884983a 	sll	r2,r3,r2
1010f110:	1007883a 	mov	r3,r2
1010f114:	e0bffd17 	ldw	r2,-12(fp)
1010f118:	1884703a 	and	r2,r3,r2
1010f11c:	1004c03a 	cmpne	r2,r2,zero
1010f120:	10803fcc 	andi	r2,r2,255
}
1010f124:	e037883a 	mov	sp,fp
1010f128:	df000017 	ldw	fp,0(sp)
1010f12c:	dec00104 	addi	sp,sp,4
1010f130:	f800283a 	ret

1010f134 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010f134:	defff504 	addi	sp,sp,-44
1010f138:	dfc00a15 	stw	ra,40(sp)
1010f13c:	df000915 	stw	fp,36(sp)
1010f140:	df000904 	addi	fp,sp,36
1010f144:	e13ffc15 	stw	r4,-16(fp)
1010f148:	e17ffd15 	stw	r5,-12(fp)
1010f14c:	e1bffe15 	stw	r6,-8(fp)
1010f150:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1010f154:	00bffa84 	movi	r2,-22
1010f158:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1010f15c:	e0bffd17 	ldw	r2,-12(fp)
1010f160:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1010f164:	e0bff817 	ldw	r2,-32(fp)
1010f168:	10800808 	cmpgei	r2,r2,32
1010f16c:	1000271e 	bne	r2,zero,1010f20c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f170:	0005303a 	rdctl	r2,status
1010f174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f178:	e0fffb17 	ldw	r3,-20(fp)
1010f17c:	00bfff84 	movi	r2,-2
1010f180:	1884703a 	and	r2,r3,r2
1010f184:	1001703a 	wrctl	status,r2
  
  return context;
1010f188:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1010f18c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1010f190:	00840474 	movhi	r2,4113
1010f194:	1093d504 	addi	r2,r2,20308
1010f198:	e0fff817 	ldw	r3,-32(fp)
1010f19c:	180690fa 	slli	r3,r3,3
1010f1a0:	10c5883a 	add	r2,r2,r3
1010f1a4:	e0fffe17 	ldw	r3,-8(fp)
1010f1a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1010f1ac:	00840474 	movhi	r2,4113
1010f1b0:	1093d504 	addi	r2,r2,20308
1010f1b4:	e0fff817 	ldw	r3,-32(fp)
1010f1b8:	180690fa 	slli	r3,r3,3
1010f1bc:	10c5883a 	add	r2,r2,r3
1010f1c0:	10800104 	addi	r2,r2,4
1010f1c4:	e0ffff17 	ldw	r3,-4(fp)
1010f1c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1010f1cc:	e0bffe17 	ldw	r2,-8(fp)
1010f1d0:	10000526 	beq	r2,zero,1010f1e8 <alt_iic_isr_register+0xb4>
1010f1d4:	e0bff817 	ldw	r2,-32(fp)
1010f1d8:	100b883a 	mov	r5,r2
1010f1dc:	e13ffc17 	ldw	r4,-16(fp)
1010f1e0:	010efd40 	call	1010efd4 <alt_ic_irq_enable>
1010f1e4:	00000406 	br	1010f1f8 <alt_iic_isr_register+0xc4>
1010f1e8:	e0bff817 	ldw	r2,-32(fp)
1010f1ec:	100b883a 	mov	r5,r2
1010f1f0:	e13ffc17 	ldw	r4,-16(fp)
1010f1f4:	010f05c0 	call	1010f05c <alt_ic_irq_disable>
1010f1f8:	e0bff715 	stw	r2,-36(fp)
1010f1fc:	e0bffa17 	ldw	r2,-24(fp)
1010f200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f204:	e0bff917 	ldw	r2,-28(fp)
1010f208:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1010f20c:	e0bff717 	ldw	r2,-36(fp)
}
1010f210:	e037883a 	mov	sp,fp
1010f214:	dfc00117 	ldw	ra,4(sp)
1010f218:	df000017 	ldw	fp,0(sp)
1010f21c:	dec00204 	addi	sp,sp,8
1010f220:	f800283a 	ret

1010f224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f224:	defffe04 	addi	sp,sp,-8
1010f228:	dfc00115 	stw	ra,4(sp)
1010f22c:	df000015 	stw	fp,0(sp)
1010f230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f234:	d0a00b17 	ldw	r2,-32724(gp)
1010f238:	10000326 	beq	r2,zero,1010f248 <alt_get_errno+0x24>
1010f23c:	d0a00b17 	ldw	r2,-32724(gp)
1010f240:	103ee83a 	callr	r2
1010f244:	00000106 	br	1010f24c <alt_get_errno+0x28>
1010f248:	d0a6cd04 	addi	r2,gp,-25804
}
1010f24c:	e037883a 	mov	sp,fp
1010f250:	dfc00117 	ldw	ra,4(sp)
1010f254:	df000017 	ldw	fp,0(sp)
1010f258:	dec00204 	addi	sp,sp,8
1010f25c:	f800283a 	ret

1010f260 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010f260:	deffed04 	addi	sp,sp,-76
1010f264:	dfc01215 	stw	ra,72(sp)
1010f268:	df001115 	stw	fp,68(sp)
1010f26c:	df001104 	addi	fp,sp,68
1010f270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f274:	e0bfff17 	ldw	r2,-4(fp)
1010f278:	10000616 	blt	r2,zero,1010f294 <isatty+0x34>
1010f27c:	e0bfff17 	ldw	r2,-4(fp)
1010f280:	10c00324 	muli	r3,r2,12
1010f284:	00840474 	movhi	r2,4113
1010f288:	10887804 	addi	r2,r2,8672
1010f28c:	1885883a 	add	r2,r3,r2
1010f290:	00000106 	br	1010f298 <isatty+0x38>
1010f294:	0005883a 	mov	r2,zero
1010f298:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010f29c:	e0bfef17 	ldw	r2,-68(fp)
1010f2a0:	10000e26 	beq	r2,zero,1010f2dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010f2a4:	e0bfef17 	ldw	r2,-68(fp)
1010f2a8:	10800017 	ldw	r2,0(r2)
1010f2ac:	10800817 	ldw	r2,32(r2)
1010f2b0:	1000021e 	bne	r2,zero,1010f2bc <isatty+0x5c>
    {
      return 1;
1010f2b4:	00800044 	movi	r2,1
1010f2b8:	00000d06 	br	1010f2f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010f2bc:	e0bff004 	addi	r2,fp,-64
1010f2c0:	100b883a 	mov	r5,r2
1010f2c4:	e13fff17 	ldw	r4,-4(fp)
1010f2c8:	010eed40 	call	1010eed4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010f2cc:	e0bff117 	ldw	r2,-60(fp)
1010f2d0:	10880020 	cmpeqi	r2,r2,8192
1010f2d4:	10803fcc 	andi	r2,r2,255
1010f2d8:	00000506 	br	1010f2f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010f2dc:	010f2240 	call	1010f224 <alt_get_errno>
1010f2e0:	1007883a 	mov	r3,r2
1010f2e4:	00801444 	movi	r2,81
1010f2e8:	18800015 	stw	r2,0(r3)
    return 0;
1010f2ec:	0005883a 	mov	r2,zero
  }
}
1010f2f0:	e037883a 	mov	sp,fp
1010f2f4:	dfc00117 	ldw	ra,4(sp)
1010f2f8:	df000017 	ldw	fp,0(sp)
1010f2fc:	dec00204 	addi	sp,sp,8
1010f300:	f800283a 	ret

1010f304 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010f304:	defffc04 	addi	sp,sp,-16
1010f308:	df000315 	stw	fp,12(sp)
1010f30c:	df000304 	addi	fp,sp,12
1010f310:	e13ffd15 	stw	r4,-12(fp)
1010f314:	e17ffe15 	stw	r5,-8(fp)
1010f318:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010f31c:	e0fffe17 	ldw	r3,-8(fp)
1010f320:	e0bffd17 	ldw	r2,-12(fp)
1010f324:	18800c26 	beq	r3,r2,1010f358 <alt_load_section+0x54>
  {
    while( to != end )
1010f328:	00000806 	br	1010f34c <alt_load_section+0x48>
    {
      *to++ = *from++;
1010f32c:	e0bffe17 	ldw	r2,-8(fp)
1010f330:	10c00104 	addi	r3,r2,4
1010f334:	e0fffe15 	stw	r3,-8(fp)
1010f338:	e0fffd17 	ldw	r3,-12(fp)
1010f33c:	19000104 	addi	r4,r3,4
1010f340:	e13ffd15 	stw	r4,-12(fp)
1010f344:	18c00017 	ldw	r3,0(r3)
1010f348:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010f34c:	e0fffe17 	ldw	r3,-8(fp)
1010f350:	e0bfff17 	ldw	r2,-4(fp)
1010f354:	18bff51e 	bne	r3,r2,1010f32c <__alt_data_end+0xfffef32c>
    {
      *to++ = *from++;
    }
  }
}
1010f358:	0001883a 	nop
1010f35c:	e037883a 	mov	sp,fp
1010f360:	df000017 	ldw	fp,0(sp)
1010f364:	dec00104 	addi	sp,sp,4
1010f368:	f800283a 	ret

1010f36c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010f36c:	defffe04 	addi	sp,sp,-8
1010f370:	dfc00115 	stw	ra,4(sp)
1010f374:	df000015 	stw	fp,0(sp)
1010f378:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010f37c:	01840474 	movhi	r6,4113
1010f380:	318d0004 	addi	r6,r6,13312
1010f384:	01440474 	movhi	r5,4113
1010f388:	29464504 	addi	r5,r5,6420
1010f38c:	01040474 	movhi	r4,4113
1010f390:	210d0004 	addi	r4,r4,13312
1010f394:	010f3040 	call	1010f304 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010f398:	01840434 	movhi	r6,4112
1010f39c:	31809104 	addi	r6,r6,580
1010f3a0:	01440434 	movhi	r5,4112
1010f3a4:	29400804 	addi	r5,r5,32
1010f3a8:	01040434 	movhi	r4,4112
1010f3ac:	21000804 	addi	r4,r4,32
1010f3b0:	010f3040 	call	1010f304 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010f3b4:	01840474 	movhi	r6,4113
1010f3b8:	31864504 	addi	r6,r6,6420
1010f3bc:	01440474 	movhi	r5,4113
1010f3c0:	29456204 	addi	r5,r5,5512
1010f3c4:	01040474 	movhi	r4,4113
1010f3c8:	21056204 	addi	r4,r4,5512
1010f3cc:	010f3040 	call	1010f304 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010f3d0:	01109680 	call	10110968 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010f3d4:	0110d8c0 	call	10110d8c <alt_icache_flush_all>
}
1010f3d8:	0001883a 	nop
1010f3dc:	e037883a 	mov	sp,fp
1010f3e0:	dfc00117 	ldw	ra,4(sp)
1010f3e4:	df000017 	ldw	fp,0(sp)
1010f3e8:	dec00204 	addi	sp,sp,8
1010f3ec:	f800283a 	ret

1010f3f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f3f0:	defffe04 	addi	sp,sp,-8
1010f3f4:	dfc00115 	stw	ra,4(sp)
1010f3f8:	df000015 	stw	fp,0(sp)
1010f3fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f400:	d0a00b17 	ldw	r2,-32724(gp)
1010f404:	10000326 	beq	r2,zero,1010f414 <alt_get_errno+0x24>
1010f408:	d0a00b17 	ldw	r2,-32724(gp)
1010f40c:	103ee83a 	callr	r2
1010f410:	00000106 	br	1010f418 <alt_get_errno+0x28>
1010f414:	d0a6cd04 	addi	r2,gp,-25804
}
1010f418:	e037883a 	mov	sp,fp
1010f41c:	dfc00117 	ldw	ra,4(sp)
1010f420:	df000017 	ldw	fp,0(sp)
1010f424:	dec00204 	addi	sp,sp,8
1010f428:	f800283a 	ret

1010f42c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010f42c:	defff904 	addi	sp,sp,-28
1010f430:	dfc00615 	stw	ra,24(sp)
1010f434:	df000515 	stw	fp,20(sp)
1010f438:	df000504 	addi	fp,sp,20
1010f43c:	e13ffd15 	stw	r4,-12(fp)
1010f440:	e17ffe15 	stw	r5,-8(fp)
1010f444:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010f448:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f44c:	e0bffd17 	ldw	r2,-12(fp)
1010f450:	10000616 	blt	r2,zero,1010f46c <lseek+0x40>
1010f454:	e0bffd17 	ldw	r2,-12(fp)
1010f458:	10c00324 	muli	r3,r2,12
1010f45c:	00840474 	movhi	r2,4113
1010f460:	10887804 	addi	r2,r2,8672
1010f464:	1885883a 	add	r2,r3,r2
1010f468:	00000106 	br	1010f470 <lseek+0x44>
1010f46c:	0005883a 	mov	r2,zero
1010f470:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010f474:	e0bffc17 	ldw	r2,-16(fp)
1010f478:	10001026 	beq	r2,zero,1010f4bc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010f47c:	e0bffc17 	ldw	r2,-16(fp)
1010f480:	10800017 	ldw	r2,0(r2)
1010f484:	10800717 	ldw	r2,28(r2)
1010f488:	10000926 	beq	r2,zero,1010f4b0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010f48c:	e0bffc17 	ldw	r2,-16(fp)
1010f490:	10800017 	ldw	r2,0(r2)
1010f494:	10800717 	ldw	r2,28(r2)
1010f498:	e1bfff17 	ldw	r6,-4(fp)
1010f49c:	e17ffe17 	ldw	r5,-8(fp)
1010f4a0:	e13ffc17 	ldw	r4,-16(fp)
1010f4a4:	103ee83a 	callr	r2
1010f4a8:	e0bffb15 	stw	r2,-20(fp)
1010f4ac:	00000506 	br	1010f4c4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010f4b0:	00bfde84 	movi	r2,-134
1010f4b4:	e0bffb15 	stw	r2,-20(fp)
1010f4b8:	00000206 	br	1010f4c4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010f4bc:	00bfebc4 	movi	r2,-81
1010f4c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010f4c4:	e0bffb17 	ldw	r2,-20(fp)
1010f4c8:	1000070e 	bge	r2,zero,1010f4e8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010f4cc:	010f3f00 	call	1010f3f0 <alt_get_errno>
1010f4d0:	1007883a 	mov	r3,r2
1010f4d4:	e0bffb17 	ldw	r2,-20(fp)
1010f4d8:	0085c83a 	sub	r2,zero,r2
1010f4dc:	18800015 	stw	r2,0(r3)
    rc = -1;
1010f4e0:	00bfffc4 	movi	r2,-1
1010f4e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010f4e8:	e0bffb17 	ldw	r2,-20(fp)
}
1010f4ec:	e037883a 	mov	sp,fp
1010f4f0:	dfc00117 	ldw	ra,4(sp)
1010f4f4:	df000017 	ldw	fp,0(sp)
1010f4f8:	dec00204 	addi	sp,sp,8
1010f4fc:	f800283a 	ret

1010f500 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010f500:	defffd04 	addi	sp,sp,-12
1010f504:	dfc00215 	stw	ra,8(sp)
1010f508:	df000115 	stw	fp,4(sp)
1010f50c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010f510:	0009883a 	mov	r4,zero
1010f514:	010fbfc0 	call	1010fbfc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010f518:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010f51c:	010fc340 	call	1010fc34 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010f520:	01840474 	movhi	r6,4113
1010f524:	31863b04 	addi	r6,r6,6380
1010f528:	01440474 	movhi	r5,4113
1010f52c:	29463b04 	addi	r5,r5,6380
1010f530:	01040474 	movhi	r4,4113
1010f534:	21063b04 	addi	r4,r4,6380
1010f538:	0110f200 	call	10110f20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010f53c:	0110a900 	call	10110a90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010f540:	01040474 	movhi	r4,4113
1010f544:	2102bc04 	addi	r4,r4,2800
1010f548:	01111f40 	call	101111f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010f54c:	d0a6d517 	ldw	r2,-25772(gp)
1010f550:	d0e6d617 	ldw	r3,-25768(gp)
1010f554:	d126d717 	ldw	r4,-25764(gp)
1010f558:	200d883a 	mov	r6,r4
1010f55c:	180b883a 	mov	r5,r3
1010f560:	1009883a 	mov	r4,r2
1010f564:	01006300 	call	10100630 <main>
1010f568:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010f56c:	01000044 	movi	r4,1
1010f570:	010ed9c0 	call	1010ed9c <close>
  exit (result);
1010f574:	e13fff17 	ldw	r4,-4(fp)
1010f578:	01112080 	call	10111208 <exit>

1010f57c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010f57c:	defffe04 	addi	sp,sp,-8
1010f580:	df000115 	stw	fp,4(sp)
1010f584:	df000104 	addi	fp,sp,4
1010f588:	e13fff15 	stw	r4,-4(fp)
}
1010f58c:	0001883a 	nop
1010f590:	e037883a 	mov	sp,fp
1010f594:	df000017 	ldw	fp,0(sp)
1010f598:	dec00104 	addi	sp,sp,4
1010f59c:	f800283a 	ret

1010f5a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010f5a0:	defffe04 	addi	sp,sp,-8
1010f5a4:	df000115 	stw	fp,4(sp)
1010f5a8:	df000104 	addi	fp,sp,4
1010f5ac:	e13fff15 	stw	r4,-4(fp)
}
1010f5b0:	0001883a 	nop
1010f5b4:	e037883a 	mov	sp,fp
1010f5b8:	df000017 	ldw	fp,0(sp)
1010f5bc:	dec00104 	addi	sp,sp,4
1010f5c0:	f800283a 	ret

1010f5c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f5c4:	defffe04 	addi	sp,sp,-8
1010f5c8:	dfc00115 	stw	ra,4(sp)
1010f5cc:	df000015 	stw	fp,0(sp)
1010f5d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f5d4:	d0a00b17 	ldw	r2,-32724(gp)
1010f5d8:	10000326 	beq	r2,zero,1010f5e8 <alt_get_errno+0x24>
1010f5dc:	d0a00b17 	ldw	r2,-32724(gp)
1010f5e0:	103ee83a 	callr	r2
1010f5e4:	00000106 	br	1010f5ec <alt_get_errno+0x28>
1010f5e8:	d0a6cd04 	addi	r2,gp,-25804
}
1010f5ec:	e037883a 	mov	sp,fp
1010f5f0:	dfc00117 	ldw	ra,4(sp)
1010f5f4:	df000017 	ldw	fp,0(sp)
1010f5f8:	dec00204 	addi	sp,sp,8
1010f5fc:	f800283a 	ret

1010f600 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010f600:	defffd04 	addi	sp,sp,-12
1010f604:	df000215 	stw	fp,8(sp)
1010f608:	df000204 	addi	fp,sp,8
1010f60c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010f610:	e0bfff17 	ldw	r2,-4(fp)
1010f614:	10800217 	ldw	r2,8(r2)
1010f618:	10d00034 	orhi	r3,r2,16384
1010f61c:	e0bfff17 	ldw	r2,-4(fp)
1010f620:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010f624:	e03ffe15 	stw	zero,-8(fp)
1010f628:	00001d06 	br	1010f6a0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010f62c:	00840474 	movhi	r2,4113
1010f630:	10887804 	addi	r2,r2,8672
1010f634:	e0fffe17 	ldw	r3,-8(fp)
1010f638:	18c00324 	muli	r3,r3,12
1010f63c:	10c5883a 	add	r2,r2,r3
1010f640:	10c00017 	ldw	r3,0(r2)
1010f644:	e0bfff17 	ldw	r2,-4(fp)
1010f648:	10800017 	ldw	r2,0(r2)
1010f64c:	1880111e 	bne	r3,r2,1010f694 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010f650:	00840474 	movhi	r2,4113
1010f654:	10887804 	addi	r2,r2,8672
1010f658:	e0fffe17 	ldw	r3,-8(fp)
1010f65c:	18c00324 	muli	r3,r3,12
1010f660:	10c5883a 	add	r2,r2,r3
1010f664:	10800204 	addi	r2,r2,8
1010f668:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010f66c:	1000090e 	bge	r2,zero,1010f694 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010f670:	e0bffe17 	ldw	r2,-8(fp)
1010f674:	10c00324 	muli	r3,r2,12
1010f678:	00840474 	movhi	r2,4113
1010f67c:	10887804 	addi	r2,r2,8672
1010f680:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010f684:	e0bfff17 	ldw	r2,-4(fp)
1010f688:	18800226 	beq	r3,r2,1010f694 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010f68c:	00bffcc4 	movi	r2,-13
1010f690:	00000806 	br	1010f6b4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010f694:	e0bffe17 	ldw	r2,-8(fp)
1010f698:	10800044 	addi	r2,r2,1
1010f69c:	e0bffe15 	stw	r2,-8(fp)
1010f6a0:	d0a00a17 	ldw	r2,-32728(gp)
1010f6a4:	1007883a 	mov	r3,r2
1010f6a8:	e0bffe17 	ldw	r2,-8(fp)
1010f6ac:	18bfdf2e 	bgeu	r3,r2,1010f62c <__alt_data_end+0xfffef62c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010f6b0:	0005883a 	mov	r2,zero
}
1010f6b4:	e037883a 	mov	sp,fp
1010f6b8:	df000017 	ldw	fp,0(sp)
1010f6bc:	dec00104 	addi	sp,sp,4
1010f6c0:	f800283a 	ret

1010f6c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010f6c4:	defff604 	addi	sp,sp,-40
1010f6c8:	dfc00915 	stw	ra,36(sp)
1010f6cc:	df000815 	stw	fp,32(sp)
1010f6d0:	df000804 	addi	fp,sp,32
1010f6d4:	e13ffd15 	stw	r4,-12(fp)
1010f6d8:	e17ffe15 	stw	r5,-8(fp)
1010f6dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010f6e0:	00bfffc4 	movi	r2,-1
1010f6e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010f6e8:	00bffb44 	movi	r2,-19
1010f6ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010f6f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010f6f4:	d1600804 	addi	r5,gp,-32736
1010f6f8:	e13ffd17 	ldw	r4,-12(fp)
1010f6fc:	0110b500 	call	10110b50 <alt_find_dev>
1010f700:	e0bff815 	stw	r2,-32(fp)
1010f704:	e0bff817 	ldw	r2,-32(fp)
1010f708:	1000051e 	bne	r2,zero,1010f720 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010f70c:	e13ffd17 	ldw	r4,-12(fp)
1010f710:	0110be00 	call	10110be0 <alt_find_file>
1010f714:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010f718:	00800044 	movi	r2,1
1010f71c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010f720:	e0bff817 	ldw	r2,-32(fp)
1010f724:	10002926 	beq	r2,zero,1010f7cc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010f728:	e13ff817 	ldw	r4,-32(fp)
1010f72c:	0110ce80 	call	10110ce8 <alt_get_fd>
1010f730:	e0bff915 	stw	r2,-28(fp)
1010f734:	e0bff917 	ldw	r2,-28(fp)
1010f738:	1000030e 	bge	r2,zero,1010f748 <open+0x84>
    {
      status = index;
1010f73c:	e0bff917 	ldw	r2,-28(fp)
1010f740:	e0bffa15 	stw	r2,-24(fp)
1010f744:	00002306 	br	1010f7d4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1010f748:	e0bff917 	ldw	r2,-28(fp)
1010f74c:	10c00324 	muli	r3,r2,12
1010f750:	00840474 	movhi	r2,4113
1010f754:	10887804 	addi	r2,r2,8672
1010f758:	1885883a 	add	r2,r3,r2
1010f75c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010f760:	e0fffe17 	ldw	r3,-8(fp)
1010f764:	00900034 	movhi	r2,16384
1010f768:	10bfffc4 	addi	r2,r2,-1
1010f76c:	1886703a 	and	r3,r3,r2
1010f770:	e0bffc17 	ldw	r2,-16(fp)
1010f774:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010f778:	e0bffb17 	ldw	r2,-20(fp)
1010f77c:	1000051e 	bne	r2,zero,1010f794 <open+0xd0>
1010f780:	e13ffc17 	ldw	r4,-16(fp)
1010f784:	010f6000 	call	1010f600 <alt_file_locked>
1010f788:	e0bffa15 	stw	r2,-24(fp)
1010f78c:	e0bffa17 	ldw	r2,-24(fp)
1010f790:	10001016 	blt	r2,zero,1010f7d4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010f794:	e0bff817 	ldw	r2,-32(fp)
1010f798:	10800317 	ldw	r2,12(r2)
1010f79c:	10000826 	beq	r2,zero,1010f7c0 <open+0xfc>
1010f7a0:	e0bff817 	ldw	r2,-32(fp)
1010f7a4:	10800317 	ldw	r2,12(r2)
1010f7a8:	e1ffff17 	ldw	r7,-4(fp)
1010f7ac:	e1bffe17 	ldw	r6,-8(fp)
1010f7b0:	e17ffd17 	ldw	r5,-12(fp)
1010f7b4:	e13ffc17 	ldw	r4,-16(fp)
1010f7b8:	103ee83a 	callr	r2
1010f7bc:	00000106 	br	1010f7c4 <open+0x100>
1010f7c0:	0005883a 	mov	r2,zero
1010f7c4:	e0bffa15 	stw	r2,-24(fp)
1010f7c8:	00000206 	br	1010f7d4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010f7cc:	00bffb44 	movi	r2,-19
1010f7d0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010f7d4:	e0bffa17 	ldw	r2,-24(fp)
1010f7d8:	1000090e 	bge	r2,zero,1010f800 <open+0x13c>
  {
    alt_release_fd (index);  
1010f7dc:	e13ff917 	ldw	r4,-28(fp)
1010f7e0:	010f9500 	call	1010f950 <alt_release_fd>
    ALT_ERRNO = -status;
1010f7e4:	010f5c40 	call	1010f5c4 <alt_get_errno>
1010f7e8:	1007883a 	mov	r3,r2
1010f7ec:	e0bffa17 	ldw	r2,-24(fp)
1010f7f0:	0085c83a 	sub	r2,zero,r2
1010f7f4:	18800015 	stw	r2,0(r3)
    return -1;
1010f7f8:	00bfffc4 	movi	r2,-1
1010f7fc:	00000106 	br	1010f804 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1010f800:	e0bff917 	ldw	r2,-28(fp)
}
1010f804:	e037883a 	mov	sp,fp
1010f808:	dfc00117 	ldw	ra,4(sp)
1010f80c:	df000017 	ldw	fp,0(sp)
1010f810:	dec00204 	addi	sp,sp,8
1010f814:	f800283a 	ret

1010f818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f818:	defffe04 	addi	sp,sp,-8
1010f81c:	dfc00115 	stw	ra,4(sp)
1010f820:	df000015 	stw	fp,0(sp)
1010f824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f828:	d0a00b17 	ldw	r2,-32724(gp)
1010f82c:	10000326 	beq	r2,zero,1010f83c <alt_get_errno+0x24>
1010f830:	d0a00b17 	ldw	r2,-32724(gp)
1010f834:	103ee83a 	callr	r2
1010f838:	00000106 	br	1010f840 <alt_get_errno+0x28>
1010f83c:	d0a6cd04 	addi	r2,gp,-25804
}
1010f840:	e037883a 	mov	sp,fp
1010f844:	dfc00117 	ldw	ra,4(sp)
1010f848:	df000017 	ldw	fp,0(sp)
1010f84c:	dec00204 	addi	sp,sp,8
1010f850:	f800283a 	ret

1010f854 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010f854:	defff904 	addi	sp,sp,-28
1010f858:	dfc00615 	stw	ra,24(sp)
1010f85c:	df000515 	stw	fp,20(sp)
1010f860:	df000504 	addi	fp,sp,20
1010f864:	e13ffd15 	stw	r4,-12(fp)
1010f868:	e17ffe15 	stw	r5,-8(fp)
1010f86c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f870:	e0bffd17 	ldw	r2,-12(fp)
1010f874:	10000616 	blt	r2,zero,1010f890 <read+0x3c>
1010f878:	e0bffd17 	ldw	r2,-12(fp)
1010f87c:	10c00324 	muli	r3,r2,12
1010f880:	00840474 	movhi	r2,4113
1010f884:	10887804 	addi	r2,r2,8672
1010f888:	1885883a 	add	r2,r3,r2
1010f88c:	00000106 	br	1010f894 <read+0x40>
1010f890:	0005883a 	mov	r2,zero
1010f894:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010f898:	e0bffb17 	ldw	r2,-20(fp)
1010f89c:	10002226 	beq	r2,zero,1010f928 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010f8a0:	e0bffb17 	ldw	r2,-20(fp)
1010f8a4:	10800217 	ldw	r2,8(r2)
1010f8a8:	108000cc 	andi	r2,r2,3
1010f8ac:	10800060 	cmpeqi	r2,r2,1
1010f8b0:	1000181e 	bne	r2,zero,1010f914 <read+0xc0>
        (fd->dev->read))
1010f8b4:	e0bffb17 	ldw	r2,-20(fp)
1010f8b8:	10800017 	ldw	r2,0(r2)
1010f8bc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010f8c0:	10001426 	beq	r2,zero,1010f914 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010f8c4:	e0bffb17 	ldw	r2,-20(fp)
1010f8c8:	10800017 	ldw	r2,0(r2)
1010f8cc:	10800517 	ldw	r2,20(r2)
1010f8d0:	e0ffff17 	ldw	r3,-4(fp)
1010f8d4:	180d883a 	mov	r6,r3
1010f8d8:	e17ffe17 	ldw	r5,-8(fp)
1010f8dc:	e13ffb17 	ldw	r4,-20(fp)
1010f8e0:	103ee83a 	callr	r2
1010f8e4:	e0bffc15 	stw	r2,-16(fp)
1010f8e8:	e0bffc17 	ldw	r2,-16(fp)
1010f8ec:	1000070e 	bge	r2,zero,1010f90c <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010f8f0:	010f8180 	call	1010f818 <alt_get_errno>
1010f8f4:	1007883a 	mov	r3,r2
1010f8f8:	e0bffc17 	ldw	r2,-16(fp)
1010f8fc:	0085c83a 	sub	r2,zero,r2
1010f900:	18800015 	stw	r2,0(r3)
          return -1;
1010f904:	00bfffc4 	movi	r2,-1
1010f908:	00000c06 	br	1010f93c <read+0xe8>
        }
        return rval;
1010f90c:	e0bffc17 	ldw	r2,-16(fp)
1010f910:	00000a06 	br	1010f93c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010f914:	010f8180 	call	1010f818 <alt_get_errno>
1010f918:	1007883a 	mov	r3,r2
1010f91c:	00800344 	movi	r2,13
1010f920:	18800015 	stw	r2,0(r3)
1010f924:	00000406 	br	1010f938 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010f928:	010f8180 	call	1010f818 <alt_get_errno>
1010f92c:	1007883a 	mov	r3,r2
1010f930:	00801444 	movi	r2,81
1010f934:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f938:	00bfffc4 	movi	r2,-1
}
1010f93c:	e037883a 	mov	sp,fp
1010f940:	dfc00117 	ldw	ra,4(sp)
1010f944:	df000017 	ldw	fp,0(sp)
1010f948:	dec00204 	addi	sp,sp,8
1010f94c:	f800283a 	ret

1010f950 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010f950:	defffe04 	addi	sp,sp,-8
1010f954:	df000115 	stw	fp,4(sp)
1010f958:	df000104 	addi	fp,sp,4
1010f95c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010f960:	e0bfff17 	ldw	r2,-4(fp)
1010f964:	108000d0 	cmplti	r2,r2,3
1010f968:	10000d1e 	bne	r2,zero,1010f9a0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010f96c:	00840474 	movhi	r2,4113
1010f970:	10887804 	addi	r2,r2,8672
1010f974:	e0ffff17 	ldw	r3,-4(fp)
1010f978:	18c00324 	muli	r3,r3,12
1010f97c:	10c5883a 	add	r2,r2,r3
1010f980:	10800204 	addi	r2,r2,8
1010f984:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010f988:	00840474 	movhi	r2,4113
1010f98c:	10887804 	addi	r2,r2,8672
1010f990:	e0ffff17 	ldw	r3,-4(fp)
1010f994:	18c00324 	muli	r3,r3,12
1010f998:	10c5883a 	add	r2,r2,r3
1010f99c:	10000015 	stw	zero,0(r2)
  }
}
1010f9a0:	0001883a 	nop
1010f9a4:	e037883a 	mov	sp,fp
1010f9a8:	df000017 	ldw	fp,0(sp)
1010f9ac:	dec00104 	addi	sp,sp,4
1010f9b0:	f800283a 	ret

1010f9b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010f9b4:	defff904 	addi	sp,sp,-28
1010f9b8:	df000615 	stw	fp,24(sp)
1010f9bc:	df000604 	addi	fp,sp,24
1010f9c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f9c4:	0005303a 	rdctl	r2,status
1010f9c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f9cc:	e0fffe17 	ldw	r3,-8(fp)
1010f9d0:	00bfff84 	movi	r2,-2
1010f9d4:	1884703a 	and	r2,r3,r2
1010f9d8:	1001703a 	wrctl	status,r2
  
  return context;
1010f9dc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010f9e0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010f9e4:	d0a00d17 	ldw	r2,-32716(gp)
1010f9e8:	10c000c4 	addi	r3,r2,3
1010f9ec:	00bfff04 	movi	r2,-4
1010f9f0:	1884703a 	and	r2,r3,r2
1010f9f4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010f9f8:	d0e00d17 	ldw	r3,-32716(gp)
1010f9fc:	e0bfff17 	ldw	r2,-4(fp)
1010fa00:	1887883a 	add	r3,r3,r2
1010fa04:	008404b4 	movhi	r2,4114
1010fa08:	10800004 	addi	r2,r2,0
1010fa0c:	10c0062e 	bgeu	r2,r3,1010fa28 <sbrk+0x74>
1010fa10:	e0bffb17 	ldw	r2,-20(fp)
1010fa14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fa18:	e0bffa17 	ldw	r2,-24(fp)
1010fa1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010fa20:	00bfffc4 	movi	r2,-1
1010fa24:	00000b06 	br	1010fa54 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010fa28:	d0a00d17 	ldw	r2,-32716(gp)
1010fa2c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010fa30:	d0e00d17 	ldw	r3,-32716(gp)
1010fa34:	e0bfff17 	ldw	r2,-4(fp)
1010fa38:	1885883a 	add	r2,r3,r2
1010fa3c:	d0a00d15 	stw	r2,-32716(gp)
1010fa40:	e0bffb17 	ldw	r2,-20(fp)
1010fa44:	e0bffc15 	stw	r2,-16(fp)
1010fa48:	e0bffc17 	ldw	r2,-16(fp)
1010fa4c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010fa50:	e0bffd17 	ldw	r2,-12(fp)
} 
1010fa54:	e037883a 	mov	sp,fp
1010fa58:	df000017 	ldw	fp,0(sp)
1010fa5c:	dec00104 	addi	sp,sp,4
1010fa60:	f800283a 	ret

1010fa64 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1010fa64:	defffd04 	addi	sp,sp,-12
1010fa68:	dfc00215 	stw	ra,8(sp)
1010fa6c:	df000115 	stw	fp,4(sp)
1010fa70:	df000104 	addi	fp,sp,4
1010fa74:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1010fa78:	e13fff17 	ldw	r4,-4(fp)
1010fa7c:	01108100 	call	10110810 <alt_busy_sleep>
}
1010fa80:	e037883a 	mov	sp,fp
1010fa84:	dfc00117 	ldw	ra,4(sp)
1010fa88:	df000017 	ldw	fp,0(sp)
1010fa8c:	dec00204 	addi	sp,sp,8
1010fa90:	f800283a 	ret

1010fa94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fa94:	defffe04 	addi	sp,sp,-8
1010fa98:	dfc00115 	stw	ra,4(sp)
1010fa9c:	df000015 	stw	fp,0(sp)
1010faa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010faa4:	d0a00b17 	ldw	r2,-32724(gp)
1010faa8:	10000326 	beq	r2,zero,1010fab8 <alt_get_errno+0x24>
1010faac:	d0a00b17 	ldw	r2,-32724(gp)
1010fab0:	103ee83a 	callr	r2
1010fab4:	00000106 	br	1010fabc <alt_get_errno+0x28>
1010fab8:	d0a6cd04 	addi	r2,gp,-25804
}
1010fabc:	e037883a 	mov	sp,fp
1010fac0:	dfc00117 	ldw	ra,4(sp)
1010fac4:	df000017 	ldw	fp,0(sp)
1010fac8:	dec00204 	addi	sp,sp,8
1010facc:	f800283a 	ret

1010fad0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010fad0:	defff904 	addi	sp,sp,-28
1010fad4:	dfc00615 	stw	ra,24(sp)
1010fad8:	df000515 	stw	fp,20(sp)
1010fadc:	df000504 	addi	fp,sp,20
1010fae0:	e13ffd15 	stw	r4,-12(fp)
1010fae4:	e17ffe15 	stw	r5,-8(fp)
1010fae8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010faec:	e0bffd17 	ldw	r2,-12(fp)
1010faf0:	10000616 	blt	r2,zero,1010fb0c <write+0x3c>
1010faf4:	e0bffd17 	ldw	r2,-12(fp)
1010faf8:	10c00324 	muli	r3,r2,12
1010fafc:	00840474 	movhi	r2,4113
1010fb00:	10887804 	addi	r2,r2,8672
1010fb04:	1885883a 	add	r2,r3,r2
1010fb08:	00000106 	br	1010fb10 <write+0x40>
1010fb0c:	0005883a 	mov	r2,zero
1010fb10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010fb14:	e0bffb17 	ldw	r2,-20(fp)
1010fb18:	10002126 	beq	r2,zero,1010fba0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010fb1c:	e0bffb17 	ldw	r2,-20(fp)
1010fb20:	10800217 	ldw	r2,8(r2)
1010fb24:	108000cc 	andi	r2,r2,3
1010fb28:	10001826 	beq	r2,zero,1010fb8c <write+0xbc>
1010fb2c:	e0bffb17 	ldw	r2,-20(fp)
1010fb30:	10800017 	ldw	r2,0(r2)
1010fb34:	10800617 	ldw	r2,24(r2)
1010fb38:	10001426 	beq	r2,zero,1010fb8c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010fb3c:	e0bffb17 	ldw	r2,-20(fp)
1010fb40:	10800017 	ldw	r2,0(r2)
1010fb44:	10800617 	ldw	r2,24(r2)
1010fb48:	e0ffff17 	ldw	r3,-4(fp)
1010fb4c:	180d883a 	mov	r6,r3
1010fb50:	e17ffe17 	ldw	r5,-8(fp)
1010fb54:	e13ffb17 	ldw	r4,-20(fp)
1010fb58:	103ee83a 	callr	r2
1010fb5c:	e0bffc15 	stw	r2,-16(fp)
1010fb60:	e0bffc17 	ldw	r2,-16(fp)
1010fb64:	1000070e 	bge	r2,zero,1010fb84 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010fb68:	010fa940 	call	1010fa94 <alt_get_errno>
1010fb6c:	1007883a 	mov	r3,r2
1010fb70:	e0bffc17 	ldw	r2,-16(fp)
1010fb74:	0085c83a 	sub	r2,zero,r2
1010fb78:	18800015 	stw	r2,0(r3)
        return -1;
1010fb7c:	00bfffc4 	movi	r2,-1
1010fb80:	00000c06 	br	1010fbb4 <write+0xe4>
      }
      return rval;
1010fb84:	e0bffc17 	ldw	r2,-16(fp)
1010fb88:	00000a06 	br	1010fbb4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010fb8c:	010fa940 	call	1010fa94 <alt_get_errno>
1010fb90:	1007883a 	mov	r3,r2
1010fb94:	00800344 	movi	r2,13
1010fb98:	18800015 	stw	r2,0(r3)
1010fb9c:	00000406 	br	1010fbb0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010fba0:	010fa940 	call	1010fa94 <alt_get_errno>
1010fba4:	1007883a 	mov	r3,r2
1010fba8:	00801444 	movi	r2,81
1010fbac:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010fbb0:	00bfffc4 	movi	r2,-1
}
1010fbb4:	e037883a 	mov	sp,fp
1010fbb8:	dfc00117 	ldw	ra,4(sp)
1010fbbc:	df000017 	ldw	fp,0(sp)
1010fbc0:	dec00204 	addi	sp,sp,8
1010fbc4:	f800283a 	ret

1010fbc8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010fbc8:	defffd04 	addi	sp,sp,-12
1010fbcc:	dfc00215 	stw	ra,8(sp)
1010fbd0:	df000115 	stw	fp,4(sp)
1010fbd4:	df000104 	addi	fp,sp,4
1010fbd8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010fbdc:	d1600804 	addi	r5,gp,-32736
1010fbe0:	e13fff17 	ldw	r4,-4(fp)
1010fbe4:	01109ec0 	call	101109ec <alt_dev_llist_insert>
}
1010fbe8:	e037883a 	mov	sp,fp
1010fbec:	dfc00117 	ldw	ra,4(sp)
1010fbf0:	df000017 	ldw	fp,0(sp)
1010fbf4:	dec00204 	addi	sp,sp,8
1010fbf8:	f800283a 	ret

1010fbfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010fbfc:	defffd04 	addi	sp,sp,-12
1010fc00:	dfc00215 	stw	ra,8(sp)
1010fc04:	df000115 	stw	fp,4(sp)
1010fc08:	df000104 	addi	fp,sp,4
1010fc0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010fc10:	01111400 	call	10111140 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010fc14:	00800044 	movi	r2,1
1010fc18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010fc1c:	0001883a 	nop
1010fc20:	e037883a 	mov	sp,fp
1010fc24:	dfc00117 	ldw	ra,4(sp)
1010fc28:	df000017 	ldw	fp,0(sp)
1010fc2c:	dec00204 	addi	sp,sp,8
1010fc30:	f800283a 	ret

1010fc34 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010fc34:	defffe04 	addi	sp,sp,-8
1010fc38:	dfc00115 	stw	ra,4(sp)
1010fc3c:	df000015 	stw	fp,0(sp)
1010fc40:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010fc44:	01800044 	movi	r6,1
1010fc48:	000b883a 	mov	r5,zero
1010fc4c:	01040474 	movhi	r4,4113
1010fc50:	2108e204 	addi	r4,r4,9096
1010fc54:	010fde00 	call	1010fde0 <altera_avalon_jtag_uart_init>
1010fc58:	01040474 	movhi	r4,4113
1010fc5c:	2108d804 	addi	r4,r4,9056
1010fc60:	010fbc80 	call	1010fbc8 <alt_dev_reg>
}
1010fc64:	0001883a 	nop
1010fc68:	e037883a 	mov	sp,fp
1010fc6c:	dfc00117 	ldw	ra,4(sp)
1010fc70:	df000017 	ldw	fp,0(sp)
1010fc74:	dec00204 	addi	sp,sp,8
1010fc78:	f800283a 	ret

1010fc7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010fc7c:	defffa04 	addi	sp,sp,-24
1010fc80:	dfc00515 	stw	ra,20(sp)
1010fc84:	df000415 	stw	fp,16(sp)
1010fc88:	df000404 	addi	fp,sp,16
1010fc8c:	e13ffd15 	stw	r4,-12(fp)
1010fc90:	e17ffe15 	stw	r5,-8(fp)
1010fc94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010fc98:	e0bffd17 	ldw	r2,-12(fp)
1010fc9c:	10800017 	ldw	r2,0(r2)
1010fca0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010fca4:	e0bffc17 	ldw	r2,-16(fp)
1010fca8:	10c00a04 	addi	r3,r2,40
1010fcac:	e0bffd17 	ldw	r2,-12(fp)
1010fcb0:	10800217 	ldw	r2,8(r2)
1010fcb4:	100f883a 	mov	r7,r2
1010fcb8:	e1bfff17 	ldw	r6,-4(fp)
1010fcbc:	e17ffe17 	ldw	r5,-8(fp)
1010fcc0:	1809883a 	mov	r4,r3
1010fcc4:	01102a40 	call	101102a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010fcc8:	e037883a 	mov	sp,fp
1010fccc:	dfc00117 	ldw	ra,4(sp)
1010fcd0:	df000017 	ldw	fp,0(sp)
1010fcd4:	dec00204 	addi	sp,sp,8
1010fcd8:	f800283a 	ret

1010fcdc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010fcdc:	defffa04 	addi	sp,sp,-24
1010fce0:	dfc00515 	stw	ra,20(sp)
1010fce4:	df000415 	stw	fp,16(sp)
1010fce8:	df000404 	addi	fp,sp,16
1010fcec:	e13ffd15 	stw	r4,-12(fp)
1010fcf0:	e17ffe15 	stw	r5,-8(fp)
1010fcf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010fcf8:	e0bffd17 	ldw	r2,-12(fp)
1010fcfc:	10800017 	ldw	r2,0(r2)
1010fd00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010fd04:	e0bffc17 	ldw	r2,-16(fp)
1010fd08:	10c00a04 	addi	r3,r2,40
1010fd0c:	e0bffd17 	ldw	r2,-12(fp)
1010fd10:	10800217 	ldw	r2,8(r2)
1010fd14:	100f883a 	mov	r7,r2
1010fd18:	e1bfff17 	ldw	r6,-4(fp)
1010fd1c:	e17ffe17 	ldw	r5,-8(fp)
1010fd20:	1809883a 	mov	r4,r3
1010fd24:	01104c00 	call	101104c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010fd28:	e037883a 	mov	sp,fp
1010fd2c:	dfc00117 	ldw	ra,4(sp)
1010fd30:	df000017 	ldw	fp,0(sp)
1010fd34:	dec00204 	addi	sp,sp,8
1010fd38:	f800283a 	ret

1010fd3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010fd3c:	defffc04 	addi	sp,sp,-16
1010fd40:	dfc00315 	stw	ra,12(sp)
1010fd44:	df000215 	stw	fp,8(sp)
1010fd48:	df000204 	addi	fp,sp,8
1010fd4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010fd50:	e0bfff17 	ldw	r2,-4(fp)
1010fd54:	10800017 	ldw	r2,0(r2)
1010fd58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010fd5c:	e0bffe17 	ldw	r2,-8(fp)
1010fd60:	10c00a04 	addi	r3,r2,40
1010fd64:	e0bfff17 	ldw	r2,-4(fp)
1010fd68:	10800217 	ldw	r2,8(r2)
1010fd6c:	100b883a 	mov	r5,r2
1010fd70:	1809883a 	mov	r4,r3
1010fd74:	011014c0 	call	1011014c <altera_avalon_jtag_uart_close>
}
1010fd78:	e037883a 	mov	sp,fp
1010fd7c:	dfc00117 	ldw	ra,4(sp)
1010fd80:	df000017 	ldw	fp,0(sp)
1010fd84:	dec00204 	addi	sp,sp,8
1010fd88:	f800283a 	ret

1010fd8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010fd8c:	defffa04 	addi	sp,sp,-24
1010fd90:	dfc00515 	stw	ra,20(sp)
1010fd94:	df000415 	stw	fp,16(sp)
1010fd98:	df000404 	addi	fp,sp,16
1010fd9c:	e13ffd15 	stw	r4,-12(fp)
1010fda0:	e17ffe15 	stw	r5,-8(fp)
1010fda4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010fda8:	e0bffd17 	ldw	r2,-12(fp)
1010fdac:	10800017 	ldw	r2,0(r2)
1010fdb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010fdb4:	e0bffc17 	ldw	r2,-16(fp)
1010fdb8:	10800a04 	addi	r2,r2,40
1010fdbc:	e1bfff17 	ldw	r6,-4(fp)
1010fdc0:	e17ffe17 	ldw	r5,-8(fp)
1010fdc4:	1009883a 	mov	r4,r2
1010fdc8:	01101b40 	call	101101b4 <altera_avalon_jtag_uart_ioctl>
}
1010fdcc:	e037883a 	mov	sp,fp
1010fdd0:	dfc00117 	ldw	ra,4(sp)
1010fdd4:	df000017 	ldw	fp,0(sp)
1010fdd8:	dec00204 	addi	sp,sp,8
1010fddc:	f800283a 	ret

1010fde0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010fde0:	defffa04 	addi	sp,sp,-24
1010fde4:	dfc00515 	stw	ra,20(sp)
1010fde8:	df000415 	stw	fp,16(sp)
1010fdec:	df000404 	addi	fp,sp,16
1010fdf0:	e13ffd15 	stw	r4,-12(fp)
1010fdf4:	e17ffe15 	stw	r5,-8(fp)
1010fdf8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010fdfc:	e0bffd17 	ldw	r2,-12(fp)
1010fe00:	00c00044 	movi	r3,1
1010fe04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010fe08:	e0bffd17 	ldw	r2,-12(fp)
1010fe0c:	10800017 	ldw	r2,0(r2)
1010fe10:	10800104 	addi	r2,r2,4
1010fe14:	1007883a 	mov	r3,r2
1010fe18:	e0bffd17 	ldw	r2,-12(fp)
1010fe1c:	10800817 	ldw	r2,32(r2)
1010fe20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010fe24:	e0bffe17 	ldw	r2,-8(fp)
1010fe28:	e0ffff17 	ldw	r3,-4(fp)
1010fe2c:	d8000015 	stw	zero,0(sp)
1010fe30:	e1fffd17 	ldw	r7,-12(fp)
1010fe34:	01840474 	movhi	r6,4113
1010fe38:	31bfa804 	addi	r6,r6,-352
1010fe3c:	180b883a 	mov	r5,r3
1010fe40:	1009883a 	mov	r4,r2
1010fe44:	010ef840 	call	1010ef84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010fe48:	e0bffd17 	ldw	r2,-12(fp)
1010fe4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010fe50:	e0bffd17 	ldw	r2,-12(fp)
1010fe54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010fe58:	d0e6d917 	ldw	r3,-25756(gp)
1010fe5c:	e1fffd17 	ldw	r7,-12(fp)
1010fe60:	01840474 	movhi	r6,4113
1010fe64:	31802b04 	addi	r6,r6,172
1010fe68:	180b883a 	mov	r5,r3
1010fe6c:	1009883a 	mov	r4,r2
1010fe70:	01106e40 	call	101106e4 <alt_alarm_start>
1010fe74:	1000040e 	bge	r2,zero,1010fe88 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010fe78:	e0fffd17 	ldw	r3,-12(fp)
1010fe7c:	00a00034 	movhi	r2,32768
1010fe80:	10bfffc4 	addi	r2,r2,-1
1010fe84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010fe88:	0001883a 	nop
1010fe8c:	e037883a 	mov	sp,fp
1010fe90:	dfc00117 	ldw	ra,4(sp)
1010fe94:	df000017 	ldw	fp,0(sp)
1010fe98:	dec00204 	addi	sp,sp,8
1010fe9c:	f800283a 	ret

1010fea0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010fea0:	defff804 	addi	sp,sp,-32
1010fea4:	df000715 	stw	fp,28(sp)
1010fea8:	df000704 	addi	fp,sp,28
1010feac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010feb0:	e0bfff17 	ldw	r2,-4(fp)
1010feb4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010feb8:	e0bffb17 	ldw	r2,-20(fp)
1010febc:	10800017 	ldw	r2,0(r2)
1010fec0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010fec4:	e0bffc17 	ldw	r2,-16(fp)
1010fec8:	10800104 	addi	r2,r2,4
1010fecc:	10800037 	ldwio	r2,0(r2)
1010fed0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010fed4:	e0bffd17 	ldw	r2,-12(fp)
1010fed8:	1080c00c 	andi	r2,r2,768
1010fedc:	10006d26 	beq	r2,zero,10110094 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010fee0:	e0bffd17 	ldw	r2,-12(fp)
1010fee4:	1080400c 	andi	r2,r2,256
1010fee8:	10003526 	beq	r2,zero,1010ffc0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010feec:	00800074 	movhi	r2,1
1010fef0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fef4:	e0bffb17 	ldw	r2,-20(fp)
1010fef8:	10800a17 	ldw	r2,40(r2)
1010fefc:	10800044 	addi	r2,r2,1
1010ff00:	1081ffcc 	andi	r2,r2,2047
1010ff04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010ff08:	e0bffb17 	ldw	r2,-20(fp)
1010ff0c:	10c00b17 	ldw	r3,44(r2)
1010ff10:	e0bffe17 	ldw	r2,-8(fp)
1010ff14:	18801526 	beq	r3,r2,1010ff6c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010ff18:	e0bffc17 	ldw	r2,-16(fp)
1010ff1c:	10800037 	ldwio	r2,0(r2)
1010ff20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010ff24:	e0bff917 	ldw	r2,-28(fp)
1010ff28:	10a0000c 	andi	r2,r2,32768
1010ff2c:	10001126 	beq	r2,zero,1010ff74 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010ff30:	e0bffb17 	ldw	r2,-20(fp)
1010ff34:	10800a17 	ldw	r2,40(r2)
1010ff38:	e0fff917 	ldw	r3,-28(fp)
1010ff3c:	1809883a 	mov	r4,r3
1010ff40:	e0fffb17 	ldw	r3,-20(fp)
1010ff44:	1885883a 	add	r2,r3,r2
1010ff48:	10800e04 	addi	r2,r2,56
1010ff4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010ff50:	e0bffb17 	ldw	r2,-20(fp)
1010ff54:	10800a17 	ldw	r2,40(r2)
1010ff58:	10800044 	addi	r2,r2,1
1010ff5c:	10c1ffcc 	andi	r3,r2,2047
1010ff60:	e0bffb17 	ldw	r2,-20(fp)
1010ff64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010ff68:	003fe206 	br	1010fef4 <__alt_data_end+0xfffefef4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010ff6c:	0001883a 	nop
1010ff70:	00000106 	br	1010ff78 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010ff74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010ff78:	e0bff917 	ldw	r2,-28(fp)
1010ff7c:	10bfffec 	andhi	r2,r2,65535
1010ff80:	10000f26 	beq	r2,zero,1010ffc0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010ff84:	e0bffb17 	ldw	r2,-20(fp)
1010ff88:	10c00817 	ldw	r3,32(r2)
1010ff8c:	00bfff84 	movi	r2,-2
1010ff90:	1886703a 	and	r3,r3,r2
1010ff94:	e0bffb17 	ldw	r2,-20(fp)
1010ff98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010ff9c:	e0bffc17 	ldw	r2,-16(fp)
1010ffa0:	10800104 	addi	r2,r2,4
1010ffa4:	1007883a 	mov	r3,r2
1010ffa8:	e0bffb17 	ldw	r2,-20(fp)
1010ffac:	10800817 	ldw	r2,32(r2)
1010ffb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010ffb4:	e0bffc17 	ldw	r2,-16(fp)
1010ffb8:	10800104 	addi	r2,r2,4
1010ffbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010ffc0:	e0bffd17 	ldw	r2,-12(fp)
1010ffc4:	1080800c 	andi	r2,r2,512
1010ffc8:	103fbe26 	beq	r2,zero,1010fec4 <__alt_data_end+0xfffefec4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010ffcc:	e0bffd17 	ldw	r2,-12(fp)
1010ffd0:	1004d43a 	srli	r2,r2,16
1010ffd4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010ffd8:	00001406 	br	1011002c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010ffdc:	e0bffc17 	ldw	r2,-16(fp)
1010ffe0:	e0fffb17 	ldw	r3,-20(fp)
1010ffe4:	18c00d17 	ldw	r3,52(r3)
1010ffe8:	e13ffb17 	ldw	r4,-20(fp)
1010ffec:	20c7883a 	add	r3,r4,r3
1010fff0:	18c20e04 	addi	r3,r3,2104
1010fff4:	18c00003 	ldbu	r3,0(r3)
1010fff8:	18c03fcc 	andi	r3,r3,255
1010fffc:	18c0201c 	xori	r3,r3,128
10110000:	18ffe004 	addi	r3,r3,-128
10110004:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10110008:	e0bffb17 	ldw	r2,-20(fp)
1011000c:	10800d17 	ldw	r2,52(r2)
10110010:	10800044 	addi	r2,r2,1
10110014:	10c1ffcc 	andi	r3,r2,2047
10110018:	e0bffb17 	ldw	r2,-20(fp)
1011001c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10110020:	e0bffa17 	ldw	r2,-24(fp)
10110024:	10bfffc4 	addi	r2,r2,-1
10110028:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1011002c:	e0bffa17 	ldw	r2,-24(fp)
10110030:	10000526 	beq	r2,zero,10110048 <altera_avalon_jtag_uart_irq+0x1a8>
10110034:	e0bffb17 	ldw	r2,-20(fp)
10110038:	10c00d17 	ldw	r3,52(r2)
1011003c:	e0bffb17 	ldw	r2,-20(fp)
10110040:	10800c17 	ldw	r2,48(r2)
10110044:	18bfe51e 	bne	r3,r2,1010ffdc <__alt_data_end+0xfffeffdc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10110048:	e0bffa17 	ldw	r2,-24(fp)
1011004c:	103f9d26 	beq	r2,zero,1010fec4 <__alt_data_end+0xfffefec4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10110050:	e0bffb17 	ldw	r2,-20(fp)
10110054:	10c00817 	ldw	r3,32(r2)
10110058:	00bfff44 	movi	r2,-3
1011005c:	1886703a 	and	r3,r3,r2
10110060:	e0bffb17 	ldw	r2,-20(fp)
10110064:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10110068:	e0bffb17 	ldw	r2,-20(fp)
1011006c:	10800017 	ldw	r2,0(r2)
10110070:	10800104 	addi	r2,r2,4
10110074:	1007883a 	mov	r3,r2
10110078:	e0bffb17 	ldw	r2,-20(fp)
1011007c:	10800817 	ldw	r2,32(r2)
10110080:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10110084:	e0bffc17 	ldw	r2,-16(fp)
10110088:	10800104 	addi	r2,r2,4
1011008c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10110090:	003f8c06 	br	1010fec4 <__alt_data_end+0xfffefec4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10110094:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10110098:	0001883a 	nop
1011009c:	e037883a 	mov	sp,fp
101100a0:	df000017 	ldw	fp,0(sp)
101100a4:	dec00104 	addi	sp,sp,4
101100a8:	f800283a 	ret

101100ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
101100ac:	defff804 	addi	sp,sp,-32
101100b0:	df000715 	stw	fp,28(sp)
101100b4:	df000704 	addi	fp,sp,28
101100b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
101100bc:	e0bffb17 	ldw	r2,-20(fp)
101100c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
101100c4:	e0bff917 	ldw	r2,-28(fp)
101100c8:	10800017 	ldw	r2,0(r2)
101100cc:	10800104 	addi	r2,r2,4
101100d0:	10800037 	ldwio	r2,0(r2)
101100d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
101100d8:	e0bffa17 	ldw	r2,-24(fp)
101100dc:	1081000c 	andi	r2,r2,1024
101100e0:	10000b26 	beq	r2,zero,10110110 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
101100e4:	e0bff917 	ldw	r2,-28(fp)
101100e8:	10800017 	ldw	r2,0(r2)
101100ec:	10800104 	addi	r2,r2,4
101100f0:	1007883a 	mov	r3,r2
101100f4:	e0bff917 	ldw	r2,-28(fp)
101100f8:	10800817 	ldw	r2,32(r2)
101100fc:	10810014 	ori	r2,r2,1024
10110100:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10110104:	e0bff917 	ldw	r2,-28(fp)
10110108:	10000915 	stw	zero,36(r2)
1011010c:	00000a06 	br	10110138 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10110110:	e0bff917 	ldw	r2,-28(fp)
10110114:	10c00917 	ldw	r3,36(r2)
10110118:	00a00034 	movhi	r2,32768
1011011c:	10bfff04 	addi	r2,r2,-4
10110120:	10c00536 	bltu	r2,r3,10110138 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10110124:	e0bff917 	ldw	r2,-28(fp)
10110128:	10800917 	ldw	r2,36(r2)
1011012c:	10c00044 	addi	r3,r2,1
10110130:	e0bff917 	ldw	r2,-28(fp)
10110134:	10c00915 	stw	r3,36(r2)
10110138:	d0a6d917 	ldw	r2,-25756(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1011013c:	e037883a 	mov	sp,fp
10110140:	df000017 	ldw	fp,0(sp)
10110144:	dec00104 	addi	sp,sp,4
10110148:	f800283a 	ret

1011014c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1011014c:	defffd04 	addi	sp,sp,-12
10110150:	df000215 	stw	fp,8(sp)
10110154:	df000204 	addi	fp,sp,8
10110158:	e13ffe15 	stw	r4,-8(fp)
1011015c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10110160:	00000506 	br	10110178 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10110164:	e0bfff17 	ldw	r2,-4(fp)
10110168:	1090000c 	andi	r2,r2,16384
1011016c:	10000226 	beq	r2,zero,10110178 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10110170:	00bffd44 	movi	r2,-11
10110174:	00000b06 	br	101101a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10110178:	e0bffe17 	ldw	r2,-8(fp)
1011017c:	10c00d17 	ldw	r3,52(r2)
10110180:	e0bffe17 	ldw	r2,-8(fp)
10110184:	10800c17 	ldw	r2,48(r2)
10110188:	18800526 	beq	r3,r2,101101a0 <altera_avalon_jtag_uart_close+0x54>
1011018c:	e0bffe17 	ldw	r2,-8(fp)
10110190:	10c00917 	ldw	r3,36(r2)
10110194:	e0bffe17 	ldw	r2,-8(fp)
10110198:	10800117 	ldw	r2,4(r2)
1011019c:	18bff136 	bltu	r3,r2,10110164 <__alt_data_end+0xffff0164>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
101101a0:	0005883a 	mov	r2,zero
}
101101a4:	e037883a 	mov	sp,fp
101101a8:	df000017 	ldw	fp,0(sp)
101101ac:	dec00104 	addi	sp,sp,4
101101b0:	f800283a 	ret

101101b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
101101b4:	defffa04 	addi	sp,sp,-24
101101b8:	df000515 	stw	fp,20(sp)
101101bc:	df000504 	addi	fp,sp,20
101101c0:	e13ffd15 	stw	r4,-12(fp)
101101c4:	e17ffe15 	stw	r5,-8(fp)
101101c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
101101cc:	00bff9c4 	movi	r2,-25
101101d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
101101d4:	e0bffe17 	ldw	r2,-8(fp)
101101d8:	10da8060 	cmpeqi	r3,r2,27137
101101dc:	1800031e 	bne	r3,zero,101101ec <altera_avalon_jtag_uart_ioctl+0x38>
101101e0:	109a80a0 	cmpeqi	r2,r2,27138
101101e4:	1000181e 	bne	r2,zero,10110248 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
101101e8:	00002906 	br	10110290 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
101101ec:	e0bffd17 	ldw	r2,-12(fp)
101101f0:	10c00117 	ldw	r3,4(r2)
101101f4:	00a00034 	movhi	r2,32768
101101f8:	10bfffc4 	addi	r2,r2,-1
101101fc:	18802126 	beq	r3,r2,10110284 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10110200:	e0bfff17 	ldw	r2,-4(fp)
10110204:	10800017 	ldw	r2,0(r2)
10110208:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1011020c:	e0bffc17 	ldw	r2,-16(fp)
10110210:	10800090 	cmplti	r2,r2,2
10110214:	1000061e 	bne	r2,zero,10110230 <altera_avalon_jtag_uart_ioctl+0x7c>
10110218:	e0fffc17 	ldw	r3,-16(fp)
1011021c:	00a00034 	movhi	r2,32768
10110220:	10bfffc4 	addi	r2,r2,-1
10110224:	18800226 	beq	r3,r2,10110230 <altera_avalon_jtag_uart_ioctl+0x7c>
10110228:	e0bffc17 	ldw	r2,-16(fp)
1011022c:	00000206 	br	10110238 <altera_avalon_jtag_uart_ioctl+0x84>
10110230:	00a00034 	movhi	r2,32768
10110234:	10bfff84 	addi	r2,r2,-2
10110238:	e0fffd17 	ldw	r3,-12(fp)
1011023c:	18800115 	stw	r2,4(r3)
      rc = 0;
10110240:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10110244:	00000f06 	br	10110284 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10110248:	e0bffd17 	ldw	r2,-12(fp)
1011024c:	10c00117 	ldw	r3,4(r2)
10110250:	00a00034 	movhi	r2,32768
10110254:	10bfffc4 	addi	r2,r2,-1
10110258:	18800c26 	beq	r3,r2,1011028c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1011025c:	e0bffd17 	ldw	r2,-12(fp)
10110260:	10c00917 	ldw	r3,36(r2)
10110264:	e0bffd17 	ldw	r2,-12(fp)
10110268:	10800117 	ldw	r2,4(r2)
1011026c:	1885803a 	cmpltu	r2,r3,r2
10110270:	10c03fcc 	andi	r3,r2,255
10110274:	e0bfff17 	ldw	r2,-4(fp)
10110278:	10c00015 	stw	r3,0(r2)
      rc = 0;
1011027c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10110280:	00000206 	br	1011028c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10110284:	0001883a 	nop
10110288:	00000106 	br	10110290 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1011028c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10110290:	e0bffb17 	ldw	r2,-20(fp)
}
10110294:	e037883a 	mov	sp,fp
10110298:	df000017 	ldw	fp,0(sp)
1011029c:	dec00104 	addi	sp,sp,4
101102a0:	f800283a 	ret

101102a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
101102a4:	defff304 	addi	sp,sp,-52
101102a8:	dfc00c15 	stw	ra,48(sp)
101102ac:	df000b15 	stw	fp,44(sp)
101102b0:	df000b04 	addi	fp,sp,44
101102b4:	e13ffc15 	stw	r4,-16(fp)
101102b8:	e17ffd15 	stw	r5,-12(fp)
101102bc:	e1bffe15 	stw	r6,-8(fp)
101102c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
101102c4:	e0bffd17 	ldw	r2,-12(fp)
101102c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101102cc:	00004706 	br	101103ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
101102d0:	e0bffc17 	ldw	r2,-16(fp)
101102d4:	10800a17 	ldw	r2,40(r2)
101102d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
101102dc:	e0bffc17 	ldw	r2,-16(fp)
101102e0:	10800b17 	ldw	r2,44(r2)
101102e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
101102e8:	e0fff717 	ldw	r3,-36(fp)
101102ec:	e0bff817 	ldw	r2,-32(fp)
101102f0:	18800536 	bltu	r3,r2,10110308 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
101102f4:	e0fff717 	ldw	r3,-36(fp)
101102f8:	e0bff817 	ldw	r2,-32(fp)
101102fc:	1885c83a 	sub	r2,r3,r2
10110300:	e0bff615 	stw	r2,-40(fp)
10110304:	00000406 	br	10110318 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10110308:	00c20004 	movi	r3,2048
1011030c:	e0bff817 	ldw	r2,-32(fp)
10110310:	1885c83a 	sub	r2,r3,r2
10110314:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10110318:	e0bff617 	ldw	r2,-40(fp)
1011031c:	10001e26 	beq	r2,zero,10110398 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10110320:	e0fffe17 	ldw	r3,-8(fp)
10110324:	e0bff617 	ldw	r2,-40(fp)
10110328:	1880022e 	bgeu	r3,r2,10110334 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1011032c:	e0bffe17 	ldw	r2,-8(fp)
10110330:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10110334:	e0bffc17 	ldw	r2,-16(fp)
10110338:	10c00e04 	addi	r3,r2,56
1011033c:	e0bff817 	ldw	r2,-32(fp)
10110340:	1885883a 	add	r2,r3,r2
10110344:	e1bff617 	ldw	r6,-40(fp)
10110348:	100b883a 	mov	r5,r2
1011034c:	e13ff517 	ldw	r4,-44(fp)
10110350:	01086400 	call	10108640 <memcpy>
      ptr   += n;
10110354:	e0fff517 	ldw	r3,-44(fp)
10110358:	e0bff617 	ldw	r2,-40(fp)
1011035c:	1885883a 	add	r2,r3,r2
10110360:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10110364:	e0fffe17 	ldw	r3,-8(fp)
10110368:	e0bff617 	ldw	r2,-40(fp)
1011036c:	1885c83a 	sub	r2,r3,r2
10110370:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10110374:	e0fff817 	ldw	r3,-32(fp)
10110378:	e0bff617 	ldw	r2,-40(fp)
1011037c:	1885883a 	add	r2,r3,r2
10110380:	10c1ffcc 	andi	r3,r2,2047
10110384:	e0bffc17 	ldw	r2,-16(fp)
10110388:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1011038c:	e0bffe17 	ldw	r2,-8(fp)
10110390:	00bfcf16 	blt	zero,r2,101102d0 <__alt_data_end+0xffff02d0>
10110394:	00000106 	br	1011039c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10110398:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1011039c:	e0fff517 	ldw	r3,-44(fp)
101103a0:	e0bffd17 	ldw	r2,-12(fp)
101103a4:	1880141e 	bne	r3,r2,101103f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
101103a8:	e0bfff17 	ldw	r2,-4(fp)
101103ac:	1090000c 	andi	r2,r2,16384
101103b0:	1000131e 	bne	r2,zero,10110400 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
101103b4:	0001883a 	nop
101103b8:	e0bffc17 	ldw	r2,-16(fp)
101103bc:	10c00a17 	ldw	r3,40(r2)
101103c0:	e0bff717 	ldw	r2,-36(fp)
101103c4:	1880051e 	bne	r3,r2,101103dc <altera_avalon_jtag_uart_read+0x138>
101103c8:	e0bffc17 	ldw	r2,-16(fp)
101103cc:	10c00917 	ldw	r3,36(r2)
101103d0:	e0bffc17 	ldw	r2,-16(fp)
101103d4:	10800117 	ldw	r2,4(r2)
101103d8:	18bff736 	bltu	r3,r2,101103b8 <__alt_data_end+0xffff03b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
101103dc:	e0bffc17 	ldw	r2,-16(fp)
101103e0:	10c00a17 	ldw	r3,40(r2)
101103e4:	e0bff717 	ldw	r2,-36(fp)
101103e8:	18800726 	beq	r3,r2,10110408 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101103ec:	e0bffe17 	ldw	r2,-8(fp)
101103f0:	00bfb716 	blt	zero,r2,101102d0 <__alt_data_end+0xffff02d0>
101103f4:	00000506 	br	1011040c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
101103f8:	0001883a 	nop
101103fc:	00000306 	br	1011040c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10110400:	0001883a 	nop
10110404:	00000106 	br	1011040c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10110408:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1011040c:	e0fff517 	ldw	r3,-44(fp)
10110410:	e0bffd17 	ldw	r2,-12(fp)
10110414:	18801826 	beq	r3,r2,10110478 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110418:	0005303a 	rdctl	r2,status
1011041c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110420:	e0fffb17 	ldw	r3,-20(fp)
10110424:	00bfff84 	movi	r2,-2
10110428:	1884703a 	and	r2,r3,r2
1011042c:	1001703a 	wrctl	status,r2
  
  return context;
10110430:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10110434:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10110438:	e0bffc17 	ldw	r2,-16(fp)
1011043c:	10800817 	ldw	r2,32(r2)
10110440:	10c00054 	ori	r3,r2,1
10110444:	e0bffc17 	ldw	r2,-16(fp)
10110448:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1011044c:	e0bffc17 	ldw	r2,-16(fp)
10110450:	10800017 	ldw	r2,0(r2)
10110454:	10800104 	addi	r2,r2,4
10110458:	1007883a 	mov	r3,r2
1011045c:	e0bffc17 	ldw	r2,-16(fp)
10110460:	10800817 	ldw	r2,32(r2)
10110464:	18800035 	stwio	r2,0(r3)
10110468:	e0bffa17 	ldw	r2,-24(fp)
1011046c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110470:	e0bff917 	ldw	r2,-28(fp)
10110474:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10110478:	e0fff517 	ldw	r3,-44(fp)
1011047c:	e0bffd17 	ldw	r2,-12(fp)
10110480:	18800426 	beq	r3,r2,10110494 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10110484:	e0fff517 	ldw	r3,-44(fp)
10110488:	e0bffd17 	ldw	r2,-12(fp)
1011048c:	1885c83a 	sub	r2,r3,r2
10110490:	00000606 	br	101104ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10110494:	e0bfff17 	ldw	r2,-4(fp)
10110498:	1090000c 	andi	r2,r2,16384
1011049c:	10000226 	beq	r2,zero,101104a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
101104a0:	00bffd44 	movi	r2,-11
101104a4:	00000106 	br	101104ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
101104a8:	00bffec4 	movi	r2,-5
}
101104ac:	e037883a 	mov	sp,fp
101104b0:	dfc00117 	ldw	ra,4(sp)
101104b4:	df000017 	ldw	fp,0(sp)
101104b8:	dec00204 	addi	sp,sp,8
101104bc:	f800283a 	ret

101104c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
101104c0:	defff304 	addi	sp,sp,-52
101104c4:	dfc00c15 	stw	ra,48(sp)
101104c8:	df000b15 	stw	fp,44(sp)
101104cc:	df000b04 	addi	fp,sp,44
101104d0:	e13ffc15 	stw	r4,-16(fp)
101104d4:	e17ffd15 	stw	r5,-12(fp)
101104d8:	e1bffe15 	stw	r6,-8(fp)
101104dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
101104e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
101104e4:	e0bffd17 	ldw	r2,-12(fp)
101104e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
101104ec:	00003706 	br	101105cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
101104f0:	e0bffc17 	ldw	r2,-16(fp)
101104f4:	10800c17 	ldw	r2,48(r2)
101104f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
101104fc:	e0bffc17 	ldw	r2,-16(fp)
10110500:	10800d17 	ldw	r2,52(r2)
10110504:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10110508:	e0fff917 	ldw	r3,-28(fp)
1011050c:	e0bff517 	ldw	r2,-44(fp)
10110510:	1880062e 	bgeu	r3,r2,1011052c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10110514:	e0fff517 	ldw	r3,-44(fp)
10110518:	e0bff917 	ldw	r2,-28(fp)
1011051c:	1885c83a 	sub	r2,r3,r2
10110520:	10bfffc4 	addi	r2,r2,-1
10110524:	e0bff615 	stw	r2,-40(fp)
10110528:	00000b06 	br	10110558 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1011052c:	e0bff517 	ldw	r2,-44(fp)
10110530:	10000526 	beq	r2,zero,10110548 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10110534:	00c20004 	movi	r3,2048
10110538:	e0bff917 	ldw	r2,-28(fp)
1011053c:	1885c83a 	sub	r2,r3,r2
10110540:	e0bff615 	stw	r2,-40(fp)
10110544:	00000406 	br	10110558 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10110548:	00c1ffc4 	movi	r3,2047
1011054c:	e0bff917 	ldw	r2,-28(fp)
10110550:	1885c83a 	sub	r2,r3,r2
10110554:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10110558:	e0bff617 	ldw	r2,-40(fp)
1011055c:	10001e26 	beq	r2,zero,101105d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10110560:	e0fffe17 	ldw	r3,-8(fp)
10110564:	e0bff617 	ldw	r2,-40(fp)
10110568:	1880022e 	bgeu	r3,r2,10110574 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1011056c:	e0bffe17 	ldw	r2,-8(fp)
10110570:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10110574:	e0bffc17 	ldw	r2,-16(fp)
10110578:	10c20e04 	addi	r3,r2,2104
1011057c:	e0bff917 	ldw	r2,-28(fp)
10110580:	1885883a 	add	r2,r3,r2
10110584:	e1bff617 	ldw	r6,-40(fp)
10110588:	e17ffd17 	ldw	r5,-12(fp)
1011058c:	1009883a 	mov	r4,r2
10110590:	01086400 	call	10108640 <memcpy>
      ptr   += n;
10110594:	e0fffd17 	ldw	r3,-12(fp)
10110598:	e0bff617 	ldw	r2,-40(fp)
1011059c:	1885883a 	add	r2,r3,r2
101105a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
101105a4:	e0fffe17 	ldw	r3,-8(fp)
101105a8:	e0bff617 	ldw	r2,-40(fp)
101105ac:	1885c83a 	sub	r2,r3,r2
101105b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101105b4:	e0fff917 	ldw	r3,-28(fp)
101105b8:	e0bff617 	ldw	r2,-40(fp)
101105bc:	1885883a 	add	r2,r3,r2
101105c0:	10c1ffcc 	andi	r3,r2,2047
101105c4:	e0bffc17 	ldw	r2,-16(fp)
101105c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
101105cc:	e0bffe17 	ldw	r2,-8(fp)
101105d0:	00bfc716 	blt	zero,r2,101104f0 <__alt_data_end+0xffff04f0>
101105d4:	00000106 	br	101105dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
101105d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101105dc:	0005303a 	rdctl	r2,status
101105e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101105e4:	e0fffb17 	ldw	r3,-20(fp)
101105e8:	00bfff84 	movi	r2,-2
101105ec:	1884703a 	and	r2,r3,r2
101105f0:	1001703a 	wrctl	status,r2
  
  return context;
101105f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
101105f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
101105fc:	e0bffc17 	ldw	r2,-16(fp)
10110600:	10800817 	ldw	r2,32(r2)
10110604:	10c00094 	ori	r3,r2,2
10110608:	e0bffc17 	ldw	r2,-16(fp)
1011060c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10110610:	e0bffc17 	ldw	r2,-16(fp)
10110614:	10800017 	ldw	r2,0(r2)
10110618:	10800104 	addi	r2,r2,4
1011061c:	1007883a 	mov	r3,r2
10110620:	e0bffc17 	ldw	r2,-16(fp)
10110624:	10800817 	ldw	r2,32(r2)
10110628:	18800035 	stwio	r2,0(r3)
1011062c:	e0bffa17 	ldw	r2,-24(fp)
10110630:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110634:	e0bff817 	ldw	r2,-32(fp)
10110638:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1011063c:	e0bffe17 	ldw	r2,-8(fp)
10110640:	0080100e 	bge	zero,r2,10110684 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10110644:	e0bfff17 	ldw	r2,-4(fp)
10110648:	1090000c 	andi	r2,r2,16384
1011064c:	1000101e 	bne	r2,zero,10110690 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10110650:	0001883a 	nop
10110654:	e0bffc17 	ldw	r2,-16(fp)
10110658:	10c00d17 	ldw	r3,52(r2)
1011065c:	e0bff517 	ldw	r2,-44(fp)
10110660:	1880051e 	bne	r3,r2,10110678 <altera_avalon_jtag_uart_write+0x1b8>
10110664:	e0bffc17 	ldw	r2,-16(fp)
10110668:	10c00917 	ldw	r3,36(r2)
1011066c:	e0bffc17 	ldw	r2,-16(fp)
10110670:	10800117 	ldw	r2,4(r2)
10110674:	18bff736 	bltu	r3,r2,10110654 <__alt_data_end+0xffff0654>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10110678:	e0bffc17 	ldw	r2,-16(fp)
1011067c:	10800917 	ldw	r2,36(r2)
10110680:	1000051e 	bne	r2,zero,10110698 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10110684:	e0bffe17 	ldw	r2,-8(fp)
10110688:	00bfd016 	blt	zero,r2,101105cc <__alt_data_end+0xffff05cc>
1011068c:	00000306 	br	1011069c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10110690:	0001883a 	nop
10110694:	00000106 	br	1011069c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10110698:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1011069c:	e0fffd17 	ldw	r3,-12(fp)
101106a0:	e0bff717 	ldw	r2,-36(fp)
101106a4:	18800426 	beq	r3,r2,101106b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
101106a8:	e0fffd17 	ldw	r3,-12(fp)
101106ac:	e0bff717 	ldw	r2,-36(fp)
101106b0:	1885c83a 	sub	r2,r3,r2
101106b4:	00000606 	br	101106d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
101106b8:	e0bfff17 	ldw	r2,-4(fp)
101106bc:	1090000c 	andi	r2,r2,16384
101106c0:	10000226 	beq	r2,zero,101106cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
101106c4:	00bffd44 	movi	r2,-11
101106c8:	00000106 	br	101106d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
101106cc:	00bffec4 	movi	r2,-5
}
101106d0:	e037883a 	mov	sp,fp
101106d4:	dfc00117 	ldw	ra,4(sp)
101106d8:	df000017 	ldw	fp,0(sp)
101106dc:	dec00204 	addi	sp,sp,8
101106e0:	f800283a 	ret

101106e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
101106e4:	defff504 	addi	sp,sp,-44
101106e8:	df000a15 	stw	fp,40(sp)
101106ec:	df000a04 	addi	fp,sp,40
101106f0:	e13ffc15 	stw	r4,-16(fp)
101106f4:	e17ffd15 	stw	r5,-12(fp)
101106f8:	e1bffe15 	stw	r6,-8(fp)
101106fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10110700:	e03ff615 	stw	zero,-40(fp)
10110704:	d0a6d917 	ldw	r2,-25756(gp)
  
  if (alt_ticks_per_second ())
10110708:	10003c26 	beq	r2,zero,101107fc <alt_alarm_start+0x118>
  {
    if (alarm)
1011070c:	e0bffc17 	ldw	r2,-16(fp)
10110710:	10003826 	beq	r2,zero,101107f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10110714:	e0bffc17 	ldw	r2,-16(fp)
10110718:	e0fffe17 	ldw	r3,-8(fp)
1011071c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10110720:	e0bffc17 	ldw	r2,-16(fp)
10110724:	e0ffff17 	ldw	r3,-4(fp)
10110728:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011072c:	0005303a 	rdctl	r2,status
10110730:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110734:	e0fff917 	ldw	r3,-28(fp)
10110738:	00bfff84 	movi	r2,-2
1011073c:	1884703a 	and	r2,r3,r2
10110740:	1001703a 	wrctl	status,r2
  
  return context;
10110744:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10110748:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1011074c:	d0a6da17 	ldw	r2,-25752(gp)
      
      current_nticks = alt_nticks();
10110750:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10110754:	e0fffd17 	ldw	r3,-12(fp)
10110758:	e0bff617 	ldw	r2,-40(fp)
1011075c:	1885883a 	add	r2,r3,r2
10110760:	10c00044 	addi	r3,r2,1
10110764:	e0bffc17 	ldw	r2,-16(fp)
10110768:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1011076c:	e0bffc17 	ldw	r2,-16(fp)
10110770:	10c00217 	ldw	r3,8(r2)
10110774:	e0bff617 	ldw	r2,-40(fp)
10110778:	1880042e 	bgeu	r3,r2,1011078c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1011077c:	e0bffc17 	ldw	r2,-16(fp)
10110780:	00c00044 	movi	r3,1
10110784:	10c00405 	stb	r3,16(r2)
10110788:	00000206 	br	10110794 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1011078c:	e0bffc17 	ldw	r2,-16(fp)
10110790:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10110794:	e0bffc17 	ldw	r2,-16(fp)
10110798:	d0e00e04 	addi	r3,gp,-32712
1011079c:	e0fffa15 	stw	r3,-24(fp)
101107a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101107a4:	e0bffb17 	ldw	r2,-20(fp)
101107a8:	e0fffa17 	ldw	r3,-24(fp)
101107ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101107b0:	e0bffa17 	ldw	r2,-24(fp)
101107b4:	10c00017 	ldw	r3,0(r2)
101107b8:	e0bffb17 	ldw	r2,-20(fp)
101107bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101107c0:	e0bffa17 	ldw	r2,-24(fp)
101107c4:	10800017 	ldw	r2,0(r2)
101107c8:	e0fffb17 	ldw	r3,-20(fp)
101107cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101107d0:	e0bffa17 	ldw	r2,-24(fp)
101107d4:	e0fffb17 	ldw	r3,-20(fp)
101107d8:	10c00015 	stw	r3,0(r2)
101107dc:	e0bff817 	ldw	r2,-32(fp)
101107e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101107e4:	e0bff717 	ldw	r2,-36(fp)
101107e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
101107ec:	0005883a 	mov	r2,zero
101107f0:	00000306 	br	10110800 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
101107f4:	00bffa84 	movi	r2,-22
101107f8:	00000106 	br	10110800 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
101107fc:	00bfde84 	movi	r2,-134
  }
}
10110800:	e037883a 	mov	sp,fp
10110804:	df000017 	ldw	fp,0(sp)
10110808:	dec00104 	addi	sp,sp,4
1011080c:	f800283a 	ret

10110810 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10110810:	defffa04 	addi	sp,sp,-24
10110814:	dfc00515 	stw	ra,20(sp)
10110818:	df000415 	stw	fp,16(sp)
1011081c:	df000404 	addi	fp,sp,16
10110820:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10110824:	008000c4 	movi	r2,3
10110828:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1011082c:	e0fffd17 	ldw	r3,-12(fp)
10110830:	008003f4 	movhi	r2,15
10110834:	10909004 	addi	r2,r2,16960
10110838:	1885383a 	mul	r2,r3,r2
1011083c:	100b883a 	mov	r5,r2
10110840:	0100bef4 	movhi	r4,763
10110844:	213c2004 	addi	r4,r4,-3968
10110848:	0101b640 	call	10101b64 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1011084c:	100b883a 	mov	r5,r2
10110850:	01200034 	movhi	r4,32768
10110854:	213fffc4 	addi	r4,r4,-1
10110858:	0101b640 	call	10101b64 <__udivsi3>
1011085c:	100b883a 	mov	r5,r2
10110860:	e13fff17 	ldw	r4,-4(fp)
10110864:	0101b640 	call	10101b64 <__udivsi3>
10110868:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1011086c:	e0bffe17 	ldw	r2,-8(fp)
10110870:	10002a26 	beq	r2,zero,1011091c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10110874:	e03ffc15 	stw	zero,-16(fp)
10110878:	00001706 	br	101108d8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1011087c:	00a00034 	movhi	r2,32768
10110880:	10bfffc4 	addi	r2,r2,-1
10110884:	10bfffc4 	addi	r2,r2,-1
10110888:	103ffe1e 	bne	r2,zero,10110884 <__alt_data_end+0xffff0884>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1011088c:	e0fffd17 	ldw	r3,-12(fp)
10110890:	008003f4 	movhi	r2,15
10110894:	10909004 	addi	r2,r2,16960
10110898:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1011089c:	100b883a 	mov	r5,r2
101108a0:	0100bef4 	movhi	r4,763
101108a4:	213c2004 	addi	r4,r4,-3968
101108a8:	0101b640 	call	10101b64 <__udivsi3>
101108ac:	100b883a 	mov	r5,r2
101108b0:	01200034 	movhi	r4,32768
101108b4:	213fffc4 	addi	r4,r4,-1
101108b8:	0101b640 	call	10101b64 <__udivsi3>
101108bc:	1007883a 	mov	r3,r2
101108c0:	e0bfff17 	ldw	r2,-4(fp)
101108c4:	10c5c83a 	sub	r2,r2,r3
101108c8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
101108cc:	e0bffc17 	ldw	r2,-16(fp)
101108d0:	10800044 	addi	r2,r2,1
101108d4:	e0bffc15 	stw	r2,-16(fp)
101108d8:	e0fffc17 	ldw	r3,-16(fp)
101108dc:	e0bffe17 	ldw	r2,-8(fp)
101108e0:	18bfe616 	blt	r3,r2,1011087c <__alt_data_end+0xffff087c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101108e4:	e0fffd17 	ldw	r3,-12(fp)
101108e8:	008003f4 	movhi	r2,15
101108ec:	10909004 	addi	r2,r2,16960
101108f0:	1885383a 	mul	r2,r3,r2
101108f4:	100b883a 	mov	r5,r2
101108f8:	0100bef4 	movhi	r4,763
101108fc:	213c2004 	addi	r4,r4,-3968
10110900:	0101b640 	call	10101b64 <__udivsi3>
10110904:	1007883a 	mov	r3,r2
10110908:	e0bfff17 	ldw	r2,-4(fp)
1011090c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10110910:	10bfffc4 	addi	r2,r2,-1
10110914:	103ffe1e 	bne	r2,zero,10110910 <__alt_data_end+0xffff0910>
10110918:	00000d06 	br	10110950 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1011091c:	e0fffd17 	ldw	r3,-12(fp)
10110920:	008003f4 	movhi	r2,15
10110924:	10909004 	addi	r2,r2,16960
10110928:	1885383a 	mul	r2,r3,r2
1011092c:	100b883a 	mov	r5,r2
10110930:	0100bef4 	movhi	r4,763
10110934:	213c2004 	addi	r4,r4,-3968
10110938:	0101b640 	call	10101b64 <__udivsi3>
1011093c:	1007883a 	mov	r3,r2
10110940:	e0bfff17 	ldw	r2,-4(fp)
10110944:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10110948:	10bfffc4 	addi	r2,r2,-1
1011094c:	00bffe16 	blt	zero,r2,10110948 <__alt_data_end+0xffff0948>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10110950:	0005883a 	mov	r2,zero
}
10110954:	e037883a 	mov	sp,fp
10110958:	dfc00117 	ldw	ra,4(sp)
1011095c:	df000017 	ldw	fp,0(sp)
10110960:	dec00204 	addi	sp,sp,8
10110964:	f800283a 	ret

10110968 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10110968:	defffe04 	addi	sp,sp,-8
1011096c:	df000115 	stw	fp,4(sp)
10110970:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10110974:	e03fff15 	stw	zero,-4(fp)
10110978:	00000506 	br	10110990 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1011097c:	e0bfff17 	ldw	r2,-4(fp)
10110980:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10110984:	e0bfff17 	ldw	r2,-4(fp)
10110988:	10800804 	addi	r2,r2,32
1011098c:	e0bfff15 	stw	r2,-4(fp)
10110990:	e0bfff17 	ldw	r2,-4(fp)
10110994:	10820030 	cmpltui	r2,r2,2048
10110998:	103ff81e 	bne	r2,zero,1011097c <__alt_data_end+0xffff097c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1011099c:	0001883a 	nop
101109a0:	e037883a 	mov	sp,fp
101109a4:	df000017 	ldw	fp,0(sp)
101109a8:	dec00104 	addi	sp,sp,4
101109ac:	f800283a 	ret

101109b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101109b0:	defffe04 	addi	sp,sp,-8
101109b4:	dfc00115 	stw	ra,4(sp)
101109b8:	df000015 	stw	fp,0(sp)
101109bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101109c0:	d0a00b17 	ldw	r2,-32724(gp)
101109c4:	10000326 	beq	r2,zero,101109d4 <alt_get_errno+0x24>
101109c8:	d0a00b17 	ldw	r2,-32724(gp)
101109cc:	103ee83a 	callr	r2
101109d0:	00000106 	br	101109d8 <alt_get_errno+0x28>
101109d4:	d0a6cd04 	addi	r2,gp,-25804
}
101109d8:	e037883a 	mov	sp,fp
101109dc:	dfc00117 	ldw	ra,4(sp)
101109e0:	df000017 	ldw	fp,0(sp)
101109e4:	dec00204 	addi	sp,sp,8
101109e8:	f800283a 	ret

101109ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
101109ec:	defffa04 	addi	sp,sp,-24
101109f0:	dfc00515 	stw	ra,20(sp)
101109f4:	df000415 	stw	fp,16(sp)
101109f8:	df000404 	addi	fp,sp,16
101109fc:	e13ffe15 	stw	r4,-8(fp)
10110a00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10110a04:	e0bffe17 	ldw	r2,-8(fp)
10110a08:	10000326 	beq	r2,zero,10110a18 <alt_dev_llist_insert+0x2c>
10110a0c:	e0bffe17 	ldw	r2,-8(fp)
10110a10:	10800217 	ldw	r2,8(r2)
10110a14:	1000061e 	bne	r2,zero,10110a30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10110a18:	01109b00 	call	101109b0 <alt_get_errno>
10110a1c:	1007883a 	mov	r3,r2
10110a20:	00800584 	movi	r2,22
10110a24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10110a28:	00bffa84 	movi	r2,-22
10110a2c:	00001306 	br	10110a7c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10110a30:	e0bffe17 	ldw	r2,-8(fp)
10110a34:	e0ffff17 	ldw	r3,-4(fp)
10110a38:	e0fffc15 	stw	r3,-16(fp)
10110a3c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110a40:	e0bffd17 	ldw	r2,-12(fp)
10110a44:	e0fffc17 	ldw	r3,-16(fp)
10110a48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110a4c:	e0bffc17 	ldw	r2,-16(fp)
10110a50:	10c00017 	ldw	r3,0(r2)
10110a54:	e0bffd17 	ldw	r2,-12(fp)
10110a58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110a5c:	e0bffc17 	ldw	r2,-16(fp)
10110a60:	10800017 	ldw	r2,0(r2)
10110a64:	e0fffd17 	ldw	r3,-12(fp)
10110a68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110a6c:	e0bffc17 	ldw	r2,-16(fp)
10110a70:	e0fffd17 	ldw	r3,-12(fp)
10110a74:	10c00015 	stw	r3,0(r2)

  return 0;  
10110a78:	0005883a 	mov	r2,zero
}
10110a7c:	e037883a 	mov	sp,fp
10110a80:	dfc00117 	ldw	ra,4(sp)
10110a84:	df000017 	ldw	fp,0(sp)
10110a88:	dec00204 	addi	sp,sp,8
10110a8c:	f800283a 	ret

10110a90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10110a90:	defffd04 	addi	sp,sp,-12
10110a94:	dfc00215 	stw	ra,8(sp)
10110a98:	df000115 	stw	fp,4(sp)
10110a9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110aa0:	00840474 	movhi	r2,4113
10110aa4:	10856104 	addi	r2,r2,5508
10110aa8:	e0bfff15 	stw	r2,-4(fp)
10110aac:	00000606 	br	10110ac8 <_do_ctors+0x38>
        (*ctor) (); 
10110ab0:	e0bfff17 	ldw	r2,-4(fp)
10110ab4:	10800017 	ldw	r2,0(r2)
10110ab8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110abc:	e0bfff17 	ldw	r2,-4(fp)
10110ac0:	10bfff04 	addi	r2,r2,-4
10110ac4:	e0bfff15 	stw	r2,-4(fp)
10110ac8:	e0ffff17 	ldw	r3,-4(fp)
10110acc:	00840474 	movhi	r2,4113
10110ad0:	10856204 	addi	r2,r2,5512
10110ad4:	18bff62e 	bgeu	r3,r2,10110ab0 <__alt_data_end+0xffff0ab0>
        (*ctor) (); 
}
10110ad8:	0001883a 	nop
10110adc:	e037883a 	mov	sp,fp
10110ae0:	dfc00117 	ldw	ra,4(sp)
10110ae4:	df000017 	ldw	fp,0(sp)
10110ae8:	dec00204 	addi	sp,sp,8
10110aec:	f800283a 	ret

10110af0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10110af0:	defffd04 	addi	sp,sp,-12
10110af4:	dfc00215 	stw	ra,8(sp)
10110af8:	df000115 	stw	fp,4(sp)
10110afc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110b00:	00840474 	movhi	r2,4113
10110b04:	10856104 	addi	r2,r2,5508
10110b08:	e0bfff15 	stw	r2,-4(fp)
10110b0c:	00000606 	br	10110b28 <_do_dtors+0x38>
        (*dtor) (); 
10110b10:	e0bfff17 	ldw	r2,-4(fp)
10110b14:	10800017 	ldw	r2,0(r2)
10110b18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110b1c:	e0bfff17 	ldw	r2,-4(fp)
10110b20:	10bfff04 	addi	r2,r2,-4
10110b24:	e0bfff15 	stw	r2,-4(fp)
10110b28:	e0ffff17 	ldw	r3,-4(fp)
10110b2c:	00840474 	movhi	r2,4113
10110b30:	10856204 	addi	r2,r2,5512
10110b34:	18bff62e 	bgeu	r3,r2,10110b10 <__alt_data_end+0xffff0b10>
        (*dtor) (); 
}
10110b38:	0001883a 	nop
10110b3c:	e037883a 	mov	sp,fp
10110b40:	dfc00117 	ldw	ra,4(sp)
10110b44:	df000017 	ldw	fp,0(sp)
10110b48:	dec00204 	addi	sp,sp,8
10110b4c:	f800283a 	ret

10110b50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10110b50:	defffa04 	addi	sp,sp,-24
10110b54:	dfc00515 	stw	ra,20(sp)
10110b58:	df000415 	stw	fp,16(sp)
10110b5c:	df000404 	addi	fp,sp,16
10110b60:	e13ffe15 	stw	r4,-8(fp)
10110b64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10110b68:	e0bfff17 	ldw	r2,-4(fp)
10110b6c:	10800017 	ldw	r2,0(r2)
10110b70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10110b74:	e13ffe17 	ldw	r4,-8(fp)
10110b78:	010406c0 	call	1010406c <strlen>
10110b7c:	10800044 	addi	r2,r2,1
10110b80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110b84:	00000d06 	br	10110bbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10110b88:	e0bffc17 	ldw	r2,-16(fp)
10110b8c:	10800217 	ldw	r2,8(r2)
10110b90:	e0fffd17 	ldw	r3,-12(fp)
10110b94:	180d883a 	mov	r6,r3
10110b98:	e17ffe17 	ldw	r5,-8(fp)
10110b9c:	1009883a 	mov	r4,r2
10110ba0:	01112400 	call	10111240 <memcmp>
10110ba4:	1000021e 	bne	r2,zero,10110bb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10110ba8:	e0bffc17 	ldw	r2,-16(fp)
10110bac:	00000706 	br	10110bcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10110bb0:	e0bffc17 	ldw	r2,-16(fp)
10110bb4:	10800017 	ldw	r2,0(r2)
10110bb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110bbc:	e0fffc17 	ldw	r3,-16(fp)
10110bc0:	e0bfff17 	ldw	r2,-4(fp)
10110bc4:	18bff01e 	bne	r3,r2,10110b88 <__alt_data_end+0xffff0b88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10110bc8:	0005883a 	mov	r2,zero
}
10110bcc:	e037883a 	mov	sp,fp
10110bd0:	dfc00117 	ldw	ra,4(sp)
10110bd4:	df000017 	ldw	fp,0(sp)
10110bd8:	dec00204 	addi	sp,sp,8
10110bdc:	f800283a 	ret

10110be0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10110be0:	defffb04 	addi	sp,sp,-20
10110be4:	dfc00415 	stw	ra,16(sp)
10110be8:	df000315 	stw	fp,12(sp)
10110bec:	df000304 	addi	fp,sp,12
10110bf0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10110bf4:	d0a00617 	ldw	r2,-32744(gp)
10110bf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110bfc:	00003106 	br	10110cc4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10110c00:	e0bffd17 	ldw	r2,-12(fp)
10110c04:	10800217 	ldw	r2,8(r2)
10110c08:	1009883a 	mov	r4,r2
10110c0c:	010406c0 	call	1010406c <strlen>
10110c10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10110c14:	e0bffd17 	ldw	r2,-12(fp)
10110c18:	10c00217 	ldw	r3,8(r2)
10110c1c:	e0bffe17 	ldw	r2,-8(fp)
10110c20:	10bfffc4 	addi	r2,r2,-1
10110c24:	1885883a 	add	r2,r3,r2
10110c28:	10800003 	ldbu	r2,0(r2)
10110c2c:	10803fcc 	andi	r2,r2,255
10110c30:	1080201c 	xori	r2,r2,128
10110c34:	10bfe004 	addi	r2,r2,-128
10110c38:	10800bd8 	cmpnei	r2,r2,47
10110c3c:	1000031e 	bne	r2,zero,10110c4c <alt_find_file+0x6c>
    {
      len -= 1;
10110c40:	e0bffe17 	ldw	r2,-8(fp)
10110c44:	10bfffc4 	addi	r2,r2,-1
10110c48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110c4c:	e0bffe17 	ldw	r2,-8(fp)
10110c50:	e0ffff17 	ldw	r3,-4(fp)
10110c54:	1885883a 	add	r2,r3,r2
10110c58:	10800003 	ldbu	r2,0(r2)
10110c5c:	10803fcc 	andi	r2,r2,255
10110c60:	1080201c 	xori	r2,r2,128
10110c64:	10bfe004 	addi	r2,r2,-128
10110c68:	10800be0 	cmpeqi	r2,r2,47
10110c6c:	1000081e 	bne	r2,zero,10110c90 <alt_find_file+0xb0>
10110c70:	e0bffe17 	ldw	r2,-8(fp)
10110c74:	e0ffff17 	ldw	r3,-4(fp)
10110c78:	1885883a 	add	r2,r3,r2
10110c7c:	10800003 	ldbu	r2,0(r2)
10110c80:	10803fcc 	andi	r2,r2,255
10110c84:	1080201c 	xori	r2,r2,128
10110c88:	10bfe004 	addi	r2,r2,-128
10110c8c:	10000a1e 	bne	r2,zero,10110cb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10110c90:	e0bffd17 	ldw	r2,-12(fp)
10110c94:	10800217 	ldw	r2,8(r2)
10110c98:	e0fffe17 	ldw	r3,-8(fp)
10110c9c:	180d883a 	mov	r6,r3
10110ca0:	e17fff17 	ldw	r5,-4(fp)
10110ca4:	1009883a 	mov	r4,r2
10110ca8:	01112400 	call	10111240 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110cac:	1000021e 	bne	r2,zero,10110cb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10110cb0:	e0bffd17 	ldw	r2,-12(fp)
10110cb4:	00000706 	br	10110cd4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10110cb8:	e0bffd17 	ldw	r2,-12(fp)
10110cbc:	10800017 	ldw	r2,0(r2)
10110cc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110cc4:	e0fffd17 	ldw	r3,-12(fp)
10110cc8:	d0a00604 	addi	r2,gp,-32744
10110ccc:	18bfcc1e 	bne	r3,r2,10110c00 <__alt_data_end+0xffff0c00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10110cd0:	0005883a 	mov	r2,zero
}
10110cd4:	e037883a 	mov	sp,fp
10110cd8:	dfc00117 	ldw	ra,4(sp)
10110cdc:	df000017 	ldw	fp,0(sp)
10110ce0:	dec00204 	addi	sp,sp,8
10110ce4:	f800283a 	ret

10110ce8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10110ce8:	defffc04 	addi	sp,sp,-16
10110cec:	df000315 	stw	fp,12(sp)
10110cf0:	df000304 	addi	fp,sp,12
10110cf4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10110cf8:	00bffa04 	movi	r2,-24
10110cfc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110d00:	e03ffd15 	stw	zero,-12(fp)
10110d04:	00001906 	br	10110d6c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10110d08:	00840474 	movhi	r2,4113
10110d0c:	10887804 	addi	r2,r2,8672
10110d10:	e0fffd17 	ldw	r3,-12(fp)
10110d14:	18c00324 	muli	r3,r3,12
10110d18:	10c5883a 	add	r2,r2,r3
10110d1c:	10800017 	ldw	r2,0(r2)
10110d20:	10000f1e 	bne	r2,zero,10110d60 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10110d24:	00840474 	movhi	r2,4113
10110d28:	10887804 	addi	r2,r2,8672
10110d2c:	e0fffd17 	ldw	r3,-12(fp)
10110d30:	18c00324 	muli	r3,r3,12
10110d34:	10c5883a 	add	r2,r2,r3
10110d38:	e0ffff17 	ldw	r3,-4(fp)
10110d3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10110d40:	d0e00a17 	ldw	r3,-32728(gp)
10110d44:	e0bffd17 	ldw	r2,-12(fp)
10110d48:	1880020e 	bge	r3,r2,10110d54 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10110d4c:	e0bffd17 	ldw	r2,-12(fp)
10110d50:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10110d54:	e0bffd17 	ldw	r2,-12(fp)
10110d58:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10110d5c:	00000606 	br	10110d78 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110d60:	e0bffd17 	ldw	r2,-12(fp)
10110d64:	10800044 	addi	r2,r2,1
10110d68:	e0bffd15 	stw	r2,-12(fp)
10110d6c:	e0bffd17 	ldw	r2,-12(fp)
10110d70:	10800810 	cmplti	r2,r2,32
10110d74:	103fe41e 	bne	r2,zero,10110d08 <__alt_data_end+0xffff0d08>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110d78:	e0bffe17 	ldw	r2,-8(fp)
}
10110d7c:	e037883a 	mov	sp,fp
10110d80:	df000017 	ldw	fp,0(sp)
10110d84:	dec00104 	addi	sp,sp,4
10110d88:	f800283a 	ret

10110d8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10110d8c:	defffe04 	addi	sp,sp,-8
10110d90:	dfc00115 	stw	ra,4(sp)
10110d94:	df000015 	stw	fp,0(sp)
10110d98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10110d9c:	01440004 	movi	r5,4096
10110da0:	0009883a 	mov	r4,zero
10110da4:	01111640 	call	10111164 <alt_icache_flush>
#endif
}
10110da8:	0001883a 	nop
10110dac:	e037883a 	mov	sp,fp
10110db0:	dfc00117 	ldw	ra,4(sp)
10110db4:	df000017 	ldw	fp,0(sp)
10110db8:	dec00204 	addi	sp,sp,8
10110dbc:	f800283a 	ret

10110dc0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10110dc0:	defffe04 	addi	sp,sp,-8
10110dc4:	df000115 	stw	fp,4(sp)
10110dc8:	df000104 	addi	fp,sp,4
10110dcc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10110dd0:	e0bfff17 	ldw	r2,-4(fp)
10110dd4:	10bffe84 	addi	r2,r2,-6
10110dd8:	10c00428 	cmpgeui	r3,r2,16
10110ddc:	18001a1e 	bne	r3,zero,10110e48 <alt_exception_cause_generated_bad_addr+0x88>
10110de0:	100690ba 	slli	r3,r2,2
10110de4:	00840474 	movhi	r2,4113
10110de8:	10837e04 	addi	r2,r2,3576
10110dec:	1885883a 	add	r2,r3,r2
10110df0:	10800017 	ldw	r2,0(r2)
10110df4:	1000683a 	jmp	r2
10110df8:	10110e38 	rdprs	zero,r2,17464
10110dfc:	10110e38 	rdprs	zero,r2,17464
10110e00:	10110e48 	cmpgei	zero,r2,17465
10110e04:	10110e48 	cmpgei	zero,r2,17465
10110e08:	10110e48 	cmpgei	zero,r2,17465
10110e0c:	10110e38 	rdprs	zero,r2,17464
10110e10:	10110e40 	call	110110e4 <__alt_data_end+0xef10e4>
10110e14:	10110e48 	cmpgei	zero,r2,17465
10110e18:	10110e38 	rdprs	zero,r2,17464
10110e1c:	10110e38 	rdprs	zero,r2,17464
10110e20:	10110e48 	cmpgei	zero,r2,17465
10110e24:	10110e38 	rdprs	zero,r2,17464
10110e28:	10110e40 	call	110110e4 <__alt_data_end+0xef10e4>
10110e2c:	10110e48 	cmpgei	zero,r2,17465
10110e30:	10110e48 	cmpgei	zero,r2,17465
10110e34:	10110e38 	rdprs	zero,r2,17464
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10110e38:	00800044 	movi	r2,1
10110e3c:	00000306 	br	10110e4c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10110e40:	0005883a 	mov	r2,zero
10110e44:	00000106 	br	10110e4c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10110e48:	0005883a 	mov	r2,zero
  }
}
10110e4c:	e037883a 	mov	sp,fp
10110e50:	df000017 	ldw	fp,0(sp)
10110e54:	dec00104 	addi	sp,sp,4
10110e58:	f800283a 	ret

10110e5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10110e5c:	defff904 	addi	sp,sp,-28
10110e60:	dfc00615 	stw	ra,24(sp)
10110e64:	df000515 	stw	fp,20(sp)
10110e68:	df000504 	addi	fp,sp,20
10110e6c:	e13ffc15 	stw	r4,-16(fp)
10110e70:	e17ffd15 	stw	r5,-12(fp)
10110e74:	e1bffe15 	stw	r6,-8(fp)
10110e78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10110e7c:	e1bfff17 	ldw	r6,-4(fp)
10110e80:	e17ffe17 	ldw	r5,-8(fp)
10110e84:	e13ffd17 	ldw	r4,-12(fp)
10110e88:	010f6c40 	call	1010f6c4 <open>
10110e8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10110e90:	e0bffb17 	ldw	r2,-20(fp)
10110e94:	10001c16 	blt	r2,zero,10110f08 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10110e98:	00840474 	movhi	r2,4113
10110e9c:	10887804 	addi	r2,r2,8672
10110ea0:	e0fffb17 	ldw	r3,-20(fp)
10110ea4:	18c00324 	muli	r3,r3,12
10110ea8:	10c5883a 	add	r2,r2,r3
10110eac:	10c00017 	ldw	r3,0(r2)
10110eb0:	e0bffc17 	ldw	r2,-16(fp)
10110eb4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10110eb8:	00840474 	movhi	r2,4113
10110ebc:	10887804 	addi	r2,r2,8672
10110ec0:	e0fffb17 	ldw	r3,-20(fp)
10110ec4:	18c00324 	muli	r3,r3,12
10110ec8:	10c5883a 	add	r2,r2,r3
10110ecc:	10800104 	addi	r2,r2,4
10110ed0:	10c00017 	ldw	r3,0(r2)
10110ed4:	e0bffc17 	ldw	r2,-16(fp)
10110ed8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10110edc:	00840474 	movhi	r2,4113
10110ee0:	10887804 	addi	r2,r2,8672
10110ee4:	e0fffb17 	ldw	r3,-20(fp)
10110ee8:	18c00324 	muli	r3,r3,12
10110eec:	10c5883a 	add	r2,r2,r3
10110ef0:	10800204 	addi	r2,r2,8
10110ef4:	10c00017 	ldw	r3,0(r2)
10110ef8:	e0bffc17 	ldw	r2,-16(fp)
10110efc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10110f00:	e13ffb17 	ldw	r4,-20(fp)
10110f04:	010f9500 	call	1010f950 <alt_release_fd>
  }
} 
10110f08:	0001883a 	nop
10110f0c:	e037883a 	mov	sp,fp
10110f10:	dfc00117 	ldw	ra,4(sp)
10110f14:	df000017 	ldw	fp,0(sp)
10110f18:	dec00204 	addi	sp,sp,8
10110f1c:	f800283a 	ret

10110f20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10110f20:	defffb04 	addi	sp,sp,-20
10110f24:	dfc00415 	stw	ra,16(sp)
10110f28:	df000315 	stw	fp,12(sp)
10110f2c:	df000304 	addi	fp,sp,12
10110f30:	e13ffd15 	stw	r4,-12(fp)
10110f34:	e17ffe15 	stw	r5,-8(fp)
10110f38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10110f3c:	01c07fc4 	movi	r7,511
10110f40:	01800044 	movi	r6,1
10110f44:	e17ffd17 	ldw	r5,-12(fp)
10110f48:	01040474 	movhi	r4,4113
10110f4c:	21087b04 	addi	r4,r4,8684
10110f50:	0110e5c0 	call	10110e5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10110f54:	01c07fc4 	movi	r7,511
10110f58:	000d883a 	mov	r6,zero
10110f5c:	e17ffe17 	ldw	r5,-8(fp)
10110f60:	01040474 	movhi	r4,4113
10110f64:	21087804 	addi	r4,r4,8672
10110f68:	0110e5c0 	call	10110e5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10110f6c:	01c07fc4 	movi	r7,511
10110f70:	01800044 	movi	r6,1
10110f74:	e17fff17 	ldw	r5,-4(fp)
10110f78:	01040474 	movhi	r4,4113
10110f7c:	21087e04 	addi	r4,r4,8696
10110f80:	0110e5c0 	call	10110e5c <alt_open_fd>
}  
10110f84:	0001883a 	nop
10110f88:	e037883a 	mov	sp,fp
10110f8c:	dfc00117 	ldw	ra,4(sp)
10110f90:	df000017 	ldw	fp,0(sp)
10110f94:	dec00204 	addi	sp,sp,8
10110f98:	f800283a 	ret

10110f9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110f9c:	defffa04 	addi	sp,sp,-24
10110fa0:	df000515 	stw	fp,20(sp)
10110fa4:	df000504 	addi	fp,sp,20
10110fa8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110fac:	0005303a 	rdctl	r2,status
10110fb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110fb4:	e0fffc17 	ldw	r3,-16(fp)
10110fb8:	00bfff84 	movi	r2,-2
10110fbc:	1884703a 	and	r2,r3,r2
10110fc0:	1001703a 	wrctl	status,r2
  
  return context;
10110fc4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10110fc8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10110fcc:	e0bfff17 	ldw	r2,-4(fp)
10110fd0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10110fd4:	e0bffd17 	ldw	r2,-12(fp)
10110fd8:	10800017 	ldw	r2,0(r2)
10110fdc:	e0fffd17 	ldw	r3,-12(fp)
10110fe0:	18c00117 	ldw	r3,4(r3)
10110fe4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10110fe8:	e0bffd17 	ldw	r2,-12(fp)
10110fec:	10800117 	ldw	r2,4(r2)
10110ff0:	e0fffd17 	ldw	r3,-12(fp)
10110ff4:	18c00017 	ldw	r3,0(r3)
10110ff8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10110ffc:	e0bffd17 	ldw	r2,-12(fp)
10111000:	e0fffd17 	ldw	r3,-12(fp)
10111004:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10111008:	e0bffd17 	ldw	r2,-12(fp)
1011100c:	e0fffd17 	ldw	r3,-12(fp)
10111010:	10c00015 	stw	r3,0(r2)
10111014:	e0bffb17 	ldw	r2,-20(fp)
10111018:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1011101c:	e0bffe17 	ldw	r2,-8(fp)
10111020:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10111024:	0001883a 	nop
10111028:	e037883a 	mov	sp,fp
1011102c:	df000017 	ldw	fp,0(sp)
10111030:	dec00104 	addi	sp,sp,4
10111034:	f800283a 	ret

10111038 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10111038:	defffb04 	addi	sp,sp,-20
1011103c:	dfc00415 	stw	ra,16(sp)
10111040:	df000315 	stw	fp,12(sp)
10111044:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10111048:	d0a00e17 	ldw	r2,-32712(gp)
1011104c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10111050:	d0a6da17 	ldw	r2,-25752(gp)
10111054:	10800044 	addi	r2,r2,1
10111058:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1011105c:	00002e06 	br	10111118 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10111060:	e0bffd17 	ldw	r2,-12(fp)
10111064:	10800017 	ldw	r2,0(r2)
10111068:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1011106c:	e0bffd17 	ldw	r2,-12(fp)
10111070:	10800403 	ldbu	r2,16(r2)
10111074:	10803fcc 	andi	r2,r2,255
10111078:	10000426 	beq	r2,zero,1011108c <alt_tick+0x54>
1011107c:	d0a6da17 	ldw	r2,-25752(gp)
10111080:	1000021e 	bne	r2,zero,1011108c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10111084:	e0bffd17 	ldw	r2,-12(fp)
10111088:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1011108c:	e0bffd17 	ldw	r2,-12(fp)
10111090:	10800217 	ldw	r2,8(r2)
10111094:	d0e6da17 	ldw	r3,-25752(gp)
10111098:	18801d36 	bltu	r3,r2,10111110 <alt_tick+0xd8>
1011109c:	e0bffd17 	ldw	r2,-12(fp)
101110a0:	10800403 	ldbu	r2,16(r2)
101110a4:	10803fcc 	andi	r2,r2,255
101110a8:	1000191e 	bne	r2,zero,10111110 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
101110ac:	e0bffd17 	ldw	r2,-12(fp)
101110b0:	10800317 	ldw	r2,12(r2)
101110b4:	e0fffd17 	ldw	r3,-12(fp)
101110b8:	18c00517 	ldw	r3,20(r3)
101110bc:	1809883a 	mov	r4,r3
101110c0:	103ee83a 	callr	r2
101110c4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
101110c8:	e0bfff17 	ldw	r2,-4(fp)
101110cc:	1000031e 	bne	r2,zero,101110dc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
101110d0:	e13ffd17 	ldw	r4,-12(fp)
101110d4:	0110f9c0 	call	10110f9c <alt_alarm_stop>
101110d8:	00000d06 	br	10111110 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
101110dc:	e0bffd17 	ldw	r2,-12(fp)
101110e0:	10c00217 	ldw	r3,8(r2)
101110e4:	e0bfff17 	ldw	r2,-4(fp)
101110e8:	1887883a 	add	r3,r3,r2
101110ec:	e0bffd17 	ldw	r2,-12(fp)
101110f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
101110f4:	e0bffd17 	ldw	r2,-12(fp)
101110f8:	10c00217 	ldw	r3,8(r2)
101110fc:	d0a6da17 	ldw	r2,-25752(gp)
10111100:	1880032e 	bgeu	r3,r2,10111110 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10111104:	e0bffd17 	ldw	r2,-12(fp)
10111108:	00c00044 	movi	r3,1
1011110c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10111110:	e0bffe17 	ldw	r2,-8(fp)
10111114:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10111118:	e0fffd17 	ldw	r3,-12(fp)
1011111c:	d0a00e04 	addi	r2,gp,-32712
10111120:	18bfcf1e 	bne	r3,r2,10111060 <__alt_data_end+0xffff1060>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10111124:	0001883a 	nop
}
10111128:	0001883a 	nop
1011112c:	e037883a 	mov	sp,fp
10111130:	dfc00117 	ldw	ra,4(sp)
10111134:	df000017 	ldw	fp,0(sp)
10111138:	dec00204 	addi	sp,sp,8
1011113c:	f800283a 	ret

10111140 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10111140:	deffff04 	addi	sp,sp,-4
10111144:	df000015 	stw	fp,0(sp)
10111148:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1011114c:	000170fa 	wrctl	ienable,zero
}
10111150:	0001883a 	nop
10111154:	e037883a 	mov	sp,fp
10111158:	df000017 	ldw	fp,0(sp)
1011115c:	dec00104 	addi	sp,sp,4
10111160:	f800283a 	ret

10111164 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10111164:	defffb04 	addi	sp,sp,-20
10111168:	df000415 	stw	fp,16(sp)
1011116c:	df000404 	addi	fp,sp,16
10111170:	e13ffe15 	stw	r4,-8(fp)
10111174:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10111178:	e0bfff17 	ldw	r2,-4(fp)
1011117c:	10840070 	cmpltui	r2,r2,4097
10111180:	1000021e 	bne	r2,zero,1011118c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10111184:	00840004 	movi	r2,4096
10111188:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1011118c:	e0fffe17 	ldw	r3,-8(fp)
10111190:	e0bfff17 	ldw	r2,-4(fp)
10111194:	1885883a 	add	r2,r3,r2
10111198:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1011119c:	e0bffe17 	ldw	r2,-8(fp)
101111a0:	e0bffc15 	stw	r2,-16(fp)
101111a4:	00000506 	br	101111bc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
101111a8:	e0bffc17 	ldw	r2,-16(fp)
101111ac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101111b0:	e0bffc17 	ldw	r2,-16(fp)
101111b4:	10800804 	addi	r2,r2,32
101111b8:	e0bffc15 	stw	r2,-16(fp)
101111bc:	e0fffc17 	ldw	r3,-16(fp)
101111c0:	e0bffd17 	ldw	r2,-12(fp)
101111c4:	18bff836 	bltu	r3,r2,101111a8 <__alt_data_end+0xffff11a8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
101111c8:	e0bffe17 	ldw	r2,-8(fp)
101111cc:	108007cc 	andi	r2,r2,31
101111d0:	10000226 	beq	r2,zero,101111dc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
101111d4:	e0bffc17 	ldw	r2,-16(fp)
101111d8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
101111dc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
101111e0:	0001883a 	nop
101111e4:	e037883a 	mov	sp,fp
101111e8:	df000017 	ldw	fp,0(sp)
101111ec:	dec00104 	addi	sp,sp,4
101111f0:	f800283a 	ret

101111f4 <atexit>:
101111f4:	200b883a 	mov	r5,r4
101111f8:	000f883a 	mov	r7,zero
101111fc:	000d883a 	mov	r6,zero
10111200:	0009883a 	mov	r4,zero
10111204:	01112bc1 	jmpi	101112bc <__register_exitproc>

10111208 <exit>:
10111208:	defffe04 	addi	sp,sp,-8
1011120c:	000b883a 	mov	r5,zero
10111210:	dc000015 	stw	r16,0(sp)
10111214:	dfc00115 	stw	ra,4(sp)
10111218:	2021883a 	mov	r16,r4
1011121c:	01113d40 	call	101113d4 <__call_exitprocs>
10111220:	00840474 	movhi	r2,4113
10111224:	108cf004 	addi	r2,r2,13248
10111228:	11000017 	ldw	r4,0(r2)
1011122c:	20800f17 	ldw	r2,60(r4)
10111230:	10000126 	beq	r2,zero,10111238 <exit+0x30>
10111234:	103ee83a 	callr	r2
10111238:	8009883a 	mov	r4,r16
1011123c:	01115540 	call	10111554 <_exit>

10111240 <memcmp>:
10111240:	01c000c4 	movi	r7,3
10111244:	3980192e 	bgeu	r7,r6,101112ac <memcmp+0x6c>
10111248:	2144b03a 	or	r2,r4,r5
1011124c:	11c4703a 	and	r2,r2,r7
10111250:	10000f26 	beq	r2,zero,10111290 <memcmp+0x50>
10111254:	20800003 	ldbu	r2,0(r4)
10111258:	28c00003 	ldbu	r3,0(r5)
1011125c:	10c0151e 	bne	r2,r3,101112b4 <memcmp+0x74>
10111260:	31bfff84 	addi	r6,r6,-2
10111264:	01ffffc4 	movi	r7,-1
10111268:	00000406 	br	1011127c <memcmp+0x3c>
1011126c:	20800003 	ldbu	r2,0(r4)
10111270:	28c00003 	ldbu	r3,0(r5)
10111274:	31bfffc4 	addi	r6,r6,-1
10111278:	10c00e1e 	bne	r2,r3,101112b4 <memcmp+0x74>
1011127c:	21000044 	addi	r4,r4,1
10111280:	29400044 	addi	r5,r5,1
10111284:	31fff91e 	bne	r6,r7,1011126c <__alt_data_end+0xffff126c>
10111288:	0005883a 	mov	r2,zero
1011128c:	f800283a 	ret
10111290:	20c00017 	ldw	r3,0(r4)
10111294:	28800017 	ldw	r2,0(r5)
10111298:	18bfee1e 	bne	r3,r2,10111254 <__alt_data_end+0xffff1254>
1011129c:	31bfff04 	addi	r6,r6,-4
101112a0:	21000104 	addi	r4,r4,4
101112a4:	29400104 	addi	r5,r5,4
101112a8:	39bff936 	bltu	r7,r6,10111290 <__alt_data_end+0xffff1290>
101112ac:	303fe91e 	bne	r6,zero,10111254 <__alt_data_end+0xffff1254>
101112b0:	003ff506 	br	10111288 <__alt_data_end+0xffff1288>
101112b4:	10c5c83a 	sub	r2,r2,r3
101112b8:	f800283a 	ret

101112bc <__register_exitproc>:
101112bc:	defffa04 	addi	sp,sp,-24
101112c0:	dc000315 	stw	r16,12(sp)
101112c4:	04040474 	movhi	r16,4113
101112c8:	840cf004 	addi	r16,r16,13248
101112cc:	80c00017 	ldw	r3,0(r16)
101112d0:	dc400415 	stw	r17,16(sp)
101112d4:	dfc00515 	stw	ra,20(sp)
101112d8:	18805217 	ldw	r2,328(r3)
101112dc:	2023883a 	mov	r17,r4
101112e0:	10003726 	beq	r2,zero,101113c0 <__register_exitproc+0x104>
101112e4:	10c00117 	ldw	r3,4(r2)
101112e8:	010007c4 	movi	r4,31
101112ec:	20c00e16 	blt	r4,r3,10111328 <__register_exitproc+0x6c>
101112f0:	1a000044 	addi	r8,r3,1
101112f4:	8800221e 	bne	r17,zero,10111380 <__register_exitproc+0xc4>
101112f8:	18c00084 	addi	r3,r3,2
101112fc:	18c7883a 	add	r3,r3,r3
10111300:	18c7883a 	add	r3,r3,r3
10111304:	12000115 	stw	r8,4(r2)
10111308:	10c7883a 	add	r3,r2,r3
1011130c:	19400015 	stw	r5,0(r3)
10111310:	0005883a 	mov	r2,zero
10111314:	dfc00517 	ldw	ra,20(sp)
10111318:	dc400417 	ldw	r17,16(sp)
1011131c:	dc000317 	ldw	r16,12(sp)
10111320:	dec00604 	addi	sp,sp,24
10111324:	f800283a 	ret
10111328:	00800034 	movhi	r2,0
1011132c:	10800004 	addi	r2,r2,0
10111330:	10002626 	beq	r2,zero,101113cc <__register_exitproc+0x110>
10111334:	01006404 	movi	r4,400
10111338:	d9400015 	stw	r5,0(sp)
1011133c:	d9800115 	stw	r6,4(sp)
10111340:	d9c00215 	stw	r7,8(sp)
10111344:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10111348:	d9400017 	ldw	r5,0(sp)
1011134c:	d9800117 	ldw	r6,4(sp)
10111350:	d9c00217 	ldw	r7,8(sp)
10111354:	10001d26 	beq	r2,zero,101113cc <__register_exitproc+0x110>
10111358:	81000017 	ldw	r4,0(r16)
1011135c:	10000115 	stw	zero,4(r2)
10111360:	02000044 	movi	r8,1
10111364:	22405217 	ldw	r9,328(r4)
10111368:	0007883a 	mov	r3,zero
1011136c:	12400015 	stw	r9,0(r2)
10111370:	20805215 	stw	r2,328(r4)
10111374:	10006215 	stw	zero,392(r2)
10111378:	10006315 	stw	zero,396(r2)
1011137c:	883fde26 	beq	r17,zero,101112f8 <__alt_data_end+0xffff12f8>
10111380:	18c9883a 	add	r4,r3,r3
10111384:	2109883a 	add	r4,r4,r4
10111388:	1109883a 	add	r4,r2,r4
1011138c:	21802215 	stw	r6,136(r4)
10111390:	01800044 	movi	r6,1
10111394:	12406217 	ldw	r9,392(r2)
10111398:	30cc983a 	sll	r6,r6,r3
1011139c:	4992b03a 	or	r9,r9,r6
101113a0:	12406215 	stw	r9,392(r2)
101113a4:	21c04215 	stw	r7,264(r4)
101113a8:	01000084 	movi	r4,2
101113ac:	893fd21e 	bne	r17,r4,101112f8 <__alt_data_end+0xffff12f8>
101113b0:	11006317 	ldw	r4,396(r2)
101113b4:	218cb03a 	or	r6,r4,r6
101113b8:	11806315 	stw	r6,396(r2)
101113bc:	003fce06 	br	101112f8 <__alt_data_end+0xffff12f8>
101113c0:	18805304 	addi	r2,r3,332
101113c4:	18805215 	stw	r2,328(r3)
101113c8:	003fc606 	br	101112e4 <__alt_data_end+0xffff12e4>
101113cc:	00bfffc4 	movi	r2,-1
101113d0:	003fd006 	br	10111314 <__alt_data_end+0xffff1314>

101113d4 <__call_exitprocs>:
101113d4:	defff504 	addi	sp,sp,-44
101113d8:	df000915 	stw	fp,36(sp)
101113dc:	dd400615 	stw	r21,24(sp)
101113e0:	dc800315 	stw	r18,12(sp)
101113e4:	dfc00a15 	stw	ra,40(sp)
101113e8:	ddc00815 	stw	r23,32(sp)
101113ec:	dd800715 	stw	r22,28(sp)
101113f0:	dd000515 	stw	r20,20(sp)
101113f4:	dcc00415 	stw	r19,16(sp)
101113f8:	dc400215 	stw	r17,8(sp)
101113fc:	dc000115 	stw	r16,4(sp)
10111400:	d9000015 	stw	r4,0(sp)
10111404:	2839883a 	mov	fp,r5
10111408:	04800044 	movi	r18,1
1011140c:	057fffc4 	movi	r21,-1
10111410:	00840474 	movhi	r2,4113
10111414:	108cf004 	addi	r2,r2,13248
10111418:	12000017 	ldw	r8,0(r2)
1011141c:	45005217 	ldw	r20,328(r8)
10111420:	44c05204 	addi	r19,r8,328
10111424:	a0001c26 	beq	r20,zero,10111498 <__call_exitprocs+0xc4>
10111428:	a0800117 	ldw	r2,4(r20)
1011142c:	15ffffc4 	addi	r23,r2,-1
10111430:	b8000d16 	blt	r23,zero,10111468 <__call_exitprocs+0x94>
10111434:	14000044 	addi	r16,r2,1
10111438:	8421883a 	add	r16,r16,r16
1011143c:	8421883a 	add	r16,r16,r16
10111440:	84402004 	addi	r17,r16,128
10111444:	a463883a 	add	r17,r20,r17
10111448:	a421883a 	add	r16,r20,r16
1011144c:	e0001e26 	beq	fp,zero,101114c8 <__call_exitprocs+0xf4>
10111450:	80804017 	ldw	r2,256(r16)
10111454:	e0801c26 	beq	fp,r2,101114c8 <__call_exitprocs+0xf4>
10111458:	bdffffc4 	addi	r23,r23,-1
1011145c:	843fff04 	addi	r16,r16,-4
10111460:	8c7fff04 	addi	r17,r17,-4
10111464:	bd7ff91e 	bne	r23,r21,1011144c <__alt_data_end+0xffff144c>
10111468:	00800034 	movhi	r2,0
1011146c:	10800004 	addi	r2,r2,0
10111470:	10000926 	beq	r2,zero,10111498 <__call_exitprocs+0xc4>
10111474:	a0800117 	ldw	r2,4(r20)
10111478:	1000301e 	bne	r2,zero,1011153c <__call_exitprocs+0x168>
1011147c:	a0800017 	ldw	r2,0(r20)
10111480:	10003226 	beq	r2,zero,1011154c <__call_exitprocs+0x178>
10111484:	a009883a 	mov	r4,r20
10111488:	98800015 	stw	r2,0(r19)
1011148c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10111490:	9d000017 	ldw	r20,0(r19)
10111494:	a03fe41e 	bne	r20,zero,10111428 <__alt_data_end+0xffff1428>
10111498:	dfc00a17 	ldw	ra,40(sp)
1011149c:	df000917 	ldw	fp,36(sp)
101114a0:	ddc00817 	ldw	r23,32(sp)
101114a4:	dd800717 	ldw	r22,28(sp)
101114a8:	dd400617 	ldw	r21,24(sp)
101114ac:	dd000517 	ldw	r20,20(sp)
101114b0:	dcc00417 	ldw	r19,16(sp)
101114b4:	dc800317 	ldw	r18,12(sp)
101114b8:	dc400217 	ldw	r17,8(sp)
101114bc:	dc000117 	ldw	r16,4(sp)
101114c0:	dec00b04 	addi	sp,sp,44
101114c4:	f800283a 	ret
101114c8:	a0800117 	ldw	r2,4(r20)
101114cc:	80c00017 	ldw	r3,0(r16)
101114d0:	10bfffc4 	addi	r2,r2,-1
101114d4:	15c01426 	beq	r2,r23,10111528 <__call_exitprocs+0x154>
101114d8:	80000015 	stw	zero,0(r16)
101114dc:	183fde26 	beq	r3,zero,10111458 <__alt_data_end+0xffff1458>
101114e0:	95c8983a 	sll	r4,r18,r23
101114e4:	a0806217 	ldw	r2,392(r20)
101114e8:	a5800117 	ldw	r22,4(r20)
101114ec:	2084703a 	and	r2,r4,r2
101114f0:	10000b26 	beq	r2,zero,10111520 <__call_exitprocs+0x14c>
101114f4:	a0806317 	ldw	r2,396(r20)
101114f8:	2088703a 	and	r4,r4,r2
101114fc:	20000c1e 	bne	r4,zero,10111530 <__call_exitprocs+0x15c>
10111500:	89400017 	ldw	r5,0(r17)
10111504:	d9000017 	ldw	r4,0(sp)
10111508:	183ee83a 	callr	r3
1011150c:	a0800117 	ldw	r2,4(r20)
10111510:	15bfbf1e 	bne	r2,r22,10111410 <__alt_data_end+0xffff1410>
10111514:	98800017 	ldw	r2,0(r19)
10111518:	153fcf26 	beq	r2,r20,10111458 <__alt_data_end+0xffff1458>
1011151c:	003fbc06 	br	10111410 <__alt_data_end+0xffff1410>
10111520:	183ee83a 	callr	r3
10111524:	003ff906 	br	1011150c <__alt_data_end+0xffff150c>
10111528:	a5c00115 	stw	r23,4(r20)
1011152c:	003feb06 	br	101114dc <__alt_data_end+0xffff14dc>
10111530:	89000017 	ldw	r4,0(r17)
10111534:	183ee83a 	callr	r3
10111538:	003ff406 	br	1011150c <__alt_data_end+0xffff150c>
1011153c:	a0800017 	ldw	r2,0(r20)
10111540:	a027883a 	mov	r19,r20
10111544:	1029883a 	mov	r20,r2
10111548:	003fb606 	br	10111424 <__alt_data_end+0xffff1424>
1011154c:	0005883a 	mov	r2,zero
10111550:	003ffb06 	br	10111540 <__alt_data_end+0xffff1540>

10111554 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10111554:	defffd04 	addi	sp,sp,-12
10111558:	df000215 	stw	fp,8(sp)
1011155c:	df000204 	addi	fp,sp,8
10111560:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10111564:	0001883a 	nop
10111568:	e0bfff17 	ldw	r2,-4(fp)
1011156c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10111570:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10111574:	10000226 	beq	r2,zero,10111580 <_exit+0x2c>
    ALT_SIM_FAIL();
10111578:	002af070 	cmpltui	zero,zero,43969
1011157c:	00000106 	br	10111584 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10111580:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10111584:	003fff06 	br	10111584 <__alt_data_end+0xffff1584>
